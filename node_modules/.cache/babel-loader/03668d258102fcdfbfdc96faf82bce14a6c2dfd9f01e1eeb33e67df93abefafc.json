{"ast":null,"code":"import { IsStandardObject, IsDate, IsArray, IsTypedArray, IsValueType } from '../guard/index.mjs';\n// ------------------------------------------------------------------\n// Equality Checks\n// ------------------------------------------------------------------\nfunction ObjectType(left, right) {\n  if (!IsStandardObject(right)) return false;\n  const leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)];\n  const rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];\n  if (leftKeys.length !== rightKeys.length) return false;\n  return leftKeys.every(key => Equal(left[key], right[key]));\n}\nfunction DateType(left, right) {\n  return IsDate(right) && left.getTime() === right.getTime();\n}\nfunction ArrayType(left, right) {\n  if (!IsArray(right) || left.length !== right.length) return false;\n  return left.every((value, index) => Equal(value, right[index]));\n}\nfunction TypedArrayType(left, right) {\n  if (!IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name) return false;\n  return left.every((value, index) => Equal(value, right[index]));\n}\nfunction ValueType(left, right) {\n  return left === right;\n}\n// ------------------------------------------------------------------\n// Equal\n// ------------------------------------------------------------------\n/** Returns true if the left value deep-equals the right */\nexport function Equal(left, right) {\n  if (IsStandardObject(left)) return ObjectType(left, right);\n  if (IsDate(left)) return DateType(left, right);\n  if (IsTypedArray(left)) return TypedArrayType(left, right);\n  if (IsArray(left)) return ArrayType(left, right);\n  if (IsValueType(left)) return ValueType(left, right);\n  throw new Error('ValueEquals: Unable to compare value');\n}","map":{"version":3,"names":["IsStandardObject","IsDate","IsArray","IsTypedArray","IsValueType","ObjectType","left","right","leftKeys","Object","keys","getOwnPropertySymbols","rightKeys","length","every","key","Equal","DateType","getTime","ArrayType","value","index","TypedArrayType","getPrototypeOf","constructor","name","ValueType","Error"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/value/equal/equal.mjs"],"sourcesContent":["import { IsStandardObject, IsDate, IsArray, IsTypedArray, IsValueType } from '../guard/index.mjs';\n// ------------------------------------------------------------------\n// Equality Checks\n// ------------------------------------------------------------------\nfunction ObjectType(left, right) {\n    if (!IsStandardObject(right))\n        return false;\n    const leftKeys = [...Object.keys(left), ...Object.getOwnPropertySymbols(left)];\n    const rightKeys = [...Object.keys(right), ...Object.getOwnPropertySymbols(right)];\n    if (leftKeys.length !== rightKeys.length)\n        return false;\n    return leftKeys.every((key) => Equal(left[key], right[key]));\n}\nfunction DateType(left, right) {\n    return IsDate(right) && left.getTime() === right.getTime();\n}\nfunction ArrayType(left, right) {\n    if (!IsArray(right) || left.length !== right.length)\n        return false;\n    return left.every((value, index) => Equal(value, right[index]));\n}\nfunction TypedArrayType(left, right) {\n    if (!IsTypedArray(right) || left.length !== right.length || Object.getPrototypeOf(left).constructor.name !== Object.getPrototypeOf(right).constructor.name)\n        return false;\n    return left.every((value, index) => Equal(value, right[index]));\n}\nfunction ValueType(left, right) {\n    return left === right;\n}\n// ------------------------------------------------------------------\n// Equal\n// ------------------------------------------------------------------\n/** Returns true if the left value deep-equals the right */\nexport function Equal(left, right) {\n    if (IsStandardObject(left))\n        return ObjectType(left, right);\n    if (IsDate(left))\n        return DateType(left, right);\n    if (IsTypedArray(left))\n        return TypedArrayType(left, right);\n    if (IsArray(left))\n        return ArrayType(left, right);\n    if (IsValueType(left))\n        return ValueType(left, right);\n    throw new Error('ValueEquals: Unable to compare value');\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,MAAM,EAAEC,OAAO,EAAEC,YAAY,EAAEC,WAAW,QAAQ,oBAAoB;AACjG;AACA;AACA;AACA,SAASC,UAAUA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC7B,IAAI,CAACP,gBAAgB,CAACO,KAAK,CAAC,EACxB,OAAO,KAAK;EAChB,MAAMC,QAAQ,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,EAAE,GAAGG,MAAM,CAACE,qBAAqB,CAACL,IAAI,CAAC,CAAC;EAC9E,MAAMM,SAAS,GAAG,CAAC,GAAGH,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE,GAAGE,MAAM,CAACE,qBAAqB,CAACJ,KAAK,CAAC,CAAC;EACjF,IAAIC,QAAQ,CAACK,MAAM,KAAKD,SAAS,CAACC,MAAM,EACpC,OAAO,KAAK;EAChB,OAAOL,QAAQ,CAACM,KAAK,CAAEC,GAAG,IAAKC,KAAK,CAACV,IAAI,CAACS,GAAG,CAAC,EAAER,KAAK,CAACQ,GAAG,CAAC,CAAC,CAAC;AAChE;AACA,SAASE,QAAQA,CAACX,IAAI,EAAEC,KAAK,EAAE;EAC3B,OAAON,MAAM,CAACM,KAAK,CAAC,IAAID,IAAI,CAACY,OAAO,CAAC,CAAC,KAAKX,KAAK,CAACW,OAAO,CAAC,CAAC;AAC9D;AACA,SAASC,SAASA,CAACb,IAAI,EAAEC,KAAK,EAAE;EAC5B,IAAI,CAACL,OAAO,CAACK,KAAK,CAAC,IAAID,IAAI,CAACO,MAAM,KAAKN,KAAK,CAACM,MAAM,EAC/C,OAAO,KAAK;EAChB,OAAOP,IAAI,CAACQ,KAAK,CAAC,CAACM,KAAK,EAAEC,KAAK,KAAKL,KAAK,CAACI,KAAK,EAAEb,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;AACnE;AACA,SAASC,cAAcA,CAAChB,IAAI,EAAEC,KAAK,EAAE;EACjC,IAAI,CAACJ,YAAY,CAACI,KAAK,CAAC,IAAID,IAAI,CAACO,MAAM,KAAKN,KAAK,CAACM,MAAM,IAAIJ,MAAM,CAACc,cAAc,CAACjB,IAAI,CAAC,CAACkB,WAAW,CAACC,IAAI,KAAKhB,MAAM,CAACc,cAAc,CAAChB,KAAK,CAAC,CAACiB,WAAW,CAACC,IAAI,EACtJ,OAAO,KAAK;EAChB,OAAOnB,IAAI,CAACQ,KAAK,CAAC,CAACM,KAAK,EAAEC,KAAK,KAAKL,KAAK,CAACI,KAAK,EAAEb,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;AACnE;AACA,SAASK,SAASA,CAACpB,IAAI,EAAEC,KAAK,EAAE;EAC5B,OAAOD,IAAI,KAAKC,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,KAAKA,CAACV,IAAI,EAAEC,KAAK,EAAE;EAC/B,IAAIP,gBAAgB,CAACM,IAAI,CAAC,EACtB,OAAOD,UAAU,CAACC,IAAI,EAAEC,KAAK,CAAC;EAClC,IAAIN,MAAM,CAACK,IAAI,CAAC,EACZ,OAAOW,QAAQ,CAACX,IAAI,EAAEC,KAAK,CAAC;EAChC,IAAIJ,YAAY,CAACG,IAAI,CAAC,EAClB,OAAOgB,cAAc,CAAChB,IAAI,EAAEC,KAAK,CAAC;EACtC,IAAIL,OAAO,CAACI,IAAI,CAAC,EACb,OAAOa,SAAS,CAACb,IAAI,EAAEC,KAAK,CAAC;EACjC,IAAIH,WAAW,CAACE,IAAI,CAAC,EACjB,OAAOoB,SAAS,CAACpB,IAAI,EAAEC,KAAK,CAAC;EACjC,MAAM,IAAIoB,KAAK,CAAC,sCAAsC,CAAC;AAC3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}