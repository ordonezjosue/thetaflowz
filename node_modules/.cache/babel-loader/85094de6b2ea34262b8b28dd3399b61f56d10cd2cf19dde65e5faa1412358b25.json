{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport { Cookie } from \"tough-cookie\";\nimport { showNotice } from \"./notices.js\";\nconst CONFIG_FAKE_URL = \"http://config.yf2/\";\nlet crumb = null;\nconst parseHtmlEntities = str => str.replace(/&#x([0-9A-Fa-f]{1,3});/gi, (_, numStr) => String.fromCharCode(parseInt(numStr, 16)));\nexport async function _getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url = \"https://finance.yahoo.com/quote/AAPL\", develOverride = \"getCrumb-quote-AAPL.json\", noCache = false) {\n  if (!crumb) {\n    const cookies = await cookieJar.getCookies(CONFIG_FAKE_URL);\n    for (const cookie of cookies) {\n      if (cookie.key === \"crumb\") {\n        crumb = cookie.value;\n        logger.debug(\"Retrieved crumb from cookie store: \" + crumb);\n        break;\n      }\n    }\n  }\n  if (crumb && !noCache) {\n    // If we still have a valid (non-expired) cookie, return the existing crumb.\n    const existingCookies = await cookieJar.getCookies(url, {\n      expire: true\n    });\n    if (existingCookies.length) return crumb;\n  }\n  async function processSetCookieHeader(header, url) {\n    if (header) {\n      await cookieJar.setFromSetCookieHeaders(header, url);\n      return true;\n    }\n    return false;\n  }\n  logger.debug(\"Fetching crumb and cookies from \" + url + \"...\");\n  const fetchOptions = {\n    ...fetchOptionsBase,\n    headers: {\n      ...fetchOptionsBase.headers,\n      // NB, we won't get a set-cookie header back without this:\n      accept: \"text/html,application/xhtml+xml,application/xml\"\n      // This request will get our first cookies, so nothing to send.\n      // cookie: await cookieJar.getCookieString(url),\n    },\n    redirect: \"manual\",\n    devel: fetchOptionsBase.devel && develOverride\n  };\n  const response = await fetch(url, fetchOptions);\n  await processSetCookieHeader(response.headers.getSetCookie(), url);\n  // logger.debug(response.headers.raw());\n  // logger.debug(cookieJar);\n  const location = response.headers.get(\"location\");\n  if (location) {\n    if (location.match(/guce.yahoo/)) {\n      const consentFetchOptions = {\n        ...fetchOptions,\n        headers: {\n          ...fetchOptions.headers,\n          // GUCS=XXXXXXXX; Max-Age=1800; Domain=.yahoo.com; Path=/; Secure\n          cookie: await cookieJar.getCookieString(location)\n        },\n        devel: \"getCrumb-quote-AAPL-consent.html\"\n      };\n      // Returns 302 to collectConsent?sessionId=XXX\n      logger.debug(\"fetch\", location /*, consentFetchOptions */);\n      const consentResponse = await fetch(location, consentFetchOptions);\n      const consentLocation = consentResponse.headers.get(\"location\");\n      if (consentLocation) {\n        if (!consentLocation.match(/collectConsent/)) throw new Error(\"Unexpected redirect to \" + consentLocation);\n        const collectConsentFetchOptions = {\n          ...consentFetchOptions,\n          headers: {\n            ...fetchOptions.headers,\n            cookie: await cookieJar.getCookieString(consentLocation)\n          },\n          devel: \"getCrumb-quote-AAPL-collectConsent.html\"\n        };\n        logger.debug(\"fetch\", consentLocation /*, collectConsentFetchOptions */);\n        const collectConsentResponse = await fetch(consentLocation, collectConsentFetchOptions);\n        const collectConsentBody = await collectConsentResponse.text();\n        const collectConsentResponseParams = [...collectConsentBody.matchAll(/<input type=\"hidden\" name=\"([^\"]+)\" value=\"([^\"]+)\">/g)].map(([, name, value]) => `${name}=${encodeURIComponent(parseHtmlEntities(value))}&`).join(\"\") + \"agree=agree&agree=agree\";\n        const collectConsentSubmitFetchOptions = {\n          ...consentFetchOptions,\n          headers: {\n            ...fetchOptions.headers,\n            cookie: await cookieJar.getCookieString(consentLocation),\n            \"content-type\": \"application/x-www-form-urlencoded\"\n          },\n          method: \"POST\",\n          // body: \"csrfToken=XjJfOYU&sessionId=3_cc-session_bd9a3b0c-c1b4-4aa8-8c18-7a82ec68a5d5&originalDoneUrl=https%3A%2F%2Ffinance.yahoo.com%2Fquote%2FAAPL%3Fguccounter%3D1&namespace=yahoo&agree=agree&agree=agree\",\n          body: collectConsentResponseParams,\n          devel: \"getCrumb-quote-AAPL-collectConsentSubmit\"\n        };\n        logger.debug(\"fetch\", consentLocation /*, collectConsentSubmitFetchOptions */);\n        const collectConsentSubmitResponse = await fetch(consentLocation, collectConsentSubmitFetchOptions);\n        // Set-Cookie: CFC=AQABCAFkWkdkjEMdLwQ9&s=AQAAAClxdtC-&g=ZFj24w; Expires=Wed, 8 May 2024 01:18:54 GMT; Domain=consent.yahoo.com; Path=/; Secure\n        if (!(await processSetCookieHeader(collectConsentSubmitResponse.headers.getSetCookie(), consentLocation))) throw new Error(\"No set-cookie header on collectConsentSubmitResponse, please report.\");\n        // https://guce.yahoo.com/copyConsent?sessionId=3_cc-session_04da10ea-1025-4676-8175-60d2508bfc6c&lang=en-GB\n        const collectConsentSubmitResponseLocation = collectConsentSubmitResponse.headers.get(\"location\");\n        if (!collectConsentSubmitResponseLocation) throw new Error(\"collectConsentSubmitResponse unexpectedly did not return a Location header, please report.\");\n        const copyConsentFetchOptions = {\n          ...consentFetchOptions,\n          headers: {\n            ...fetchOptions.headers,\n            cookie: await cookieJar.getCookieString(collectConsentSubmitResponseLocation)\n          },\n          devel: \"getCrumb-quote-AAPL-copyConsent\"\n        };\n        logger.debug(\"fetch\", collectConsentSubmitResponseLocation /*, copyConsentFetchOptions */);\n        const copyConsentResponse = await fetch(collectConsentSubmitResponseLocation, copyConsentFetchOptions);\n        if (!(await processSetCookieHeader(copyConsentResponse.headers.getSetCookie(), collectConsentSubmitResponseLocation))) throw new Error(\"No set-cookie header on copyConsentResponse, please report.\");\n        const copyConsentResponseLocation = copyConsentResponse.headers.get(\"location\");\n        if (!copyConsentResponseLocation) throw new Error(\"collectConsentSubmitResponse unexpectedly did not return a Location header, please report.\");\n        const finalResponseFetchOptions = {\n          ...fetchOptions,\n          headers: {\n            ...fetchOptions.headers,\n            cookie: await cookieJar.getCookieString(collectConsentSubmitResponseLocation)\n          },\n          devel: \"getCrumb-quote-AAPL-consent-final-redirect.html\"\n        };\n        return await _getCrumb(cookieJar, fetch, finalResponseFetchOptions, logger, copyConsentResponseLocation, \"getCrumb-quote-AAPL-consent-final-redirect.html\", noCache);\n      }\n    } else {\n      console.error(\"We expected a redirect to guce.yahoo.com, but got \" + location);\n      console.error(\"We'll try to continue anyway - you can safely ignore this if the request succeeds\");\n      // throw new Error(\n      // \"Unsupported redirect to \" + location + \", please report.\");\n      // )\n    }\n  }\n  const cookie = (await cookieJar.getCookies(url, {\n    expire: true\n  }))[0];\n  if (cookie) {\n    logger.debug(\"Success. Cookie expires on \" + cookie.expires);\n  } else {\n    /*\n    logger.error(\n      \"No cookie was retreieved.  Probably the next request \" +\n        \"will fail.  Please report.\"\n    );\n    */\n    throw new Error(\"No set-cookie header present in Yahoo's response.  Something must have changed, please report.\");\n  }\n  /*\n  // This is the old way of getting the crumb, which is no longer working.\n  // Instead we make use of the code block that follows this comment, which\n  // uses the `/v1/test/getcrumb` endpoint.  However, the commented code\n  // below may still be useful in the future, so it is left here for now.\n     const source = await response.text();\n     // Could also match on window.YAHOO.context = { /* multi-line JSON */ /* }\n                                                                           const match = source.match(/\\nwindow.YAHOO.context = ({[\\s\\S]+\\n});\\n/);\n                                                                           if (!match) {\n                                                                           throw new Error(\n                                                                           \"Could not find window.YAHOO.context.  This is usually caused by \" +\n                                                                           \"temporary issues on Yahoo's servers that tend to resolve \" +\n                                                                           \"themselves; however, if the error persists for more than 12 \" +\n                                                                           \"hours, Yahoo's API may have changed, and you can help by reporting \" +\n                                                                           \"the issue.  Thanks :)\"\n                                                                           );\n                                                                           }\n                                                                           let context;\n                                                                           try {\n                                                                           context = JSON.parse(match[1]);\n                                                                           } catch (error) {\n                                                                           logger.debug(match[1]);\n                                                                           logger.error(error);\n                                                                           throw new Error(\n                                                                           \"Could not parse window.YAHOO.context.  Yahoo's API may have changed; please report.\"\n                                                                           );\n                                                                           }\n                                                                           crumb = context.crumb;\n                                                                           */\n  const GET_CRUMB_URL = \"https://query1.finance.yahoo.com/v1/test/getcrumb\";\n  const getCrumbOptions = {\n    ...fetchOptions,\n    headers: {\n      ...fetchOptions.headers,\n      // Big thanks to @nocodehummel who figured out a User-Agent that both\n      // works but still allows us to identify ourselves honestly.\n      \"User-Agent\": `Mozilla/5.0 (compatible; ${pkg.name}/${pkg.version})`,\n      cookie: await cookieJar.getCookieString(GET_CRUMB_URL),\n      origin: \"https://finance.yahoo.com\",\n      referer: url,\n      accept: \"*/*\",\n      \"accept-encoding\": \"gzip, deflate, br\",\n      \"accept-language\": \"en-US,en;q=0.9\",\n      \"content-type\": \"text/plain\"\n    },\n    devel: \"getCrumb-getcrumb\"\n  };\n  logger.debug(\"fetch\", GET_CRUMB_URL /*, getCrumbOptions */);\n  const getCrumbResponse = await fetch(GET_CRUMB_URL, getCrumbOptions);\n  if (getCrumbResponse.status !== 200) {\n    throw new Error(\"Failed to get crumb, status \" + getCrumbResponse.status + \", statusText: \" + getCrumbResponse.statusText);\n  }\n  const crumbFromGetCrumb = await getCrumbResponse.text();\n  crumb = crumbFromGetCrumb;\n  if (!crumb) throw new Error(\"Could not find crumb.  Yahoo's API may have changed; please report.\");\n  logger.debug(\"New crumb: \" + crumb);\n  await cookieJar.setCookie(new Cookie({\n    key: \"crumb\",\n    value: crumb\n  }), CONFIG_FAKE_URL);\n  promise = null;\n  return crumb;\n}\nlet promise = null;\nexport async function getCrumbClear(cookieJar) {\n  crumb = null;\n  promise = null;\n  await cookieJar.removeAllCookies();\n}\nexport default function getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url = \"https://finance.yahoo.com/quote/AAPL\", __getCrumb = _getCrumb) {\n  showNotice(\"yahooSurvey\");\n  if (!promise) promise = __getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url);\n  return promise;\n}","map":{"version":3,"names":["pkg","type","Cookie","showNotice","CONFIG_FAKE_URL","crumb","parseHtmlEntities","str","replace","_","numStr","String","fromCharCode","parseInt","_getCrumb","cookieJar","fetch","fetchOptionsBase","logger","url","develOverride","noCache","cookies","getCookies","cookie","key","value","debug","existingCookies","expire","length","processSetCookieHeader","header","setFromSetCookieHeaders","fetchOptions","headers","accept","redirect","devel","response","getSetCookie","location","get","match","consentFetchOptions","getCookieString","consentResponse","consentLocation","Error","collectConsentFetchOptions","collectConsentResponse","collectConsentBody","text","collectConsentResponseParams","matchAll","map","name","encodeURIComponent","join","collectConsentSubmitFetchOptions","method","body","collectConsentSubmitResponse","collectConsentSubmitResponseLocation","copyConsentFetchOptions","copyConsentResponse","copyConsentResponseLocation","finalResponseFetchOptions","console","error","expires","GET_CRUMB_URL","getCrumbOptions","version","origin","referer","getCrumbResponse","status","statusText","crumbFromGetCrumb","setCookie","promise","getCrumbClear","removeAllCookies","getCrumb","__getCrumb"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/lib/getCrumb.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport { Cookie } from \"tough-cookie\";\nimport { showNotice } from \"./notices.js\";\nconst CONFIG_FAKE_URL = \"http://config.yf2/\";\nlet crumb = null;\nconst parseHtmlEntities = (str) => str.replace(/&#x([0-9A-Fa-f]{1,3});/gi, (_, numStr) => String.fromCharCode(parseInt(numStr, 16)));\nexport async function _getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url = \"https://finance.yahoo.com/quote/AAPL\", develOverride = \"getCrumb-quote-AAPL.json\", noCache = false) {\n    if (!crumb) {\n        const cookies = await cookieJar.getCookies(CONFIG_FAKE_URL);\n        for (const cookie of cookies) {\n            if (cookie.key === \"crumb\") {\n                crumb = cookie.value;\n                logger.debug(\"Retrieved crumb from cookie store: \" + crumb);\n                break;\n            }\n        }\n    }\n    if (crumb && !noCache) {\n        // If we still have a valid (non-expired) cookie, return the existing crumb.\n        const existingCookies = await cookieJar.getCookies(url, { expire: true });\n        if (existingCookies.length)\n            return crumb;\n    }\n    async function processSetCookieHeader(header, url) {\n        if (header) {\n            await cookieJar.setFromSetCookieHeaders(header, url);\n            return true;\n        }\n        return false;\n    }\n    logger.debug(\"Fetching crumb and cookies from \" + url + \"...\");\n    const fetchOptions = {\n        ...fetchOptionsBase,\n        headers: {\n            ...fetchOptionsBase.headers,\n            // NB, we won't get a set-cookie header back without this:\n            accept: \"text/html,application/xhtml+xml,application/xml\",\n            // This request will get our first cookies, so nothing to send.\n            // cookie: await cookieJar.getCookieString(url),\n        },\n        redirect: \"manual\",\n        devel: fetchOptionsBase.devel && develOverride,\n    };\n    const response = await fetch(url, fetchOptions);\n    await processSetCookieHeader(response.headers.getSetCookie(), url);\n    // logger.debug(response.headers.raw());\n    // logger.debug(cookieJar);\n    const location = response.headers.get(\"location\");\n    if (location) {\n        if (location.match(/guce.yahoo/)) {\n            const consentFetchOptions = {\n                ...fetchOptions,\n                headers: {\n                    ...fetchOptions.headers,\n                    // GUCS=XXXXXXXX; Max-Age=1800; Domain=.yahoo.com; Path=/; Secure\n                    cookie: await cookieJar.getCookieString(location),\n                },\n                devel: \"getCrumb-quote-AAPL-consent.html\",\n            };\n            // Returns 302 to collectConsent?sessionId=XXX\n            logger.debug(\"fetch\", location /*, consentFetchOptions */);\n            const consentResponse = await fetch(location, consentFetchOptions);\n            const consentLocation = consentResponse.headers.get(\"location\");\n            if (consentLocation) {\n                if (!consentLocation.match(/collectConsent/))\n                    throw new Error(\"Unexpected redirect to \" + consentLocation);\n                const collectConsentFetchOptions = {\n                    ...consentFetchOptions,\n                    headers: {\n                        ...fetchOptions.headers,\n                        cookie: await cookieJar.getCookieString(consentLocation),\n                    },\n                    devel: \"getCrumb-quote-AAPL-collectConsent.html\",\n                };\n                logger.debug(\"fetch\", consentLocation /*, collectConsentFetchOptions */);\n                const collectConsentResponse = await fetch(consentLocation, collectConsentFetchOptions);\n                const collectConsentBody = await collectConsentResponse.text();\n                const collectConsentResponseParams = [\n                    ...collectConsentBody.matchAll(/<input type=\"hidden\" name=\"([^\"]+)\" value=\"([^\"]+)\">/g),\n                ]\n                    .map(([, name, value]) => `${name}=${encodeURIComponent(parseHtmlEntities(value))}&`)\n                    .join(\"\") + \"agree=agree&agree=agree\";\n                const collectConsentSubmitFetchOptions = {\n                    ...consentFetchOptions,\n                    headers: {\n                        ...fetchOptions.headers,\n                        cookie: await cookieJar.getCookieString(consentLocation),\n                        \"content-type\": \"application/x-www-form-urlencoded\",\n                    },\n                    method: \"POST\",\n                    // body: \"csrfToken=XjJfOYU&sessionId=3_cc-session_bd9a3b0c-c1b4-4aa8-8c18-7a82ec68a5d5&originalDoneUrl=https%3A%2F%2Ffinance.yahoo.com%2Fquote%2FAAPL%3Fguccounter%3D1&namespace=yahoo&agree=agree&agree=agree\",\n                    body: collectConsentResponseParams,\n                    devel: \"getCrumb-quote-AAPL-collectConsentSubmit\",\n                };\n                logger.debug(\"fetch\", consentLocation /*, collectConsentSubmitFetchOptions */);\n                const collectConsentSubmitResponse = await fetch(consentLocation, collectConsentSubmitFetchOptions);\n                // Set-Cookie: CFC=AQABCAFkWkdkjEMdLwQ9&s=AQAAAClxdtC-&g=ZFj24w; Expires=Wed, 8 May 2024 01:18:54 GMT; Domain=consent.yahoo.com; Path=/; Secure\n                if (!(await processSetCookieHeader(collectConsentSubmitResponse.headers.getSetCookie(), consentLocation)))\n                    throw new Error(\"No set-cookie header on collectConsentSubmitResponse, please report.\");\n                // https://guce.yahoo.com/copyConsent?sessionId=3_cc-session_04da10ea-1025-4676-8175-60d2508bfc6c&lang=en-GB\n                const collectConsentSubmitResponseLocation = collectConsentSubmitResponse.headers.get(\"location\");\n                if (!collectConsentSubmitResponseLocation)\n                    throw new Error(\"collectConsentSubmitResponse unexpectedly did not return a Location header, please report.\");\n                const copyConsentFetchOptions = {\n                    ...consentFetchOptions,\n                    headers: {\n                        ...fetchOptions.headers,\n                        cookie: await cookieJar.getCookieString(collectConsentSubmitResponseLocation),\n                    },\n                    devel: \"getCrumb-quote-AAPL-copyConsent\",\n                };\n                logger.debug(\"fetch\", collectConsentSubmitResponseLocation /*, copyConsentFetchOptions */);\n                const copyConsentResponse = await fetch(collectConsentSubmitResponseLocation, copyConsentFetchOptions);\n                if (!(await processSetCookieHeader(copyConsentResponse.headers.getSetCookie(), collectConsentSubmitResponseLocation)))\n                    throw new Error(\"No set-cookie header on copyConsentResponse, please report.\");\n                const copyConsentResponseLocation = copyConsentResponse.headers.get(\"location\");\n                if (!copyConsentResponseLocation)\n                    throw new Error(\"collectConsentSubmitResponse unexpectedly did not return a Location header, please report.\");\n                const finalResponseFetchOptions = {\n                    ...fetchOptions,\n                    headers: {\n                        ...fetchOptions.headers,\n                        cookie: await cookieJar.getCookieString(collectConsentSubmitResponseLocation),\n                    },\n                    devel: \"getCrumb-quote-AAPL-consent-final-redirect.html\",\n                };\n                return await _getCrumb(cookieJar, fetch, finalResponseFetchOptions, logger, copyConsentResponseLocation, \"getCrumb-quote-AAPL-consent-final-redirect.html\", noCache);\n            }\n        }\n        else {\n            console.error(\"We expected a redirect to guce.yahoo.com, but got \" + location);\n            console.error(\"We'll try to continue anyway - you can safely ignore this if the request succeeds\");\n            // throw new Error(\n            // \"Unsupported redirect to \" + location + \", please report.\");\n            // )\n        }\n    }\n    const cookie = (await cookieJar.getCookies(url, { expire: true }))[0];\n    if (cookie) {\n        logger.debug(\"Success. Cookie expires on \" + cookie.expires);\n    }\n    else {\n        /*\n        logger.error(\n          \"No cookie was retreieved.  Probably the next request \" +\n            \"will fail.  Please report.\"\n        );\n        */\n        throw new Error(\"No set-cookie header present in Yahoo's response.  Something must have changed, please report.\");\n    }\n    /*\n    // This is the old way of getting the crumb, which is no longer working.\n    // Instead we make use of the code block that follows this comment, which\n    // uses the `/v1/test/getcrumb` endpoint.  However, the commented code\n    // below may still be useful in the future, so it is left here for now.\n  \n    const source = await response.text();\n  \n    // Could also match on window.YAHOO.context = { /* multi-line JSON */ /* }\n    const match = source.match(/\\nwindow.YAHOO.context = ({[\\s\\S]+\\n});\\n/);\n    if (!match) {\n      throw new Error(\n        \"Could not find window.YAHOO.context.  This is usually caused by \" +\n          \"temporary issues on Yahoo's servers that tend to resolve \" +\n          \"themselves; however, if the error persists for more than 12 \" +\n          \"hours, Yahoo's API may have changed, and you can help by reporting \" +\n          \"the issue.  Thanks :)\"\n      );\n    }\n  \n    let context;\n    try {\n      context = JSON.parse(match[1]);\n    } catch (error) {\n      logger.debug(match[1]);\n      logger.error(error);\n      throw new Error(\n        \"Could not parse window.YAHOO.context.  Yahoo's API may have changed; please report.\"\n      );\n    }\n  \n    crumb = context.crumb;\n    */\n    const GET_CRUMB_URL = \"https://query1.finance.yahoo.com/v1/test/getcrumb\";\n    const getCrumbOptions = {\n        ...fetchOptions,\n        headers: {\n            ...fetchOptions.headers,\n            // Big thanks to @nocodehummel who figured out a User-Agent that both\n            // works but still allows us to identify ourselves honestly.\n            \"User-Agent\": `Mozilla/5.0 (compatible; ${pkg.name}/${pkg.version})`,\n            cookie: await cookieJar.getCookieString(GET_CRUMB_URL),\n            origin: \"https://finance.yahoo.com\",\n            referer: url,\n            accept: \"*/*\",\n            \"accept-encoding\": \"gzip, deflate, br\",\n            \"accept-language\": \"en-US,en;q=0.9\",\n            \"content-type\": \"text/plain\",\n        },\n        devel: \"getCrumb-getcrumb\",\n    };\n    logger.debug(\"fetch\", GET_CRUMB_URL /*, getCrumbOptions */);\n    const getCrumbResponse = await fetch(GET_CRUMB_URL, getCrumbOptions);\n    if (getCrumbResponse.status !== 200) {\n        throw new Error(\"Failed to get crumb, status \" +\n            getCrumbResponse.status +\n            \", statusText: \" +\n            getCrumbResponse.statusText);\n    }\n    const crumbFromGetCrumb = await getCrumbResponse.text();\n    crumb = crumbFromGetCrumb;\n    if (!crumb)\n        throw new Error(\"Could not find crumb.  Yahoo's API may have changed; please report.\");\n    logger.debug(\"New crumb: \" + crumb);\n    await cookieJar.setCookie(new Cookie({\n        key: \"crumb\",\n        value: crumb,\n    }), CONFIG_FAKE_URL);\n    promise = null;\n    return crumb;\n}\nlet promise = null;\nexport async function getCrumbClear(cookieJar) {\n    crumb = null;\n    promise = null;\n    await cookieJar.removeAllCookies();\n}\nexport default function getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url = \"https://finance.yahoo.com/quote/AAPL\", __getCrumb = _getCrumb) {\n    showNotice(\"yahooSurvey\");\n    if (!promise)\n        promise = __getCrumb(cookieJar, fetch, fetchOptionsBase, logger, url);\n    return promise;\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,GAAG,MAAM,oBAAoB,QAAQC,IAAI,EAAE,MAAM;AACxD,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,UAAU,QAAQ,cAAc;AACzC,MAAMC,eAAe,GAAG,oBAAoB;AAC5C,IAAIC,KAAK,GAAG,IAAI;AAChB,MAAMC,iBAAiB,GAAIC,GAAG,IAAKA,GAAG,CAACC,OAAO,CAAC,0BAA0B,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAACH,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AACpI,OAAO,eAAeI,SAASA,CAACC,SAAS,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,GAAG,GAAG,sCAAsC,EAAEC,aAAa,GAAG,0BAA0B,EAAEC,OAAO,GAAG,KAAK,EAAE;EACnL,IAAI,CAAChB,KAAK,EAAE;IACR,MAAMiB,OAAO,GAAG,MAAMP,SAAS,CAACQ,UAAU,CAACnB,eAAe,CAAC;IAC3D,KAAK,MAAMoB,MAAM,IAAIF,OAAO,EAAE;MAC1B,IAAIE,MAAM,CAACC,GAAG,KAAK,OAAO,EAAE;QACxBpB,KAAK,GAAGmB,MAAM,CAACE,KAAK;QACpBR,MAAM,CAACS,KAAK,CAAC,qCAAqC,GAAGtB,KAAK,CAAC;QAC3D;MACJ;IACJ;EACJ;EACA,IAAIA,KAAK,IAAI,CAACgB,OAAO,EAAE;IACnB;IACA,MAAMO,eAAe,GAAG,MAAMb,SAAS,CAACQ,UAAU,CAACJ,GAAG,EAAE;MAAEU,MAAM,EAAE;IAAK,CAAC,CAAC;IACzE,IAAID,eAAe,CAACE,MAAM,EACtB,OAAOzB,KAAK;EACpB;EACA,eAAe0B,sBAAsBA,CAACC,MAAM,EAAEb,GAAG,EAAE;IAC/C,IAAIa,MAAM,EAAE;MACR,MAAMjB,SAAS,CAACkB,uBAAuB,CAACD,MAAM,EAAEb,GAAG,CAAC;MACpD,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAD,MAAM,CAACS,KAAK,CAAC,kCAAkC,GAAGR,GAAG,GAAG,KAAK,CAAC;EAC9D,MAAMe,YAAY,GAAG;IACjB,GAAGjB,gBAAgB;IACnBkB,OAAO,EAAE;MACL,GAAGlB,gBAAgB,CAACkB,OAAO;MAC3B;MACAC,MAAM,EAAE;MACR;MACA;IACJ,CAAC;IACDC,QAAQ,EAAE,QAAQ;IAClBC,KAAK,EAAErB,gBAAgB,CAACqB,KAAK,IAAIlB;EACrC,CAAC;EACD,MAAMmB,QAAQ,GAAG,MAAMvB,KAAK,CAACG,GAAG,EAAEe,YAAY,CAAC;EAC/C,MAAMH,sBAAsB,CAACQ,QAAQ,CAACJ,OAAO,CAACK,YAAY,CAAC,CAAC,EAAErB,GAAG,CAAC;EAClE;EACA;EACA,MAAMsB,QAAQ,GAAGF,QAAQ,CAACJ,OAAO,CAACO,GAAG,CAAC,UAAU,CAAC;EACjD,IAAID,QAAQ,EAAE;IACV,IAAIA,QAAQ,CAACE,KAAK,CAAC,YAAY,CAAC,EAAE;MAC9B,MAAMC,mBAAmB,GAAG;QACxB,GAAGV,YAAY;QACfC,OAAO,EAAE;UACL,GAAGD,YAAY,CAACC,OAAO;UACvB;UACAX,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAACJ,QAAQ;QACpD,CAAC;QACDH,KAAK,EAAE;MACX,CAAC;MACD;MACApB,MAAM,CAACS,KAAK,CAAC,OAAO,EAAEc,QAAQ,CAAC,0BAA0B,CAAC;MAC1D,MAAMK,eAAe,GAAG,MAAM9B,KAAK,CAACyB,QAAQ,EAAEG,mBAAmB,CAAC;MAClE,MAAMG,eAAe,GAAGD,eAAe,CAACX,OAAO,CAACO,GAAG,CAAC,UAAU,CAAC;MAC/D,IAAIK,eAAe,EAAE;QACjB,IAAI,CAACA,eAAe,CAACJ,KAAK,CAAC,gBAAgB,CAAC,EACxC,MAAM,IAAIK,KAAK,CAAC,yBAAyB,GAAGD,eAAe,CAAC;QAChE,MAAME,0BAA0B,GAAG;UAC/B,GAAGL,mBAAmB;UACtBT,OAAO,EAAE;YACL,GAAGD,YAAY,CAACC,OAAO;YACvBX,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAACE,eAAe;UAC3D,CAAC;UACDT,KAAK,EAAE;QACX,CAAC;QACDpB,MAAM,CAACS,KAAK,CAAC,OAAO,EAAEoB,eAAe,CAAC,iCAAiC,CAAC;QACxE,MAAMG,sBAAsB,GAAG,MAAMlC,KAAK,CAAC+B,eAAe,EAAEE,0BAA0B,CAAC;QACvF,MAAME,kBAAkB,GAAG,MAAMD,sBAAsB,CAACE,IAAI,CAAC,CAAC;QAC9D,MAAMC,4BAA4B,GAAG,CACjC,GAAGF,kBAAkB,CAACG,QAAQ,CAAC,uDAAuD,CAAC,CAC1F,CACIC,GAAG,CAAC,CAAC,GAAGC,IAAI,EAAE9B,KAAK,CAAC,KAAK,GAAG8B,IAAI,IAAIC,kBAAkB,CAACnD,iBAAiB,CAACoB,KAAK,CAAC,CAAC,GAAG,CAAC,CACpFgC,IAAI,CAAC,EAAE,CAAC,GAAG,yBAAyB;QACzC,MAAMC,gCAAgC,GAAG;UACrC,GAAGf,mBAAmB;UACtBT,OAAO,EAAE;YACL,GAAGD,YAAY,CAACC,OAAO;YACvBX,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAACE,eAAe,CAAC;YACxD,cAAc,EAAE;UACpB,CAAC;UACDa,MAAM,EAAE,MAAM;UACd;UACAC,IAAI,EAAER,4BAA4B;UAClCf,KAAK,EAAE;QACX,CAAC;QACDpB,MAAM,CAACS,KAAK,CAAC,OAAO,EAAEoB,eAAe,CAAC,uCAAuC,CAAC;QAC9E,MAAMe,4BAA4B,GAAG,MAAM9C,KAAK,CAAC+B,eAAe,EAAEY,gCAAgC,CAAC;QACnG;QACA,IAAI,EAAE,MAAM5B,sBAAsB,CAAC+B,4BAA4B,CAAC3B,OAAO,CAACK,YAAY,CAAC,CAAC,EAAEO,eAAe,CAAC,CAAC,EACrG,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC;QAC3F;QACA,MAAMe,oCAAoC,GAAGD,4BAA4B,CAAC3B,OAAO,CAACO,GAAG,CAAC,UAAU,CAAC;QACjG,IAAI,CAACqB,oCAAoC,EACrC,MAAM,IAAIf,KAAK,CAAC,4FAA4F,CAAC;QACjH,MAAMgB,uBAAuB,GAAG;UAC5B,GAAGpB,mBAAmB;UACtBT,OAAO,EAAE;YACL,GAAGD,YAAY,CAACC,OAAO;YACvBX,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAACkB,oCAAoC;UAChF,CAAC;UACDzB,KAAK,EAAE;QACX,CAAC;QACDpB,MAAM,CAACS,KAAK,CAAC,OAAO,EAAEoC,oCAAoC,CAAC,8BAA8B,CAAC;QAC1F,MAAME,mBAAmB,GAAG,MAAMjD,KAAK,CAAC+C,oCAAoC,EAAEC,uBAAuB,CAAC;QACtG,IAAI,EAAE,MAAMjC,sBAAsB,CAACkC,mBAAmB,CAAC9B,OAAO,CAACK,YAAY,CAAC,CAAC,EAAEuB,oCAAoC,CAAC,CAAC,EACjH,MAAM,IAAIf,KAAK,CAAC,6DAA6D,CAAC;QAClF,MAAMkB,2BAA2B,GAAGD,mBAAmB,CAAC9B,OAAO,CAACO,GAAG,CAAC,UAAU,CAAC;QAC/E,IAAI,CAACwB,2BAA2B,EAC5B,MAAM,IAAIlB,KAAK,CAAC,4FAA4F,CAAC;QACjH,MAAMmB,yBAAyB,GAAG;UAC9B,GAAGjC,YAAY;UACfC,OAAO,EAAE;YACL,GAAGD,YAAY,CAACC,OAAO;YACvBX,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAACkB,oCAAoC;UAChF,CAAC;UACDzB,KAAK,EAAE;QACX,CAAC;QACD,OAAO,MAAMxB,SAAS,CAACC,SAAS,EAAEC,KAAK,EAAEmD,yBAAyB,EAAEjD,MAAM,EAAEgD,2BAA2B,EAAE,iDAAiD,EAAE7C,OAAO,CAAC;MACxK;IACJ,CAAC,MACI;MACD+C,OAAO,CAACC,KAAK,CAAC,oDAAoD,GAAG5B,QAAQ,CAAC;MAC9E2B,OAAO,CAACC,KAAK,CAAC,mFAAmF,CAAC;MAClG;MACA;MACA;IACJ;EACJ;EACA,MAAM7C,MAAM,GAAG,CAAC,MAAMT,SAAS,CAACQ,UAAU,CAACJ,GAAG,EAAE;IAAEU,MAAM,EAAE;EAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACrE,IAAIL,MAAM,EAAE;IACRN,MAAM,CAACS,KAAK,CAAC,6BAA6B,GAAGH,MAAM,CAAC8C,OAAO,CAAC;EAChE,CAAC,MACI;IACD;AACR;AACA;AACA;AACA;AACA;IACQ,MAAM,IAAItB,KAAK,CAAC,gGAAgG,CAAC;EACrH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA,0EANI,CAQsE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGI,MAAMuB,aAAa,GAAG,mDAAmD;EACzE,MAAMC,eAAe,GAAG;IACpB,GAAGtC,YAAY;IACfC,OAAO,EAAE;MACL,GAAGD,YAAY,CAACC,OAAO;MACvB;MACA;MACA,YAAY,EAAE,4BAA4BnC,GAAG,CAACwD,IAAI,IAAIxD,GAAG,CAACyE,OAAO,GAAG;MACpEjD,MAAM,EAAE,MAAMT,SAAS,CAAC8B,eAAe,CAAC0B,aAAa,CAAC;MACtDG,MAAM,EAAE,2BAA2B;MACnCC,OAAO,EAAExD,GAAG;MACZiB,MAAM,EAAE,KAAK;MACb,iBAAiB,EAAE,mBAAmB;MACtC,iBAAiB,EAAE,gBAAgB;MACnC,cAAc,EAAE;IACpB,CAAC;IACDE,KAAK,EAAE;EACX,CAAC;EACDpB,MAAM,CAACS,KAAK,CAAC,OAAO,EAAE4C,aAAa,CAAC,sBAAsB,CAAC;EAC3D,MAAMK,gBAAgB,GAAG,MAAM5D,KAAK,CAACuD,aAAa,EAAEC,eAAe,CAAC;EACpE,IAAII,gBAAgB,CAACC,MAAM,KAAK,GAAG,EAAE;IACjC,MAAM,IAAI7B,KAAK,CAAC,8BAA8B,GAC1C4B,gBAAgB,CAACC,MAAM,GACvB,gBAAgB,GAChBD,gBAAgB,CAACE,UAAU,CAAC;EACpC;EACA,MAAMC,iBAAiB,GAAG,MAAMH,gBAAgB,CAACxB,IAAI,CAAC,CAAC;EACvD/C,KAAK,GAAG0E,iBAAiB;EACzB,IAAI,CAAC1E,KAAK,EACN,MAAM,IAAI2C,KAAK,CAAC,qEAAqE,CAAC;EAC1F9B,MAAM,CAACS,KAAK,CAAC,aAAa,GAAGtB,KAAK,CAAC;EACnC,MAAMU,SAAS,CAACiE,SAAS,CAAC,IAAI9E,MAAM,CAAC;IACjCuB,GAAG,EAAE,OAAO;IACZC,KAAK,EAAErB;EACX,CAAC,CAAC,EAAED,eAAe,CAAC;EACpB6E,OAAO,GAAG,IAAI;EACd,OAAO5E,KAAK;AAChB;AACA,IAAI4E,OAAO,GAAG,IAAI;AAClB,OAAO,eAAeC,aAAaA,CAACnE,SAAS,EAAE;EAC3CV,KAAK,GAAG,IAAI;EACZ4E,OAAO,GAAG,IAAI;EACd,MAAMlE,SAAS,CAACoE,gBAAgB,CAAC,CAAC;AACtC;AACA,eAAe,SAASC,QAAQA,CAACrE,SAAS,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,GAAG,GAAG,sCAAsC,EAAEkE,UAAU,GAAGvE,SAAS,EAAE;EAC/IX,UAAU,CAAC,aAAa,CAAC;EACzB,IAAI,CAAC8E,OAAO,EACRA,OAAO,GAAGI,UAAU,CAACtE,SAAS,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,GAAG,CAAC;EACzE,OAAO8D,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}