{"ast":null,"code":"import { Union } from '../union/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from './extends-check.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExtendsFromMappedKey } from './extends-from-mapped-key.mjs';\nimport { ExtendsFromMappedResult } from './extends-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedKey, IsMappedResult } from '../guard/kind.mjs';\n// prettier-ignore\nfunction ExtendsResolve(left, right, trueType, falseType) {\n  const R = ExtendsCheck(left, right);\n  return R === ExtendsResult.Union ? Union([trueType, falseType]) : R === ExtendsResult.True ? trueType : falseType;\n}\n/** `[Json]` Creates a Conditional type */\nexport function Extends(L, R, T, F, options = {}) {\n  // prettier-ignore\n  return IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) : IsMappedKey(L) ? CloneType(ExtendsFromMappedKey(L, R, T, F, options)) : CloneType(ExtendsResolve(L, R, T, F), options);\n}","map":{"version":3,"names":["Union","ExtendsCheck","ExtendsResult","CloneType","ExtendsFromMappedKey","ExtendsFromMappedResult","IsMappedKey","IsMappedResult","ExtendsResolve","left","right","trueType","falseType","R","True","Extends","L","T","F","options"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/extends/extends.mjs"],"sourcesContent":["import { Union } from '../union/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from './extends-check.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExtendsFromMappedKey } from './extends-from-mapped-key.mjs';\nimport { ExtendsFromMappedResult } from './extends-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedKey, IsMappedResult } from '../guard/kind.mjs';\n// prettier-ignore\nfunction ExtendsResolve(left, right, trueType, falseType) {\n    const R = ExtendsCheck(left, right);\n    return (R === ExtendsResult.Union ? Union([trueType, falseType]) :\n        R === ExtendsResult.True ? trueType :\n            falseType);\n}\n/** `[Json]` Creates a Conditional type */\nexport function Extends(L, R, T, F, options = {}) {\n    // prettier-ignore\n    return (IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) :\n        IsMappedKey(L) ? CloneType(ExtendsFromMappedKey(L, R, T, F, options)) :\n            CloneType(ExtendsResolve(L, R, T, F), options));\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,YAAY,EAAEC,aAAa,QAAQ,qBAAqB;AACjE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,oBAAoB,QAAQ,+BAA+B;AACpE,SAASC,uBAAuB,QAAQ,kCAAkC;AAC1E;AACA;AACA;AACA,SAASC,WAAW,EAAEC,cAAc,QAAQ,mBAAmB;AAC/D;AACA,SAASC,cAAcA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,SAAS,EAAE;EACtD,MAAMC,CAAC,GAAGZ,YAAY,CAACQ,IAAI,EAAEC,KAAK,CAAC;EACnC,OAAQG,CAAC,KAAKX,aAAa,CAACF,KAAK,GAAGA,KAAK,CAAC,CAACW,QAAQ,EAAEC,SAAS,CAAC,CAAC,GAC5DC,CAAC,KAAKX,aAAa,CAACY,IAAI,GAAGH,QAAQ,GAC/BC,SAAS;AACrB;AACA;AACA,OAAO,SAASG,OAAOA,CAACC,CAAC,EAAEH,CAAC,EAAEI,CAAC,EAAEC,CAAC,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9C;EACA,OAAQZ,cAAc,CAACS,CAAC,CAAC,GAAGX,uBAAuB,CAACW,CAAC,EAAEH,CAAC,EAAEI,CAAC,EAAEC,CAAC,EAAEC,OAAO,CAAC,GACpEb,WAAW,CAACU,CAAC,CAAC,GAAGb,SAAS,CAACC,oBAAoB,CAACY,CAAC,EAAEH,CAAC,EAAEI,CAAC,EAAEC,CAAC,EAAEC,OAAO,CAAC,CAAC,GACjEhB,SAAS,CAACK,cAAc,CAACQ,CAAC,EAAEH,CAAC,EAAEI,CAAC,EAAEC,CAAC,CAAC,EAAEC,OAAO,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}