{"ast":null,"code":"class MarketDataService {\n  constructor() {\n    // Using Alpha Vantage API (free tier available)\n    this.apiKey = 'demo'; // Replace with your Alpha Vantage API key\n    this.baseUrl = 'https://www.alphavantage.co/query';\n\n    // To get real-time data, sign up at: https://www.alphavantage.co/support/#api-key\n    // Free tier: 25 API calls per day\n    // Paid plans: 500+ calls per minute\n  }\n\n  // Get real-time quote for a single symbol\n  async getQuote(symbol) {\n    try {\n      const response = await fetch(`${this.baseUrl}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      if (data['Global Quote']) {\n        const quote = data['Global Quote'];\n        return {\n          symbol: quote['01. symbol'],\n          price: parseFloat(quote['05. price']),\n          change: parseFloat(quote['09. change']),\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')),\n          volume: parseInt(quote['06. volume']),\n          high: parseFloat(quote['03. high']),\n          low: parseFloat(quote['04. low']),\n          open: parseFloat(quote['02. open']),\n          previousClose: parseFloat(quote['08. previous close']),\n          timestamp: Date.now(),\n          currency: 'USD',\n          exchange: 'US',\n          shortName: symbol,\n          longName: symbol\n        };\n      }\n      throw new Error('No quote data available');\n    } catch (error) {\n      console.error(`Error fetching quote for ${symbol}:`, error);\n      // Return stable mock data for demo purposes\n      const mockPrices = {\n        'AAPL': {\n          price: 199.30,\n          change: -4.26,\n          changePercent: -2.09\n        },\n        'MSFT': {\n          price: 533.50,\n          change: 20.26,\n          changePercent: 3.95\n        },\n        'GOOGL': {\n          price: 190.73,\n          change: -0.62,\n          changePercent: -0.32\n        },\n        'AMZN': {\n          price: 176.96,\n          change: 4.94,\n          changePercent: 2.87\n        },\n        'TSLA': {\n          price: 151.03,\n          change: 0.24,\n          changePercent: 0.16\n        },\n        'SPY': {\n          price: 485.20,\n          change: 2.15,\n          changePercent: 0.44\n        },\n        'SPXL': {\n          price: 12.45,\n          change: 0.18,\n          changePercent: 1.47\n        },\n        'SPXS': {\n          price: 8.92,\n          change: -0.12,\n          changePercent: -1.33\n        }\n      };\n      const mockData = mockPrices[symbol] || {\n        price: 150.00,\n        change: 0.50,\n        changePercent: 0.33\n      };\n      return {\n        symbol: symbol,\n        price: mockData.price,\n        change: mockData.change,\n        changePercent: mockData.changePercent,\n        volume: 2500000,\n        high: mockData.price + 2,\n        low: mockData.price - 2,\n        open: mockData.price - 0.5,\n        previousClose: mockData.price - mockData.change,\n        timestamp: Date.now(),\n        currency: 'USD',\n        exchange: 'US',\n        shortName: symbol,\n        longName: symbol\n      };\n    }\n  }\n\n  // Get quotes for multiple symbols\n  async getQuotes(symbols) {\n    try {\n      const quotes = await Promise.all(symbols.map(symbol => this.getQuote(symbol)));\n      return quotes;\n    } catch (error) {\n      console.error('Error fetching quotes:', error);\n      throw error;\n    }\n  }\n\n  // Get historical data for a symbol\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\n    try {\n      const response = await fetch(`${this.baseUrl}?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      if (data['Time Series (Daily)']) {\n        const timeSeries = data['Time Series (Daily)'];\n        const dates = Object.keys(timeSeries).slice(0, 30); // Last 30 days\n\n        return dates.map(date => {\n          const dayData = timeSeries[date];\n          return {\n            date: new Date(date),\n            open: parseFloat(dayData['1. open']),\n            high: parseFloat(dayData['2. high']),\n            low: parseFloat(dayData['3. low']),\n            close: parseFloat(dayData['4. close']),\n            volume: parseInt(dayData['5. volume'])\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(`Error fetching historical data for ${symbol}:`, error);\n      // Return stable mock data for demo purposes\n      const mockData = [];\n      const basePrice = 150;\n      for (let i = 30; i > 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dayVariation = Math.sin(i * 0.2) * 5; // Smooth sine wave variation\n        const close = basePrice + dayVariation;\n        mockData.push({\n          date: date,\n          open: close - 1,\n          high: close + 2,\n          low: close - 2,\n          close: close,\n          volume: 2500000\n        });\n      }\n      return mockData;\n    }\n  }\n\n  // Get options chain for a symbol\n  async getOptionsChain(symbol) {\n    try {\n      // Alpha Vantage doesn't provide options data in the free tier\n      // This is a placeholder - you'd need a paid plan for options data\n      throw new Error('Options data requires a paid Alpha Vantage plan');\n    } catch (error) {\n      console.error(`Error fetching options chain for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Search for symbols\n  async searchSymbols(query) {\n    try {\n      console.log('Searching for:', query);\n      const response = await fetch(`${this.baseUrl}?function=SYMBOL_SEARCH&keywords=${query}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      console.log('API response:', data);\n      if (data.bestMatches) {\n        const results = data.bestMatches.map(item => ({\n          symbol: item['1. symbol'],\n          name: item['2. name'],\n          exchange: item['4. region'],\n          type: item['3. type']\n        }));\n        console.log('Processed results:', results);\n        return results;\n      }\n\n      // If API fails or returns no results, return mock data for testing\n      console.log('No API results, returning mock data');\n      const mockResults = [{\n        symbol: 'SPY',\n        name: 'SPDR S&P 500 ETF Trust',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXL',\n        name: 'Direxion Daily S&P 500 Bull 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXS',\n        name: 'Direxion Daily S&P 500 Bear 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }];\n      return mockResults;\n    } catch (error) {\n      console.error('Error searching symbols:', error);\n      // Return mock data for testing\n      const mockResults = [{\n        symbol: 'SPY',\n        name: 'SPDR S&P 500 ETF Trust',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXL',\n        name: 'Direxion Daily S&P 500 Bull 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXS',\n        name: 'Direxion Daily S&P 500 Bear 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }];\n      return mockResults;\n    }\n  }\n\n  // Get market summary (major indices)\n  async getMarketSummary() {\n    // Use major stock symbols for market overview\n    const majorStocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\n    try {\n      const quotes = await this.getQuotes(majorStocks);\n      return quotes.map(quote => ({\n        symbol: quote.symbol,\n        name: this.getStockName(quote.symbol),\n        price: quote.price,\n        change: quote.change,\n        changePercent: quote.changePercent,\n        volume: quote.volume\n      }));\n    } catch (error) {\n      console.error('Error fetching market summary:', error);\n      throw error;\n    }\n  }\n  getStockName(symbol) {\n    const names = {\n      'AAPL': 'Apple Inc.',\n      'MSFT': 'Microsoft Corporation',\n      'GOOGL': 'Alphabet Inc.',\n      'AMZN': 'Amazon.com Inc.',\n      'TSLA': 'Tesla Inc.'\n    };\n    return names[symbol] || symbol;\n  }\n}\nexport default new MarketDataService();","map":{"version":3,"names":["MarketDataService","constructor","apiKey","baseUrl","getQuote","symbol","response","fetch","data","json","quote","price","parseFloat","change","changePercent","replace","volume","parseInt","high","low","open","previousClose","timestamp","Date","now","currency","exchange","shortName","longName","Error","error","console","mockPrices","mockData","getQuotes","symbols","quotes","Promise","all","map","getHistoricalData","period","interval","timeSeries","dates","Object","keys","slice","date","dayData","close","basePrice","i","setDate","getDate","dayVariation","Math","sin","push","getOptionsChain","searchSymbols","query","log","bestMatches","results","item","name","type","mockResults","getMarketSummary","majorStocks","getStockName","names"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/services/marketDataService.js"],"sourcesContent":["class MarketDataService {\r\n  constructor() {\r\n    // Using Alpha Vantage API (free tier available)\r\n    this.apiKey = 'demo'; // Replace with your Alpha Vantage API key\r\n    this.baseUrl = 'https://www.alphavantage.co/query';\r\n    \r\n    // To get real-time data, sign up at: https://www.alphavantage.co/support/#api-key\r\n    // Free tier: 25 API calls per day\r\n    // Paid plans: 500+ calls per minute\r\n  }\r\n\r\n  // Get real-time quote for a single symbol\r\n  async getQuote(symbol) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      \r\n      if (data['Global Quote']) {\r\n        const quote = data['Global Quote'];\r\n        return {\r\n          symbol: quote['01. symbol'],\r\n          price: parseFloat(quote['05. price']),\r\n          change: parseFloat(quote['09. change']),\r\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')),\r\n          volume: parseInt(quote['06. volume']),\r\n          high: parseFloat(quote['03. high']),\r\n          low: parseFloat(quote['04. low']),\r\n          open: parseFloat(quote['02. open']),\r\n          previousClose: parseFloat(quote['08. previous close']),\r\n          timestamp: Date.now(),\r\n          currency: 'USD',\r\n          exchange: 'US',\r\n          shortName: symbol,\r\n          longName: symbol\r\n        };\r\n      }\r\n      throw new Error('No quote data available');\r\n    } catch (error) {\r\n      console.error(`Error fetching quote for ${symbol}:`, error);\r\n      // Return stable mock data for demo purposes\r\n      const mockPrices = {\r\n        'AAPL': { price: 199.30, change: -4.26, changePercent: -2.09 },\r\n        'MSFT': { price: 533.50, change: 20.26, changePercent: 3.95 },\r\n        'GOOGL': { price: 190.73, change: -0.62, changePercent: -0.32 },\r\n        'AMZN': { price: 176.96, change: 4.94, changePercent: 2.87 },\r\n        'TSLA': { price: 151.03, change: 0.24, changePercent: 0.16 },\r\n        'SPY': { price: 485.20, change: 2.15, changePercent: 0.44 },\r\n        'SPXL': { price: 12.45, change: 0.18, changePercent: 1.47 },\r\n        'SPXS': { price: 8.92, change: -0.12, changePercent: -1.33 }\r\n      };\r\n      \r\n      const mockData = mockPrices[symbol] || {\r\n        price: 150.00,\r\n        change: 0.50,\r\n        changePercent: 0.33\r\n      };\r\n      \r\n      return {\r\n        symbol: symbol,\r\n        price: mockData.price,\r\n        change: mockData.change,\r\n        changePercent: mockData.changePercent,\r\n        volume: 2500000,\r\n        high: mockData.price + 2,\r\n        low: mockData.price - 2,\r\n        open: mockData.price - 0.5,\r\n        previousClose: mockData.price - mockData.change,\r\n        timestamp: Date.now(),\r\n        currency: 'USD',\r\n        exchange: 'US',\r\n        shortName: symbol,\r\n        longName: symbol\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get quotes for multiple symbols\r\n  async getQuotes(symbols) {\r\n    try {\r\n      const quotes = await Promise.all(\r\n        symbols.map(symbol => this.getQuote(symbol))\r\n      );\r\n      return quotes;\r\n    } catch (error) {\r\n      console.error('Error fetching quotes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get historical data for a symbol\r\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      \r\n      if (data['Time Series (Daily)']) {\r\n        const timeSeries = data['Time Series (Daily)'];\r\n        const dates = Object.keys(timeSeries).slice(0, 30); // Last 30 days\r\n        \r\n        return dates.map(date => {\r\n          const dayData = timeSeries[date];\r\n          return {\r\n            date: new Date(date),\r\n            open: parseFloat(dayData['1. open']),\r\n            high: parseFloat(dayData['2. high']),\r\n            low: parseFloat(dayData['3. low']),\r\n            close: parseFloat(dayData['4. close']),\r\n            volume: parseInt(dayData['5. volume'])\r\n          };\r\n        });\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching historical data for ${symbol}:`, error);\r\n      // Return stable mock data for demo purposes\r\n      const mockData = [];\r\n      const basePrice = 150;\r\n      for (let i = 30; i > 0; i--) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - i);\r\n        const dayVariation = Math.sin(i * 0.2) * 5; // Smooth sine wave variation\r\n        const close = basePrice + dayVariation;\r\n        mockData.push({\r\n          date: date,\r\n          open: close - 1,\r\n          high: close + 2,\r\n          low: close - 2,\r\n          close: close,\r\n          volume: 2500000\r\n        });\r\n      }\r\n      return mockData;\r\n    }\r\n  }\r\n\r\n  // Get options chain for a symbol\r\n  async getOptionsChain(symbol) {\r\n    try {\r\n      // Alpha Vantage doesn't provide options data in the free tier\r\n      // This is a placeholder - you'd need a paid plan for options data\r\n      throw new Error('Options data requires a paid Alpha Vantage plan');\r\n    } catch (error) {\r\n      console.error(`Error fetching options chain for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search for symbols\r\n  async searchSymbols(query) {\r\n    try {\r\n      console.log('Searching for:', query);\r\n      const response = await fetch(`${this.baseUrl}?function=SYMBOL_SEARCH&keywords=${query}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      console.log('API response:', data);\r\n      \r\n      if (data.bestMatches) {\r\n        const results = data.bestMatches.map(item => ({\r\n          symbol: item['1. symbol'],\r\n          name: item['2. name'],\r\n          exchange: item['4. region'],\r\n          type: item['3. type']\r\n        }));\r\n        console.log('Processed results:', results);\r\n        return results;\r\n      }\r\n      \r\n      // If API fails or returns no results, return mock data for testing\r\n      console.log('No API results, returning mock data');\r\n      const mockResults = [\r\n        {\r\n          symbol: 'SPY',\r\n          name: 'SPDR S&P 500 ETF Trust',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXL',\r\n          name: 'Direxion Daily S&P 500 Bull 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXS',\r\n          name: 'Direxion Daily S&P 500 Bear 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        }\r\n      ];\r\n      return mockResults;\r\n    } catch (error) {\r\n      console.error('Error searching symbols:', error);\r\n      // Return mock data for testing\r\n      const mockResults = [\r\n        {\r\n          symbol: 'SPY',\r\n          name: 'SPDR S&P 500 ETF Trust',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXL',\r\n          name: 'Direxion Daily S&P 500 Bull 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXS',\r\n          name: 'Direxion Daily S&P 500 Bear 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        }\r\n      ];\r\n      return mockResults;\r\n    }\r\n  }\r\n\r\n  // Get market summary (major indices)\r\n  async getMarketSummary() {\r\n    // Use major stock symbols for market overview\r\n    const majorStocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\r\n    try {\r\n      const quotes = await this.getQuotes(majorStocks);\r\n      return quotes.map(quote => ({\r\n        symbol: quote.symbol,\r\n        name: this.getStockName(quote.symbol),\r\n        price: quote.price,\r\n        change: quote.change,\r\n        changePercent: quote.changePercent,\r\n        volume: quote.volume\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching market summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getStockName(symbol) {\r\n    const names = {\r\n      'AAPL': 'Apple Inc.',\r\n      'MSFT': 'Microsoft Corporation',\r\n      'GOOGL': 'Alphabet Inc.',\r\n      'AMZN': 'Amazon.com Inc.',\r\n      'TSLA': 'Tesla Inc.'\r\n    };\r\n    return names[symbol] || symbol;\r\n  }\r\n}\r\n\r\nexport default new MarketDataService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}