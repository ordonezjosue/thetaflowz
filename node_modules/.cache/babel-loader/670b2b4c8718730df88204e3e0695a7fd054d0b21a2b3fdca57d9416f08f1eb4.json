{"ast":null,"code":"import { PatternNumber, PatternString, PatternBoolean } from '../patterns/index.mjs';\nimport { Kind } from '../symbols/index.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsTemplateLiteral, IsUnion, IsNumber, IsInteger, IsBigInt, IsString, IsLiteral, IsBoolean } from '../guard/kind.mjs';\n// ------------------------------------------------------------------\n// TemplateLiteralPatternError\n// ------------------------------------------------------------------\nexport class TemplateLiteralPatternError extends TypeBoxError {}\n// ------------------------------------------------------------------\n// TemplateLiteralPattern\n// ------------------------------------------------------------------\nfunction Escape(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n// prettier-ignore\nfunction Visit(schema, acc) {\n  return IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) : IsUnion(schema) ? `(${schema.anyOf.map(schema => Visit(schema, acc)).join('|')})` : IsNumber(schema) ? `${acc}${PatternNumber}` : IsInteger(schema) ? `${acc}${PatternNumber}` : IsBigInt(schema) ? `${acc}${PatternNumber}` : IsString(schema) ? `${acc}${PatternString}` : IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` : IsBoolean(schema) ? `${acc}${PatternBoolean}` : (() => {\n    throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`);\n  })();\n}\nexport function TemplateLiteralPattern(kinds) {\n  return `^${kinds.map(schema => Visit(schema, '')).join('')}\\$`;\n}","map":{"version":3,"names":["PatternNumber","PatternString","PatternBoolean","Kind","TypeBoxError","IsTemplateLiteral","IsUnion","IsNumber","IsInteger","IsBigInt","IsString","IsLiteral","IsBoolean","TemplateLiteralPatternError","Escape","value","replace","Visit","schema","acc","pattern","slice","length","anyOf","map","join","const","toString","TemplateLiteralPattern","kinds"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/template-literal/pattern.mjs"],"sourcesContent":["import { PatternNumber, PatternString, PatternBoolean } from '../patterns/index.mjs';\nimport { Kind } from '../symbols/index.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsTemplateLiteral, IsUnion, IsNumber, IsInteger, IsBigInt, IsString, IsLiteral, IsBoolean } from '../guard/kind.mjs';\n// ------------------------------------------------------------------\n// TemplateLiteralPatternError\n// ------------------------------------------------------------------\nexport class TemplateLiteralPatternError extends TypeBoxError {\n}\n// ------------------------------------------------------------------\n// TemplateLiteralPattern\n// ------------------------------------------------------------------\nfunction Escape(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n// prettier-ignore\nfunction Visit(schema, acc) {\n    return (IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) :\n        IsUnion(schema) ? `(${schema.anyOf.map((schema) => Visit(schema, acc)).join('|')})` :\n            IsNumber(schema) ? `${acc}${PatternNumber}` :\n                IsInteger(schema) ? `${acc}${PatternNumber}` :\n                    IsBigInt(schema) ? `${acc}${PatternNumber}` :\n                        IsString(schema) ? `${acc}${PatternString}` :\n                            IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` :\n                                IsBoolean(schema) ? `${acc}${PatternBoolean}` :\n                                    (() => { throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`); })());\n}\nexport function TemplateLiteralPattern(kinds) {\n    return `^${kinds.map((schema) => Visit(schema, '')).join('')}\\$`;\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,aAAa,EAAEC,cAAc,QAAQ,uBAAuB;AACpF,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,YAAY,QAAQ,oBAAoB;AACjD;AACA;AACA;AACA,SAASC,iBAAiB,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,QAAQ,mBAAmB;AAC7H;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,SAAST,YAAY,CAAC;AAE9D;AACA;AACA;AACA,SAASU,MAAMA,CAACC,KAAK,EAAE;EACnB,OAAOA,KAAK,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;AACvD;AACA;AACA,SAASC,KAAKA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACxB,OAAQd,iBAAiB,CAACa,MAAM,CAAC,GAAGA,MAAM,CAACE,OAAO,CAACC,KAAK,CAAC,CAAC,EAAEH,MAAM,CAACE,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,GAClFhB,OAAO,CAACY,MAAM,CAAC,GAAG,IAAIA,MAAM,CAACK,KAAK,CAACC,GAAG,CAAEN,MAAM,IAAKD,KAAK,CAACC,MAAM,EAAEC,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC,GAAG,GAC/ElB,QAAQ,CAACW,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGnB,aAAa,EAAE,GACvCQ,SAAS,CAACU,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGnB,aAAa,EAAE,GACxCS,QAAQ,CAACS,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGnB,aAAa,EAAE,GACvCU,QAAQ,CAACQ,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGlB,aAAa,EAAE,GACvCU,SAAS,CAACO,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGL,MAAM,CAACI,MAAM,CAACQ,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAC1Df,SAAS,CAACM,MAAM,CAAC,GAAG,GAAGC,GAAG,GAAGjB,cAAc,EAAE,GACzC,CAAC,MAAM;IAAE,MAAM,IAAIW,2BAA2B,CAAC,oBAAoBK,MAAM,CAACf,IAAI,CAAC,GAAG,CAAC;EAAE,CAAC,EAAE,CAAC;AAC7H;AACA,OAAO,SAASyB,sBAAsBA,CAACC,KAAK,EAAE;EAC1C,OAAO,IAAIA,KAAK,CAACL,GAAG,CAAEN,MAAM,IAAKD,KAAK,CAACC,MAAM,EAAE,EAAE,CAAC,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC,IAAI;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}