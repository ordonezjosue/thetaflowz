{"ast":null,"code":"// Co-authored by @gadicc, @PythonCreator27 and @huned.\nimport { Type } from \"@sinclair/typebox\";\nimport { YahooFinanceDate, YahooNumber } from \"../lib/yahooFinanceTypes.js\";\nconst ChartMetaTradingPeriod = Type.Object({\n  timezone: Type.String(),\n  // \"EST\",\n  start: YahooFinanceDate,\n  // new Date(1637355600 * 1000),\n  end: YahooFinanceDate,\n  // new Date(1637370000 * 10000),\n  gmtoffset: YahooNumber // -18000\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartMetaTradingPeriod\"\n});\nconst ChartMetaTradingPeriods = Type.Object({\n  pre: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod))),\n  post: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod))),\n  regular: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod)))\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartMetaTradingPeriods\"\n});\nconst ChartResultArrayQuote = Type.Object({\n  date: YahooFinanceDate,\n  high: Type.Union([YahooNumber, Type.Null()]),\n  low: Type.Union([YahooNumber, Type.Null()]),\n  open: Type.Union([YahooNumber, Type.Null()]),\n  close: Type.Union([YahooNumber, Type.Null()]),\n  volume: Type.Union([YahooNumber, Type.Null()]),\n  adjclose: Type.Optional(Type.Union([YahooNumber, Type.Null()]))\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartResultArrayQuote\"\n});\nconst ChartEventDividend = Type.Object({\n  amount: YahooNumber,\n  date: YahooFinanceDate\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartEventDividend\"\n});\nconst ChartEventDividends = Type.Object({}, {\n  additionalProperties: ChartEventDividend,\n  title: \"ChartEventDividends\"\n});\nconst ChartEventSplit = Type.Object({\n  date: YahooFinanceDate,\n  // new Date(1598880600 * 1000)\n  numerator: YahooNumber,\n  // 4\n  denominator: YahooNumber,\n  // 1\n  splitRatio: Type.String() // \"4:1\"\n}, {\n  additionalProperties: Type.Any()\n});\nconst ChartEventsArray = Type.Object({\n  dividends: Type.Optional(Type.Array(ChartEventDividend)),\n  splits: Type.Optional(Type.Array(ChartEventSplit))\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartEventsArray\"\n});\nconst ChartMeta = Type.Object({\n  currency: Type.String(),\n  // \"USD\"\n  symbol: Type.String(),\n  // \"AAPL\",\n  exchangeName: Type.String(),\n  // \"NMS\",\n  instrumentType: Type.String(),\n  // \"EQUITY\",\n  firstTradeDate: Type.Union([YahooFinanceDate, Type.Null()]),\n  // new Date(345479400 * 1000); null in e.g. \"APS.AX\"\n  regularMarketTime: YahooFinanceDate,\n  // new Date(1637355602 * 1000),\n  gmtoffset: YahooNumber,\n  // -18000,\n  timezone: Type.String(),\n  /// \"EST\",\n  exchangeTimezoneName: Type.String(),\n  // \"America/New_York\",\n  regularMarketPrice: YahooNumber,\n  // 160.55,\n  chartPreviousClose: Type.Optional(YahooNumber),\n  // 79.75; missing in e.g. \"APS.AX\"\n  previousClose: Type.Optional(YahooNumber),\n  // 1137.06\n  scale: Type.Optional(YahooNumber),\n  // 3,\n  priceHint: YahooNumber,\n  // 2,\n  currentTradingPeriod: Type.Object({\n    pre: ChartMetaTradingPeriod,\n    regular: ChartMetaTradingPeriod,\n    post: ChartMetaTradingPeriod\n  }, {\n    additionalProperties: Type.Any()\n  }),\n  tradingPeriods: Type.Optional(\n  // TODO, would be great to use correct type as a generic based on\n  // `includePrePost` and `interval`, see #812.\n  Type.Union([ChartMetaTradingPeriods, Type.Array(Type.Array(ChartMetaTradingPeriod))])),\n  dataGranularity: Type.String(),\n  // \"1d\",\n  range: Type.String(),\n  // \"\"\n  validRanges: Type.Array(Type.String()) // [\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartMeta\"\n});\nconst ChartResultArraySchema = Type.Object({\n  meta: ChartMeta,\n  events: Type.Optional(ChartEventsArray),\n  quotes: Type.Array(ChartResultArrayQuote)\n}, {\n  title: \"ChartResultArray\"\n});\nconst ChartEventSplits = Type.Object({}, {\n  additionalProperties: ChartEventSplit,\n  title: \"ChartEventSplits\"\n});\nconst ChartIndicatorQuote = Type.Object({\n  high: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n  low: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n  open: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n  close: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n  volume: Type.Array(Type.Union([YahooNumber, Type.Null()]))\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartIndicatorQuote\"\n});\nconst ChartIndicatorAdjclose = Type.Object({\n  adjclose: Type.Optional(Type.Array(Type.Union([YahooNumber, Type.Null()]))) // Missing in e.g. \"APS.AX\"\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartIndicatorAdjClose\"\n});\nconst ChartEventsObject = Type.Object({\n  dividends: Type.Optional(ChartEventDividends),\n  splits: Type.Optional(ChartEventSplits)\n}, {\n  additionalProperties: Type.Any()\n});\nconst ChartIndicatorsObject = Type.Object({\n  quote: Type.Array(ChartIndicatorQuote),\n  adjclose: Type.Optional(Type.Array(ChartIndicatorAdjclose))\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartIndicatorObject\"\n});\nconst ChartResultObjectSchema = Type.Object({\n  meta: ChartMeta,\n  timestamp: Type.Optional(Type.Array(YahooNumber)),\n  events: Type.Optional(ChartEventsObject),\n  indicators: ChartIndicatorsObject\n}, {\n  additionalProperties: Type.Any(),\n  title: \"ChartResultObject\"\n});\nexport const ChartOptionsSchema = Type.Object({\n  period1: Type.Union([Type.Date(), Type.String(), YahooNumber]),\n  period2: Type.Optional(Type.Union([Type.Date(), Type.String(), YahooNumber])),\n  useYfid: Type.Optional(Type.Boolean()),\n  // true\n  interval: Type.Optional(Type.Union([Type.Literal(\"1m\"), Type.Literal(\"2m\"), Type.Literal(\"5m\"), Type.Literal(\"15m\"), Type.Literal(\"30m\"), Type.Literal(\"60m\"), Type.Literal(\"90m\"), Type.Literal(\"1h\"), Type.Literal(\"1d\"), Type.Literal(\"5d\"), Type.Literal(\"1wk\"), Type.Literal(\"1mo\"), Type.Literal(\"3mo\")])),\n  includePrePost: Type.Optional(Type.Boolean()),\n  // true\n  events: Type.Optional(Type.String()),\n  // 'history',\n  lang: Type.Optional(Type.String()),\n  // \"en-US\"\n  return: Type.Optional(Type.Union([Type.Literal(\"array\"), Type.Literal(\"object\")]))\n}, {\n  title: \"ChartOptions\"\n});\nconst ChartOptionsWithReturnArraySchema = Type.Composite([ChartOptionsSchema, Type.Object({\n  return: Type.Optional(Type.Literal(\"array\"))\n})], {\n  title: \"ChartOptionsWithReturnArray\"\n});\nconst ChartOptionsWithReturnObjectSchema = Type.Composite([ChartOptionsSchema, Type.Object({\n  return: Type.Literal(\"object\")\n})], {\n  title: \"ChartOptionsWithReturnObject\"\n});\nconst queryOptionsDefaults = {\n  useYfid: true,\n  interval: \"1d\",\n  includePrePost: true,\n  events: \"div|split|earn\",\n  lang: \"en-US\",\n  return: \"array\"\n};\n/* --- array input, typed output, honor \"return\" param --- */\n// TODO: make this a deprecration passthrough\nexport const _chart = chart;\nexport default async function chart(symbol, queryOptionsOverrides, moduleOptions) {\n  var _a, _b, _c;\n  const returnAs = (queryOptionsOverrides === null || queryOptionsOverrides === void 0 ? void 0 : queryOptionsOverrides.return) || \"array\";\n  const result = await this._moduleExec({\n    moduleName: \"chart\",\n    query: {\n      assertSymbol: symbol,\n      url: \"https://${YF_QUERY_HOST}/v8/finance/chart/\" + symbol,\n      schema: ChartOptionsSchema,\n      defaults: queryOptionsDefaults,\n      overrides: queryOptionsOverrides,\n      transformWith(queryOptions) {\n        if (!queryOptions.period2) queryOptions.period2 = new Date();\n        const dates = [\"period1\", \"period2\"];\n        for (const fieldName of dates) {\n          const value = queryOptions[fieldName];\n          if (value instanceof Date) {\n            queryOptions[fieldName] = Math.floor(value.getTime() / 1000);\n          } else if (typeof value === \"string\") {\n            const timestamp = new Date(value).getTime();\n            if (isNaN(timestamp)) throw new Error(\"yahooFinance.chart() option '\" + fieldName + \"' invalid date provided: '\" + value + \"'\");\n            queryOptions[fieldName] = Math.floor(timestamp / 1000);\n          }\n        }\n        if (queryOptions.period1 === queryOptions.period2) {\n          throw new Error(\"yahooFinance.chart() options `period1` and `period2` \" + \"cannot share the same value.\");\n        }\n        // Don't pass this on to Yahoo\n        delete queryOptions.return;\n        return queryOptions;\n      }\n    },\n    result: {\n      schema: ChartResultObjectSchema,\n      transformWith(result) {\n        if (!result.chart) throw new Error(\"Unexpected result: \" + JSON.stringify(result));\n        const chart = result.chart.result[0];\n        // If there are no quotes, chart.timestamp will be empty, but Yahoo also\n        // gives us chart.indicators.quotes = [{}].  Let's clean that up and\n        // deliver an empty array rather than an invalid ChartIndicatorQuote/\n        if (!chart.timestamp) {\n          if (chart.indicators.quote.length !== 1) throw new Error(\"No timestamp with quotes.length !== 1, please report with your query\");\n          if (Object.keys(chart.indicators.quote[0]).length !== 0)\n            // i.e. {}\n            throw new Error(\"No timestamp with unexpected quote, please report with your query\" + JSON.stringify(chart.indicators.quote[0]));\n          chart.indicators.quote.pop();\n        }\n        return chart;\n      }\n    },\n    moduleOptions\n  });\n  if (returnAs === \"object\") {\n    return result;\n  } else if (returnAs === \"array\") {\n    const timestamp = result.timestamp;\n    /*\n    seems as though yahoo inserts extra quotes at the event times, so no need.\n    if (result.events) {\n      for (let event of [\"dividends\", \"splits\"]) {\n        // @ts-ignore\n        if (result.events[event])\n          // @ts-ignore\n          timestamp = timestamp.filter((ts) => !result.events[event][ts]);\n      }\n    }\n    */\n    // istanbul ignore next\n    if (timestamp && ((_a = result === null || result === void 0 ? void 0 : result.indicators) === null || _a === void 0 ? void 0 : _a.quote) && result.indicators.quote[0].high.length !== timestamp.length) {\n      console.log({\n        origTimestampSize: result.timestamp && result.timestamp.length,\n        filteredSize: timestamp.length,\n        quoteSize: result.indicators.quote[0].high.length\n      });\n      throw new Error(\"Timestamp count mismatch, please report this with the query you used\");\n    }\n    const result2 = {\n      meta: result.meta,\n      quotes: timestamp ? new Array(timestamp.length) : []\n    };\n    const adjclose = (_c = (_b = result === null || result === void 0 ? void 0 : result.indicators) === null || _b === void 0 ? void 0 : _b.adjclose) === null || _c === void 0 ? void 0 : _c[0].adjclose;\n    if (timestamp) for (let i = 0; i < timestamp.length; i++) {\n      result2.quotes[i] = {\n        date: new Date(timestamp[i] * 1000),\n        high: result.indicators.quote[0].high[i],\n        volume: result.indicators.quote[0].volume[i],\n        open: result.indicators.quote[0].open[i],\n        low: result.indicators.quote[0].low[i],\n        close: result.indicators.quote[0].close[i]\n      };\n      if (adjclose) result2.quotes[i].adjclose = adjclose[i];\n    }\n    if (result.events) {\n      result2.events = {};\n      for (const event of [\"dividends\", \"splits\"]) {\n        // @ts-expect-error (eatkinson): Fix up type in follow up\n        if (result.events[event])\n          // @ts-expect-error (eatkinson): Fix up type in follow up\n          result2.events[event] = Object.values(result.events[event]);\n      }\n    }\n    return result2;\n  }\n  // TypeScript runtime validation ensures no other values for\n  // \"returnAs\" are possible.\n}","map":{"version":3,"names":["Type","YahooFinanceDate","YahooNumber","ChartMetaTradingPeriod","Object","timezone","String","start","end","gmtoffset","additionalProperties","Any","title","ChartMetaTradingPeriods","pre","Optional","Array","post","regular","ChartResultArrayQuote","date","high","Union","Null","low","open","close","volume","adjclose","ChartEventDividend","amount","ChartEventDividends","ChartEventSplit","numerator","denominator","splitRatio","ChartEventsArray","dividends","splits","ChartMeta","currency","symbol","exchangeName","instrumentType","firstTradeDate","regularMarketTime","exchangeTimezoneName","regularMarketPrice","chartPreviousClose","previousClose","scale","priceHint","currentTradingPeriod","tradingPeriods","dataGranularity","range","validRanges","ChartResultArraySchema","meta","events","quotes","ChartEventSplits","ChartIndicatorQuote","ChartIndicatorAdjclose","ChartEventsObject","ChartIndicatorsObject","quote","ChartResultObjectSchema","timestamp","indicators","ChartOptionsSchema","period1","Date","period2","useYfid","Boolean","interval","Literal","includePrePost","lang","return","ChartOptionsWithReturnArraySchema","Composite","ChartOptionsWithReturnObjectSchema","queryOptionsDefaults","_chart","chart","queryOptionsOverrides","moduleOptions","_a","_b","_c","returnAs","result","_moduleExec","moduleName","query","assertSymbol","url","schema","defaults","overrides","transformWith","queryOptions","dates","fieldName","value","Math","floor","getTime","isNaN","Error","JSON","stringify","length","keys","pop","console","log","origTimestampSize","filteredSize","quoteSize","result2","i","event","values"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/modules/chart.js"],"sourcesContent":["// Co-authored by @gadicc, @PythonCreator27 and @huned.\nimport { Type } from \"@sinclair/typebox\";\nimport { YahooFinanceDate, YahooNumber } from \"../lib/yahooFinanceTypes.js\";\nconst ChartMetaTradingPeriod = Type.Object({\n    timezone: Type.String(), // \"EST\",\n    start: YahooFinanceDate, // new Date(1637355600 * 1000),\n    end: YahooFinanceDate, // new Date(1637370000 * 10000),\n    gmtoffset: YahooNumber, // -18000\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartMetaTradingPeriod\",\n});\nconst ChartMetaTradingPeriods = Type.Object({\n    pre: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod))),\n    post: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod))),\n    regular: Type.Optional(Type.Array(Type.Array(ChartMetaTradingPeriod))),\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartMetaTradingPeriods\",\n});\nconst ChartResultArrayQuote = Type.Object({\n    date: YahooFinanceDate,\n    high: Type.Union([YahooNumber, Type.Null()]),\n    low: Type.Union([YahooNumber, Type.Null()]),\n    open: Type.Union([YahooNumber, Type.Null()]),\n    close: Type.Union([YahooNumber, Type.Null()]),\n    volume: Type.Union([YahooNumber, Type.Null()]),\n    adjclose: Type.Optional(Type.Union([YahooNumber, Type.Null()])),\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartResultArrayQuote\",\n});\nconst ChartEventDividend = Type.Object({\n    amount: YahooNumber,\n    date: YahooFinanceDate,\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartEventDividend\",\n});\nconst ChartEventDividends = Type.Object({}, {\n    additionalProperties: ChartEventDividend,\n    title: \"ChartEventDividends\",\n});\nconst ChartEventSplit = Type.Object({\n    date: YahooFinanceDate, // new Date(1598880600 * 1000)\n    numerator: YahooNumber, // 4\n    denominator: YahooNumber, // 1\n    splitRatio: Type.String(), // \"4:1\"\n}, {\n    additionalProperties: Type.Any(),\n});\nconst ChartEventsArray = Type.Object({\n    dividends: Type.Optional(Type.Array(ChartEventDividend)),\n    splits: Type.Optional(Type.Array(ChartEventSplit)),\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartEventsArray\",\n});\nconst ChartMeta = Type.Object({\n    currency: Type.String(), // \"USD\"\n    symbol: Type.String(), // \"AAPL\",\n    exchangeName: Type.String(), // \"NMS\",\n    instrumentType: Type.String(), // \"EQUITY\",\n    firstTradeDate: Type.Union([YahooFinanceDate, Type.Null()]), // new Date(345479400 * 1000); null in e.g. \"APS.AX\"\n    regularMarketTime: YahooFinanceDate, // new Date(1637355602 * 1000),\n    gmtoffset: YahooNumber, // -18000,\n    timezone: Type.String(), /// \"EST\",\n    exchangeTimezoneName: Type.String(), // \"America/New_York\",\n    regularMarketPrice: YahooNumber, // 160.55,\n    chartPreviousClose: Type.Optional(YahooNumber), // 79.75; missing in e.g. \"APS.AX\"\n    previousClose: Type.Optional(YahooNumber), // 1137.06\n    scale: Type.Optional(YahooNumber), // 3,\n    priceHint: YahooNumber, // 2,\n    currentTradingPeriod: Type.Object({\n        pre: ChartMetaTradingPeriod,\n        regular: ChartMetaTradingPeriod,\n        post: ChartMetaTradingPeriod,\n    }, {\n        additionalProperties: Type.Any(),\n    }),\n    tradingPeriods: Type.Optional(\n    // TODO, would be great to use correct type as a generic based on\n    // `includePrePost` and `interval`, see #812.\n    Type.Union([\n        ChartMetaTradingPeriods,\n        Type.Array(Type.Array(ChartMetaTradingPeriod)),\n    ])),\n    dataGranularity: Type.String(), // \"1d\",\n    range: Type.String(), // \"\"\n    validRanges: Type.Array(Type.String()), // [\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartMeta\",\n});\nconst ChartResultArraySchema = Type.Object({\n    meta: ChartMeta,\n    events: Type.Optional(ChartEventsArray),\n    quotes: Type.Array(ChartResultArrayQuote),\n}, { title: \"ChartResultArray\" });\nconst ChartEventSplits = Type.Object({}, {\n    additionalProperties: ChartEventSplit,\n    title: \"ChartEventSplits\",\n});\nconst ChartIndicatorQuote = Type.Object({\n    high: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n    low: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n    open: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n    close: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n    volume: Type.Array(Type.Union([YahooNumber, Type.Null()])),\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartIndicatorQuote\",\n});\nconst ChartIndicatorAdjclose = Type.Object({\n    adjclose: Type.Optional(Type.Array(Type.Union([YahooNumber, Type.Null()]))), // Missing in e.g. \"APS.AX\"\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartIndicatorAdjClose\",\n});\nconst ChartEventsObject = Type.Object({\n    dividends: Type.Optional(ChartEventDividends),\n    splits: Type.Optional(ChartEventSplits),\n}, {\n    additionalProperties: Type.Any(),\n});\nconst ChartIndicatorsObject = Type.Object({\n    quote: Type.Array(ChartIndicatorQuote),\n    adjclose: Type.Optional(Type.Array(ChartIndicatorAdjclose)),\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartIndicatorObject\",\n});\nconst ChartResultObjectSchema = Type.Object({\n    meta: ChartMeta,\n    timestamp: Type.Optional(Type.Array(YahooNumber)),\n    events: Type.Optional(ChartEventsObject),\n    indicators: ChartIndicatorsObject,\n}, {\n    additionalProperties: Type.Any(),\n    title: \"ChartResultObject\",\n});\nexport const ChartOptionsSchema = Type.Object({\n    period1: Type.Union([Type.Date(), Type.String(), YahooNumber]),\n    period2: Type.Optional(Type.Union([Type.Date(), Type.String(), YahooNumber])),\n    useYfid: Type.Optional(Type.Boolean()), // true\n    interval: Type.Optional(Type.Union([\n        Type.Literal(\"1m\"),\n        Type.Literal(\"2m\"),\n        Type.Literal(\"5m\"),\n        Type.Literal(\"15m\"),\n        Type.Literal(\"30m\"),\n        Type.Literal(\"60m\"),\n        Type.Literal(\"90m\"),\n        Type.Literal(\"1h\"),\n        Type.Literal(\"1d\"),\n        Type.Literal(\"5d\"),\n        Type.Literal(\"1wk\"),\n        Type.Literal(\"1mo\"),\n        Type.Literal(\"3mo\"),\n    ])),\n    includePrePost: Type.Optional(Type.Boolean()), // true\n    events: Type.Optional(Type.String()), // 'history',\n    lang: Type.Optional(Type.String()), // \"en-US\"\n    return: Type.Optional(Type.Union([Type.Literal(\"array\"), Type.Literal(\"object\")])),\n}, {\n    title: \"ChartOptions\",\n});\nconst ChartOptionsWithReturnArraySchema = Type.Composite([\n    ChartOptionsSchema,\n    Type.Object({\n        return: Type.Optional(Type.Literal(\"array\")),\n    }),\n], {\n    title: \"ChartOptionsWithReturnArray\",\n});\nconst ChartOptionsWithReturnObjectSchema = Type.Composite([\n    ChartOptionsSchema,\n    Type.Object({\n        return: Type.Literal(\"object\"),\n    }),\n], {\n    title: \"ChartOptionsWithReturnObject\",\n});\nconst queryOptionsDefaults = {\n    useYfid: true,\n    interval: \"1d\",\n    includePrePost: true,\n    events: \"div|split|earn\",\n    lang: \"en-US\",\n    return: \"array\",\n};\n/* --- array input, typed output, honor \"return\" param --- */\n// TODO: make this a deprecration passthrough\nexport const _chart = chart;\nexport default async function chart(symbol, queryOptionsOverrides, moduleOptions) {\n    var _a, _b, _c;\n    const returnAs = (queryOptionsOverrides === null || queryOptionsOverrides === void 0 ? void 0 : queryOptionsOverrides.return) || \"array\";\n    const result = (await this._moduleExec({\n        moduleName: \"chart\",\n        query: {\n            assertSymbol: symbol,\n            url: \"https://${YF_QUERY_HOST}/v8/finance/chart/\" + symbol,\n            schema: ChartOptionsSchema,\n            defaults: queryOptionsDefaults,\n            overrides: queryOptionsOverrides,\n            transformWith(queryOptions) {\n                if (!queryOptions.period2)\n                    queryOptions.period2 = new Date();\n                const dates = [\"period1\", \"period2\"];\n                for (const fieldName of dates) {\n                    const value = queryOptions[fieldName];\n                    if (value instanceof Date) {\n                        queryOptions[fieldName] = Math.floor(value.getTime() / 1000);\n                    }\n                    else if (typeof value === \"string\") {\n                        const timestamp = new Date(value).getTime();\n                        if (isNaN(timestamp))\n                            throw new Error(\"yahooFinance.chart() option '\" +\n                                fieldName +\n                                \"' invalid date provided: '\" +\n                                value +\n                                \"'\");\n                        queryOptions[fieldName] = Math.floor(timestamp / 1000);\n                    }\n                }\n                if (queryOptions.period1 === queryOptions.period2) {\n                    throw new Error(\"yahooFinance.chart() options `period1` and `period2` \" +\n                        \"cannot share the same value.\");\n                }\n                // Don't pass this on to Yahoo\n                delete queryOptions.return;\n                return queryOptions;\n            },\n        },\n        result: {\n            schema: ChartResultObjectSchema,\n            transformWith(result) {\n                if (!result.chart)\n                    throw new Error(\"Unexpected result: \" + JSON.stringify(result));\n                const chart = result.chart.result[0];\n                // If there are no quotes, chart.timestamp will be empty, but Yahoo also\n                // gives us chart.indicators.quotes = [{}].  Let's clean that up and\n                // deliver an empty array rather than an invalid ChartIndicatorQuote/\n                if (!chart.timestamp) {\n                    if (chart.indicators.quote.length !== 1)\n                        throw new Error(\"No timestamp with quotes.length !== 1, please report with your query\");\n                    if (Object.keys(chart.indicators.quote[0]).length !== 0)\n                        // i.e. {}\n                        throw new Error(\"No timestamp with unexpected quote, please report with your query\" +\n                            JSON.stringify(chart.indicators.quote[0]));\n                    chart.indicators.quote.pop();\n                }\n                return chart;\n            },\n        },\n        moduleOptions,\n    }));\n    if (returnAs === \"object\") {\n        return result;\n    }\n    else if (returnAs === \"array\") {\n        const timestamp = result.timestamp;\n        /*\n        seems as though yahoo inserts extra quotes at the event times, so no need.\n        if (result.events) {\n          for (let event of [\"dividends\", \"splits\"]) {\n            // @ts-ignore\n            if (result.events[event])\n              // @ts-ignore\n              timestamp = timestamp.filter((ts) => !result.events[event][ts]);\n          }\n        }\n        */\n        // istanbul ignore next\n        if (timestamp &&\n            ((_a = result === null || result === void 0 ? void 0 : result.indicators) === null || _a === void 0 ? void 0 : _a.quote) &&\n            result.indicators.quote[0].high.length !== timestamp.length) {\n            console.log({\n                origTimestampSize: result.timestamp && result.timestamp.length,\n                filteredSize: timestamp.length,\n                quoteSize: result.indicators.quote[0].high.length,\n            });\n            throw new Error(\"Timestamp count mismatch, please report this with the query you used\");\n        }\n        const result2 = {\n            meta: result.meta,\n            quotes: timestamp ? new Array(timestamp.length) : [],\n        };\n        const adjclose = (_c = (_b = result === null || result === void 0 ? void 0 : result.indicators) === null || _b === void 0 ? void 0 : _b.adjclose) === null || _c === void 0 ? void 0 : _c[0].adjclose;\n        if (timestamp)\n            for (let i = 0; i < timestamp.length; i++) {\n                result2.quotes[i] = {\n                    date: new Date(timestamp[i] * 1000),\n                    high: result.indicators.quote[0].high[i],\n                    volume: result.indicators.quote[0].volume[i],\n                    open: result.indicators.quote[0].open[i],\n                    low: result.indicators.quote[0].low[i],\n                    close: result.indicators.quote[0].close[i],\n                };\n                if (adjclose)\n                    result2.quotes[i].adjclose = adjclose[i];\n            }\n        if (result.events) {\n            result2.events = {};\n            for (const event of [\"dividends\", \"splits\"]) {\n                // @ts-expect-error (eatkinson): Fix up type in follow up\n                if (result.events[event])\n                    // @ts-expect-error (eatkinson): Fix up type in follow up\n                    result2.events[event] = Object.values(result.events[event]);\n            }\n        }\n        return result2;\n    }\n    // TypeScript runtime validation ensures no other values for\n    // \"returnAs\" are possible.\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}