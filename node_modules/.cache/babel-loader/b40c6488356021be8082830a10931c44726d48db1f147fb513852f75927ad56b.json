{"ast":null,"code":"import { HasTransform, TransformDecode, TransformEncode, TransformDecodeCheckError, TransformEncodeCheckError } from '../transform/index.mjs';\nimport { Mutate as MutateValue } from '../mutate/index.mjs';\nimport { Hash as HashValue } from '../hash/index.mjs';\nimport { Equal as EqualValue } from '../equal/index.mjs';\nimport { Cast as CastValue } from '../cast/index.mjs';\nimport { Clone as CloneValue } from '../clone/index.mjs';\nimport { Convert as ConvertValue } from '../convert/index.mjs';\nimport { Create as CreateValue } from '../create/index.mjs';\nimport { Clean as CleanValue } from '../clean/index.mjs';\nimport { Check as CheckValue } from '../check/index.mjs';\nimport { Default as DefaultValue } from '../default/index.mjs';\nimport { Diff as DiffValue, Patch as PatchValue } from '../delta/index.mjs';\nimport { Errors as ValueErrors } from '../../errors/index.mjs';\n/** Casts a value into a given type. The return value will retain as much information of the original value as possible. */\nexport function Cast(...args) {\n  return CastValue.apply(CastValue, args);\n}\n/** Creates a value from the given type */\nexport function Create(...args) {\n  return CreateValue.apply(CreateValue, args);\n}\n/** Returns true if the value matches the given type */\nexport function Check(...args) {\n  return CheckValue.apply(CheckValue, args);\n}\n/** `[Mutable]` Removes excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first. */\nexport function Clean(...args) {\n  return CleanValue.apply(CleanValue, args);\n}\n/** Converts any type mismatched values to their target type if a reasonable conversion is possible. */\nexport function Convert(...args) {\n  return ConvertValue.apply(ConvertValue, args);\n}\n/** Returns a structural clone of the given value */\nexport function Clone(value) {\n  return CloneValue(value);\n}\n/** Decodes a value or throws if error */\nexport function Decode(...args) {\n  const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];\n  if (!Check(schema, references, value)) throw new TransformDecodeCheckError(schema, value, Errors(schema, references, value).First());\n  return HasTransform(schema, references) ? TransformDecode(schema, references, value) : value;\n}\n/** `[Mutable]` Generates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first. */\nexport function Default(...args) {\n  return DefaultValue.apply(DefaultValue, args);\n}\n/** Encodes a value or throws if error */\nexport function Encode(...args) {\n  const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];\n  const encoded = HasTransform(schema, references) ? TransformEncode(schema, references, value) : value;\n  if (!Check(schema, references, encoded)) throw new TransformEncodeCheckError(schema, encoded, Errors(schema, references, encoded).First());\n  return encoded;\n}\n/** Returns an iterator for each error in this value. */\nexport function Errors(...args) {\n  return ValueErrors.apply(ValueErrors, args);\n}\n/** Returns true if left and right values are structurally equal */\nexport function Equal(left, right) {\n  return EqualValue(left, right);\n}\n/** Returns edits to transform the current value into the next value */\nexport function Diff(current, next) {\n  return DiffValue(current, next);\n}\n/** Returns a FNV1A-64 non cryptographic hash of the given value */\nexport function Hash(value) {\n  return HashValue(value);\n}\n/** Returns a new value with edits applied to the given value */\nexport function Patch(current, edits) {\n  return PatchValue(current, edits);\n}\n/** `[Mutable]` Performs a deep mutable value assignment while retaining internal references. */\nexport function Mutate(current, next) {\n  MutateValue(current, next);\n}","map":{"version":3,"names":["HasTransform","TransformDecode","TransformEncode","TransformDecodeCheckError","TransformEncodeCheckError","Mutate","MutateValue","Hash","HashValue","Equal","EqualValue","Cast","CastValue","Clone","CloneValue","Convert","ConvertValue","Create","CreateValue","Clean","CleanValue","Check","CheckValue","Default","DefaultValue","Diff","DiffValue","Patch","PatchValue","Errors","ValueErrors","args","apply","value","Decode","schema","references","length","First","Encode","encoded","left","right","current","next","edits"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/value/value/value.mjs"],"sourcesContent":["import { HasTransform, TransformDecode, TransformEncode, TransformDecodeCheckError, TransformEncodeCheckError } from '../transform/index.mjs';\nimport { Mutate as MutateValue } from '../mutate/index.mjs';\nimport { Hash as HashValue } from '../hash/index.mjs';\nimport { Equal as EqualValue } from '../equal/index.mjs';\nimport { Cast as CastValue } from '../cast/index.mjs';\nimport { Clone as CloneValue } from '../clone/index.mjs';\nimport { Convert as ConvertValue } from '../convert/index.mjs';\nimport { Create as CreateValue } from '../create/index.mjs';\nimport { Clean as CleanValue } from '../clean/index.mjs';\nimport { Check as CheckValue } from '../check/index.mjs';\nimport { Default as DefaultValue } from '../default/index.mjs';\nimport { Diff as DiffValue, Patch as PatchValue } from '../delta/index.mjs';\nimport { Errors as ValueErrors } from '../../errors/index.mjs';\n/** Casts a value into a given type. The return value will retain as much information of the original value as possible. */\nexport function Cast(...args) {\n    return CastValue.apply(CastValue, args);\n}\n/** Creates a value from the given type */\nexport function Create(...args) {\n    return CreateValue.apply(CreateValue, args);\n}\n/** Returns true if the value matches the given type */\nexport function Check(...args) {\n    return CheckValue.apply(CheckValue, args);\n}\n/** `[Mutable]` Removes excess properties from a value and returns the result. This function does not check the value and returns an unknown type. You should Check the result before use. Clean is a mutable operation. To avoid mutation, Clone the value first. */\nexport function Clean(...args) {\n    return CleanValue.apply(CleanValue, args);\n}\n/** Converts any type mismatched values to their target type if a reasonable conversion is possible. */\nexport function Convert(...args) {\n    return ConvertValue.apply(ConvertValue, args);\n}\n/** Returns a structural clone of the given value */\nexport function Clone(value) {\n    return CloneValue(value);\n}\n/** Decodes a value or throws if error */\nexport function Decode(...args) {\n    const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];\n    if (!Check(schema, references, value))\n        throw new TransformDecodeCheckError(schema, value, Errors(schema, references, value).First());\n    return HasTransform(schema, references) ? TransformDecode(schema, references, value) : value;\n}\n/** `[Mutable]` Generates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first. */\nexport function Default(...args) {\n    return DefaultValue.apply(DefaultValue, args);\n}\n/** Encodes a value or throws if error */\nexport function Encode(...args) {\n    const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];\n    const encoded = HasTransform(schema, references) ? TransformEncode(schema, references, value) : value;\n    if (!Check(schema, references, encoded))\n        throw new TransformEncodeCheckError(schema, encoded, Errors(schema, references, encoded).First());\n    return encoded;\n}\n/** Returns an iterator for each error in this value. */\nexport function Errors(...args) {\n    return ValueErrors.apply(ValueErrors, args);\n}\n/** Returns true if left and right values are structurally equal */\nexport function Equal(left, right) {\n    return EqualValue(left, right);\n}\n/** Returns edits to transform the current value into the next value */\nexport function Diff(current, next) {\n    return DiffValue(current, next);\n}\n/** Returns a FNV1A-64 non cryptographic hash of the given value */\nexport function Hash(value) {\n    return HashValue(value);\n}\n/** Returns a new value with edits applied to the given value */\nexport function Patch(current, edits) {\n    return PatchValue(current, edits);\n}\n/** `[Mutable]` Performs a deep mutable value assignment while retaining internal references. */\nexport function Mutate(current, next) {\n    MutateValue(current, next);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}