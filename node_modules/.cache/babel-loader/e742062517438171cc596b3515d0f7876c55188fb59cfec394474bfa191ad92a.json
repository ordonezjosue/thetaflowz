{"ast":null,"code":"import { Union } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from '../extends/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExtractFromMappedResult } from './extract-from-mapped-result.mjs';\nimport { ExtractFromTemplateLiteral } from './extract-from-template-literal.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsTemplateLiteral, IsUnion } from '../guard/kind.mjs';\nfunction ExtractRest(L, R) {\n  const extracted = L.filter(inner => ExtendsCheck(inner, R) !== ExtendsResult.False);\n  return extracted.length === 1 ? extracted[0] : Union(extracted);\n}\n/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\nexport function Extract(L, R, options = {}) {\n  // overloads\n  if (IsTemplateLiteral(L)) return CloneType(ExtractFromTemplateLiteral(L, R), options);\n  if (IsMappedResult(L)) return CloneType(ExtractFromMappedResult(L, R), options);\n  // prettier-ignore\n  return CloneType(IsUnion(L) ? ExtractRest(L.anyOf, R) : ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);\n}","map":{"version":3,"names":["Union","Never","ExtendsCheck","ExtendsResult","CloneType","ExtractFromMappedResult","ExtractFromTemplateLiteral","IsMappedResult","IsTemplateLiteral","IsUnion","ExtractRest","L","R","extracted","filter","inner","False","length","Extract","options","anyOf"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/extract/extract.mjs"],"sourcesContent":["import { Union } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\nimport { ExtendsCheck, ExtendsResult } from '../extends/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { ExtractFromMappedResult } from './extract-from-mapped-result.mjs';\nimport { ExtractFromTemplateLiteral } from './extract-from-template-literal.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsTemplateLiteral, IsUnion } from '../guard/kind.mjs';\nfunction ExtractRest(L, R) {\n    const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);\n    return extracted.length === 1 ? extracted[0] : Union(extracted);\n}\n/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */\nexport function Extract(L, R, options = {}) {\n    // overloads\n    if (IsTemplateLiteral(L))\n        return CloneType(ExtractFromTemplateLiteral(L, R), options);\n    if (IsMappedResult(L))\n        return CloneType(ExtractFromMappedResult(L, R), options);\n    // prettier-ignore\n    return CloneType(IsUnion(L) ? ExtractRest(L.anyOf, R) :\n        ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,YAAY,EAAEC,aAAa,QAAQ,sBAAsB;AAClE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,uBAAuB,QAAQ,kCAAkC;AAC1E,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF;AACA;AACA;AACA,SAASC,cAAc,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,mBAAmB;AAC9E,SAASC,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACvB,MAAMC,SAAS,GAAGF,CAAC,CAACG,MAAM,CAAEC,KAAK,IAAKb,YAAY,CAACa,KAAK,EAAEH,CAAC,CAAC,KAAKT,aAAa,CAACa,KAAK,CAAC;EACrF,OAAOH,SAAS,CAACI,MAAM,KAAK,CAAC,GAAGJ,SAAS,CAAC,CAAC,CAAC,GAAGb,KAAK,CAACa,SAAS,CAAC;AACnE;AACA;AACA,OAAO,SAASK,OAAOA,CAACP,CAAC,EAAEC,CAAC,EAAEO,OAAO,GAAG,CAAC,CAAC,EAAE;EACxC;EACA,IAAIX,iBAAiB,CAACG,CAAC,CAAC,EACpB,OAAOP,SAAS,CAACE,0BAA0B,CAACK,CAAC,EAAEC,CAAC,CAAC,EAAEO,OAAO,CAAC;EAC/D,IAAIZ,cAAc,CAACI,CAAC,CAAC,EACjB,OAAOP,SAAS,CAACC,uBAAuB,CAACM,CAAC,EAAEC,CAAC,CAAC,EAAEO,OAAO,CAAC;EAC5D;EACA,OAAOf,SAAS,CAACK,OAAO,CAACE,CAAC,CAAC,GAAGD,WAAW,CAACC,CAAC,CAACS,KAAK,EAAER,CAAC,CAAC,GACjDV,YAAY,CAACS,CAAC,EAAEC,CAAC,CAAC,KAAKT,aAAa,CAACa,KAAK,GAAGL,CAAC,GAAGV,KAAK,CAAC,CAAC,EAAEkB,OAAO,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}