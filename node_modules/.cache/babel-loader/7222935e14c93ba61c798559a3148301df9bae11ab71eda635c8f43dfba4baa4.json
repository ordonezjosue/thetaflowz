{"ast":null,"code":"import { TemplateLiteralGenerate } from '../template-literal/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsTemplateLiteral, IsUnion, IsLiteral, IsNumber, IsInteger } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromTemplateLiteral(T) {\n  const R = TemplateLiteralGenerate(T);\n  return R.map(S => S.toString());\n}\n// prettier-ignore\nfunction FromUnion(T) {\n  const Acc = [];\n  for (const L of T) Acc.push(...IndexPropertyKeys(L));\n  return Acc;\n}\n// prettier-ignore\nfunction FromLiteral(T) {\n  return [T.toString()] // TS 5.4 observes TLiteralValue as not having a toString()\n  ;\n}\n/** Returns a tuple of PropertyKeys derived from the given TSchema */\n// prettier-ignore\nexport function IndexPropertyKeys(T) {\n  return [...new Set(IsTemplateLiteral(T) ? FromTemplateLiteral(T) : IsUnion(T) ? FromUnion(T.anyOf) : IsLiteral(T) ? FromLiteral(T.const) : IsNumber(T) ? ['[number]'] : IsInteger(T) ? ['[number]'] : [])];\n}","map":{"version":3,"names":["TemplateLiteralGenerate","IsTemplateLiteral","IsUnion","IsLiteral","IsNumber","IsInteger","FromTemplateLiteral","T","R","map","S","toString","FromUnion","Acc","L","push","IndexPropertyKeys","FromLiteral","Set","anyOf","const"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-property-keys.mjs"],"sourcesContent":["import { TemplateLiteralGenerate } from '../template-literal/index.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsTemplateLiteral, IsUnion, IsLiteral, IsNumber, IsInteger } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromTemplateLiteral(T) {\n    const R = TemplateLiteralGenerate(T);\n    return R.map(S => S.toString());\n}\n// prettier-ignore\nfunction FromUnion(T) {\n    const Acc = [];\n    for (const L of T)\n        Acc.push(...IndexPropertyKeys(L));\n    return Acc;\n}\n// prettier-ignore\nfunction FromLiteral(T) {\n    return ([T.toString()] // TS 5.4 observes TLiteralValue as not having a toString()\n    );\n}\n/** Returns a tuple of PropertyKeys derived from the given TSchema */\n// prettier-ignore\nexport function IndexPropertyKeys(T) {\n    return [...new Set((IsTemplateLiteral(T) ? FromTemplateLiteral(T) :\n            IsUnion(T) ? FromUnion(T.anyOf) :\n                IsLiteral(T) ? FromLiteral(T.const) :\n                    IsNumber(T) ? ['[number]'] :\n                        IsInteger(T) ? ['[number]'] :\n                            []))];\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,+BAA+B;AACvE;AACA;AACA;AACA,SAASC,iBAAiB,EAAEC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,mBAAmB;AAC9F;AACA,SAASC,mBAAmBA,CAACC,CAAC,EAAE;EAC5B,MAAMC,CAAC,GAAGR,uBAAuB,CAACO,CAAC,CAAC;EACpC,OAAOC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;AACnC;AACA;AACA,SAASC,SAASA,CAACL,CAAC,EAAE;EAClB,MAAMM,GAAG,GAAG,EAAE;EACd,KAAK,MAAMC,CAAC,IAAIP,CAAC,EACbM,GAAG,CAACE,IAAI,CAAC,GAAGC,iBAAiB,CAACF,CAAC,CAAC,CAAC;EACrC,OAAOD,GAAG;AACd;AACA;AACA,SAASI,WAAWA,CAACV,CAAC,EAAE;EACpB,OAAQ,CAACA,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;EAAA;AAE3B;AACA;AACA;AACA,OAAO,SAASK,iBAAiBA,CAACT,CAAC,EAAE;EACjC,OAAO,CAAC,GAAG,IAAIW,GAAG,CAAEjB,iBAAiB,CAACM,CAAC,CAAC,GAAGD,mBAAmB,CAACC,CAAC,CAAC,GACzDL,OAAO,CAACK,CAAC,CAAC,GAAGK,SAAS,CAACL,CAAC,CAACY,KAAK,CAAC,GAC3BhB,SAAS,CAACI,CAAC,CAAC,GAAGU,WAAW,CAACV,CAAC,CAACa,KAAK,CAAC,GAC/BhB,QAAQ,CAACG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,GACtBF,SAAS,CAACE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,GACvB,EAAG,CAAC,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}