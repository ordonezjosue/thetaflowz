{"ast":null,"code":"import { CloneType, CloneRest } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { IsUndefined } from '../guard/value.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsConstructor, IsFunction, IsIntersect, IsUnion, IsTuple, IsArray, IsObject, IsPromise, IsAsyncIterator, IsIterator, IsRef } from '../guard/kind.mjs';\nfunction FromRest(schema, references) {\n  return schema.map(schema => Deref(schema, references));\n}\n// prettier-ignore\nfunction FromProperties(properties, references) {\n  const Acc = {};\n  for (const K of globalThis.Object.getOwnPropertyNames(properties)) {\n    Acc[K] = Deref(properties[K], references);\n  }\n  return Acc;\n}\n// prettier-ignore\nfunction FromConstructor(schema, references) {\n  schema.parameters = FromRest(schema.parameters, references);\n  schema.returns = Deref(schema.returns, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromFunction(schema, references) {\n  schema.parameters = FromRest(schema.parameters, references);\n  schema.returns = Deref(schema.returns, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromIntersect(schema, references) {\n  schema.allOf = FromRest(schema.allOf, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromUnion(schema, references) {\n  schema.anyOf = FromRest(schema.anyOf, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromTuple(schema, references) {\n  if (IsUndefined(schema.items)) return schema;\n  schema.items = FromRest(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromArray(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromObject(schema, references) {\n  schema.properties = FromProperties(schema.properties, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromPromise(schema, references) {\n  schema.item = Deref(schema.item, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromAsyncIterator(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromIterator(schema, references) {\n  schema.items = Deref(schema.items, references);\n  return schema;\n}\n// prettier-ignore\nfunction FromRef(schema, references) {\n  const target = references.find(remote => remote.$id === schema.$ref);\n  if (target === undefined) throw Error(`Unable to dereference schema with $id ${schema.$ref}`);\n  const discard = Discard(target, ['$id']);\n  return Deref(discard, references);\n}\n// prettier-ignore\nfunction DerefResolve(schema, references) {\n  return IsConstructor(schema) ? FromConstructor(schema, references) : IsFunction(schema) ? FromFunction(schema, references) : IsIntersect(schema) ? FromIntersect(schema, references) : IsUnion(schema) ? FromUnion(schema, references) : IsTuple(schema) ? FromTuple(schema, references) : IsArray(schema) ? FromArray(schema, references) : IsObject(schema) ? FromObject(schema, references) : IsPromise(schema) ? FromPromise(schema, references) : IsAsyncIterator(schema) ? FromAsyncIterator(schema, references) : IsIterator(schema) ? FromIterator(schema, references) : IsRef(schema) ? FromRef(schema, references) : schema;\n}\n// ------------------------------------------------------------------\n// TDeref\n// ------------------------------------------------------------------\n/** `[Json]` Creates a dereferenced type */\nexport function Deref(schema, references) {\n  return DerefResolve(CloneType(schema), CloneRest(references));\n}","map":{"version":3,"names":["CloneType","CloneRest","Discard","IsUndefined","IsConstructor","IsFunction","IsIntersect","IsUnion","IsTuple","IsArray","IsObject","IsPromise","IsAsyncIterator","IsIterator","IsRef","FromRest","schema","references","map","Deref","FromProperties","properties","Acc","K","globalThis","Object","getOwnPropertyNames","FromConstructor","parameters","returns","FromFunction","FromIntersect","allOf","FromUnion","anyOf","FromTuple","items","FromArray","FromObject","FromPromise","item","FromAsyncIterator","FromIterator","FromRef","target","find","remote","$id","$ref","undefined","Error","discard","DerefResolve"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/deref/deref.mjs"],"sourcesContent":["import { CloneType, CloneRest } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { IsUndefined } from '../guard/value.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsConstructor, IsFunction, IsIntersect, IsUnion, IsTuple, IsArray, IsObject, IsPromise, IsAsyncIterator, IsIterator, IsRef } from '../guard/kind.mjs';\nfunction FromRest(schema, references) {\n    return schema.map((schema) => Deref(schema, references));\n}\n// prettier-ignore\nfunction FromProperties(properties, references) {\n    const Acc = {};\n    for (const K of globalThis.Object.getOwnPropertyNames(properties)) {\n        Acc[K] = Deref(properties[K], references);\n    }\n    return Acc;\n}\n// prettier-ignore\nfunction FromConstructor(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromFunction(schema, references) {\n    schema.parameters = FromRest(schema.parameters, references);\n    schema.returns = Deref(schema.returns, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIntersect(schema, references) {\n    schema.allOf = FromRest(schema.allOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromUnion(schema, references) {\n    schema.anyOf = FromRest(schema.anyOf, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromTuple(schema, references) {\n    if (IsUndefined(schema.items))\n        return schema;\n    schema.items = FromRest(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromArray(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromObject(schema, references) {\n    schema.properties = FromProperties(schema.properties, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromPromise(schema, references) {\n    schema.item = Deref(schema.item, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromAsyncIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromIterator(schema, references) {\n    schema.items = Deref(schema.items, references);\n    return schema;\n}\n// prettier-ignore\nfunction FromRef(schema, references) {\n    const target = references.find(remote => remote.$id === schema.$ref);\n    if (target === undefined)\n        throw Error(`Unable to dereference schema with $id ${schema.$ref}`);\n    const discard = Discard(target, ['$id']);\n    return Deref(discard, references);\n}\n// prettier-ignore\nfunction DerefResolve(schema, references) {\n    return (IsConstructor(schema) ? FromConstructor(schema, references) :\n        IsFunction(schema) ? FromFunction(schema, references) :\n            IsIntersect(schema) ? FromIntersect(schema, references) :\n                IsUnion(schema) ? FromUnion(schema, references) :\n                    IsTuple(schema) ? FromTuple(schema, references) :\n                        IsArray(schema) ? FromArray(schema, references) :\n                            IsObject(schema) ? FromObject(schema, references) :\n                                IsPromise(schema) ? FromPromise(schema, references) :\n                                    IsAsyncIterator(schema) ? FromAsyncIterator(schema, references) :\n                                        IsIterator(schema) ? FromIterator(schema, references) :\n                                            IsRef(schema) ? FromRef(schema, references) :\n                                                schema);\n}\n// ------------------------------------------------------------------\n// TDeref\n// ------------------------------------------------------------------\n/** `[Json]` Creates a dereferenced type */\nexport function Deref(schema, references) {\n    return DerefResolve(CloneType(schema), CloneRest(references));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}