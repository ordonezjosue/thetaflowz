{"ast":null,"code":"import { Any } from '../any/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Date } from '../date/index.mjs';\nimport { Function as FunctionType } from '../function/index.mjs';\nimport { Literal } from '../literal/index.mjs';\nimport { Null } from '../null/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Symbol } from '../symbol/index.mjs';\nimport { Tuple } from '../tuple/index.mjs';\nimport { Readonly } from '../readonly/index.mjs';\nimport { Undefined } from '../undefined/index.mjs';\nimport { Uint8Array } from '../uint8array/index.mjs';\nimport { Unknown } from '../unknown/index.mjs';\nimport { CloneType } from '../clone/index.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsArray, IsNumber, IsBigInt, IsUint8Array, IsDate, IsIterator, IsObject, IsAsyncIterator, IsFunction, IsUndefined, IsNull, IsSymbol, IsBoolean, IsString } from '../guard/value.mjs';\n// prettier-ignore\nfunction FromArray(T) {\n  return T.map(L => FromValue(L, false));\n}\n// prettier-ignore\nfunction FromProperties(value) {\n  const Acc = {};\n  for (const K of globalThis.Object.getOwnPropertyNames(value)) Acc[K] = Readonly(FromValue(value[K], false));\n  return Acc;\n}\nfunction ConditionalReadonly(T, root) {\n  return root === true ? T : Readonly(T);\n}\n// prettier-ignore\nfunction FromValue(value, root) {\n  return IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) : IsIterator(value) ? ConditionalReadonly(Any(), root) : IsArray(value) ? Readonly(Tuple(FromArray(value))) : IsUint8Array(value) ? Uint8Array() : IsDate(value) ? Date() : IsObject(value) ? ConditionalReadonly(Object(FromProperties(value)), root) : IsFunction(value) ? ConditionalReadonly(FunctionType([], Unknown()), root) : IsUndefined(value) ? Undefined() : IsNull(value) ? Null() : IsSymbol(value) ? Symbol() : IsBigInt(value) ? BigInt() : IsNumber(value) ? Literal(value) : IsBoolean(value) ? Literal(value) : IsString(value) ? Literal(value) : Object({});\n}\n/** `[JavaScript]` Creates a readonly const type from the given value. */\nexport function Const(T, options = {}) {\n  return CloneType(FromValue(T, true), options);\n}","map":{"version":3,"names":["Any","BigInt","Date","Function","FunctionType","Literal","Null","Object","Symbol","Tuple","Readonly","Undefined","Uint8Array","Unknown","CloneType","IsArray","IsNumber","IsBigInt","IsUint8Array","IsDate","IsIterator","IsObject","IsAsyncIterator","IsFunction","IsUndefined","IsNull","IsSymbol","IsBoolean","IsString","FromArray","T","map","L","FromValue","FromProperties","value","Acc","K","globalThis","getOwnPropertyNames","ConditionalReadonly","root","Const","options"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/const/const.mjs"],"sourcesContent":["import { Any } from '../any/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Date } from '../date/index.mjs';\nimport { Function as FunctionType } from '../function/index.mjs';\nimport { Literal } from '../literal/index.mjs';\nimport { Null } from '../null/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Symbol } from '../symbol/index.mjs';\nimport { Tuple } from '../tuple/index.mjs';\nimport { Readonly } from '../readonly/index.mjs';\nimport { Undefined } from '../undefined/index.mjs';\nimport { Uint8Array } from '../uint8array/index.mjs';\nimport { Unknown } from '../unknown/index.mjs';\nimport { CloneType } from '../clone/index.mjs';\n// ------------------------------------------------------------------\n// ValueGuard\n// ------------------------------------------------------------------\nimport { IsArray, IsNumber, IsBigInt, IsUint8Array, IsDate, IsIterator, IsObject, IsAsyncIterator, IsFunction, IsUndefined, IsNull, IsSymbol, IsBoolean, IsString } from '../guard/value.mjs';\n// prettier-ignore\nfunction FromArray(T) {\n    return T.map(L => FromValue(L, false));\n}\n// prettier-ignore\nfunction FromProperties(value) {\n    const Acc = {};\n    for (const K of globalThis.Object.getOwnPropertyNames(value))\n        Acc[K] = Readonly(FromValue(value[K], false));\n    return Acc;\n}\nfunction ConditionalReadonly(T, root) {\n    return (root === true ? T : Readonly(T));\n}\n// prettier-ignore\nfunction FromValue(value, root) {\n    return (IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) :\n        IsIterator(value) ? ConditionalReadonly(Any(), root) :\n            IsArray(value) ? Readonly(Tuple(FromArray(value))) :\n                IsUint8Array(value) ? Uint8Array() :\n                    IsDate(value) ? Date() :\n                        IsObject(value) ? ConditionalReadonly(Object(FromProperties(value)), root) :\n                            IsFunction(value) ? ConditionalReadonly(FunctionType([], Unknown()), root) :\n                                IsUndefined(value) ? Undefined() :\n                                    IsNull(value) ? Null() :\n                                        IsSymbol(value) ? Symbol() :\n                                            IsBigInt(value) ? BigInt() :\n                                                IsNumber(value) ? Literal(value) :\n                                                    IsBoolean(value) ? Literal(value) :\n                                                        IsString(value) ? Literal(value) :\n                                                            Object({}));\n}\n/** `[JavaScript]` Creates a readonly const type from the given value. */\nexport function Const(T, options = {}) {\n    return CloneType(FromValue(T, true), options);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}