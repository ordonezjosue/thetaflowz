{"ast":null,"code":"import { IsArray, IsBoolean, IsBigInt, IsDate, IsNull, IsNumber, IsStandardObject, IsString, IsSymbol, IsUint8Array, IsUndefined } from '../guard/index.mjs';\nimport { TypeBoxError } from '../../type/error/index.mjs';\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nexport class ValueHashError extends TypeBoxError {\n  constructor(value) {\n    super(`Unable to hash value`);\n    this.value = value;\n  }\n}\n// ------------------------------------------------------------------\n// ByteMarker\n// ------------------------------------------------------------------\nvar ByteMarker;\n(function (ByteMarker) {\n  ByteMarker[ByteMarker[\"Undefined\"] = 0] = \"Undefined\";\n  ByteMarker[ByteMarker[\"Null\"] = 1] = \"Null\";\n  ByteMarker[ByteMarker[\"Boolean\"] = 2] = \"Boolean\";\n  ByteMarker[ByteMarker[\"Number\"] = 3] = \"Number\";\n  ByteMarker[ByteMarker[\"String\"] = 4] = \"String\";\n  ByteMarker[ByteMarker[\"Object\"] = 5] = \"Object\";\n  ByteMarker[ByteMarker[\"Array\"] = 6] = \"Array\";\n  ByteMarker[ByteMarker[\"Date\"] = 7] = \"Date\";\n  ByteMarker[ByteMarker[\"Uint8Array\"] = 8] = \"Uint8Array\";\n  ByteMarker[ByteMarker[\"Symbol\"] = 9] = \"Symbol\";\n  ByteMarker[ByteMarker[\"BigInt\"] = 10] = \"BigInt\";\n})(ByteMarker || (ByteMarker = {}));\n// ------------------------------------------------------------------\n// State\n// ------------------------------------------------------------------\nlet Accumulator = BigInt('14695981039346656037');\nconst [Prime, Size] = [BigInt('1099511628211'), BigInt('2') ** BigInt('64')];\nconst Bytes = Array.from({\n  length: 256\n}).map((_, i) => BigInt(i));\nconst F64 = new Float64Array(1);\nconst F64In = new DataView(F64.buffer);\nconst F64Out = new Uint8Array(F64.buffer);\n// ------------------------------------------------------------------\n// NumberToBytes\n// ------------------------------------------------------------------\nfunction* NumberToBytes(value) {\n  const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);\n  for (let i = 0; i < byteCount; i++) {\n    yield value >> 8 * (byteCount - 1 - i) & 0xff;\n  }\n}\n// ------------------------------------------------------------------\n// Hashing Functions\n// ------------------------------------------------------------------\nfunction ArrayType(value) {\n  FNV1A64(ByteMarker.Array);\n  for (const item of value) {\n    Visit(item);\n  }\n}\nfunction BooleanType(value) {\n  FNV1A64(ByteMarker.Boolean);\n  FNV1A64(value ? 1 : 0);\n}\nfunction BigIntType(value) {\n  FNV1A64(ByteMarker.BigInt);\n  F64In.setBigInt64(0, value);\n  for (const byte of F64Out) {\n    FNV1A64(byte);\n  }\n}\nfunction DateType(value) {\n  FNV1A64(ByteMarker.Date);\n  Visit(value.getTime());\n}\nfunction NullType(value) {\n  FNV1A64(ByteMarker.Null);\n}\nfunction NumberType(value) {\n  FNV1A64(ByteMarker.Number);\n  F64In.setFloat64(0, value);\n  for (const byte of F64Out) {\n    FNV1A64(byte);\n  }\n}\nfunction ObjectType(value) {\n  FNV1A64(ByteMarker.Object);\n  for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {\n    Visit(key);\n    Visit(value[key]);\n  }\n}\nfunction StringType(value) {\n  FNV1A64(ByteMarker.String);\n  for (let i = 0; i < value.length; i++) {\n    for (const byte of NumberToBytes(value.charCodeAt(i))) {\n      FNV1A64(byte);\n    }\n  }\n}\nfunction SymbolType(value) {\n  FNV1A64(ByteMarker.Symbol);\n  Visit(value.description);\n}\nfunction Uint8ArrayType(value) {\n  FNV1A64(ByteMarker.Uint8Array);\n  for (let i = 0; i < value.length; i++) {\n    FNV1A64(value[i]);\n  }\n}\nfunction UndefinedType(value) {\n  return FNV1A64(ByteMarker.Undefined);\n}\nfunction Visit(value) {\n  if (IsArray(value)) return ArrayType(value);\n  if (IsBoolean(value)) return BooleanType(value);\n  if (IsBigInt(value)) return BigIntType(value);\n  if (IsDate(value)) return DateType(value);\n  if (IsNull(value)) return NullType(value);\n  if (IsNumber(value)) return NumberType(value);\n  if (IsStandardObject(value)) return ObjectType(value);\n  if (IsString(value)) return StringType(value);\n  if (IsSymbol(value)) return SymbolType(value);\n  if (IsUint8Array(value)) return Uint8ArrayType(value);\n  if (IsUndefined(value)) return UndefinedType(value);\n  throw new ValueHashError(value);\n}\nfunction FNV1A64(byte) {\n  Accumulator = Accumulator ^ Bytes[byte];\n  Accumulator = Accumulator * Prime % Size;\n}\n// ------------------------------------------------------------------\n// Hash\n// ------------------------------------------------------------------\n/** Creates a FNV1A-64 non cryptographic hash of the given value */\nexport function Hash(value) {\n  Accumulator = BigInt('14695981039346656037');\n  Visit(value);\n  return Accumulator;\n}","map":{"version":3,"names":["IsArray","IsBoolean","IsBigInt","IsDate","IsNull","IsNumber","IsStandardObject","IsString","IsSymbol","IsUint8Array","IsUndefined","TypeBoxError","ValueHashError","constructor","value","ByteMarker","Accumulator","BigInt","Prime","Size","Bytes","Array","from","length","map","_","i","F64","Float64Array","F64In","DataView","buffer","F64Out","Uint8Array","NumberToBytes","byteCount","Math","ceil","floor","log2","ArrayType","FNV1A64","item","Visit","BooleanType","Boolean","BigIntType","setBigInt64","byte","DateType","Date","getTime","NullType","Null","NumberType","Number","setFloat64","ObjectType","Object","key","globalThis","getOwnPropertyNames","sort","StringType","String","charCodeAt","SymbolType","Symbol","description","Uint8ArrayType","UndefinedType","Undefined","Hash"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/value/hash/hash.mjs"],"sourcesContent":["import { IsArray, IsBoolean, IsBigInt, IsDate, IsNull, IsNumber, IsStandardObject, IsString, IsSymbol, IsUint8Array, IsUndefined } from '../guard/index.mjs';\nimport { TypeBoxError } from '../../type/error/index.mjs';\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nexport class ValueHashError extends TypeBoxError {\n    constructor(value) {\n        super(`Unable to hash value`);\n        this.value = value;\n    }\n}\n// ------------------------------------------------------------------\n// ByteMarker\n// ------------------------------------------------------------------\nvar ByteMarker;\n(function (ByteMarker) {\n    ByteMarker[ByteMarker[\"Undefined\"] = 0] = \"Undefined\";\n    ByteMarker[ByteMarker[\"Null\"] = 1] = \"Null\";\n    ByteMarker[ByteMarker[\"Boolean\"] = 2] = \"Boolean\";\n    ByteMarker[ByteMarker[\"Number\"] = 3] = \"Number\";\n    ByteMarker[ByteMarker[\"String\"] = 4] = \"String\";\n    ByteMarker[ByteMarker[\"Object\"] = 5] = \"Object\";\n    ByteMarker[ByteMarker[\"Array\"] = 6] = \"Array\";\n    ByteMarker[ByteMarker[\"Date\"] = 7] = \"Date\";\n    ByteMarker[ByteMarker[\"Uint8Array\"] = 8] = \"Uint8Array\";\n    ByteMarker[ByteMarker[\"Symbol\"] = 9] = \"Symbol\";\n    ByteMarker[ByteMarker[\"BigInt\"] = 10] = \"BigInt\";\n})(ByteMarker || (ByteMarker = {}));\n// ------------------------------------------------------------------\n// State\n// ------------------------------------------------------------------\nlet Accumulator = BigInt('14695981039346656037');\nconst [Prime, Size] = [BigInt('1099511628211'), BigInt('2') ** BigInt('64')];\nconst Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));\nconst F64 = new Float64Array(1);\nconst F64In = new DataView(F64.buffer);\nconst F64Out = new Uint8Array(F64.buffer);\n// ------------------------------------------------------------------\n// NumberToBytes\n// ------------------------------------------------------------------\nfunction* NumberToBytes(value) {\n    const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);\n    for (let i = 0; i < byteCount; i++) {\n        yield (value >> (8 * (byteCount - 1 - i))) & 0xff;\n    }\n}\n// ------------------------------------------------------------------\n// Hashing Functions\n// ------------------------------------------------------------------\nfunction ArrayType(value) {\n    FNV1A64(ByteMarker.Array);\n    for (const item of value) {\n        Visit(item);\n    }\n}\nfunction BooleanType(value) {\n    FNV1A64(ByteMarker.Boolean);\n    FNV1A64(value ? 1 : 0);\n}\nfunction BigIntType(value) {\n    FNV1A64(ByteMarker.BigInt);\n    F64In.setBigInt64(0, value);\n    for (const byte of F64Out) {\n        FNV1A64(byte);\n    }\n}\nfunction DateType(value) {\n    FNV1A64(ByteMarker.Date);\n    Visit(value.getTime());\n}\nfunction NullType(value) {\n    FNV1A64(ByteMarker.Null);\n}\nfunction NumberType(value) {\n    FNV1A64(ByteMarker.Number);\n    F64In.setFloat64(0, value);\n    for (const byte of F64Out) {\n        FNV1A64(byte);\n    }\n}\nfunction ObjectType(value) {\n    FNV1A64(ByteMarker.Object);\n    for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {\n        Visit(key);\n        Visit(value[key]);\n    }\n}\nfunction StringType(value) {\n    FNV1A64(ByteMarker.String);\n    for (let i = 0; i < value.length; i++) {\n        for (const byte of NumberToBytes(value.charCodeAt(i))) {\n            FNV1A64(byte);\n        }\n    }\n}\nfunction SymbolType(value) {\n    FNV1A64(ByteMarker.Symbol);\n    Visit(value.description);\n}\nfunction Uint8ArrayType(value) {\n    FNV1A64(ByteMarker.Uint8Array);\n    for (let i = 0; i < value.length; i++) {\n        FNV1A64(value[i]);\n    }\n}\nfunction UndefinedType(value) {\n    return FNV1A64(ByteMarker.Undefined);\n}\nfunction Visit(value) {\n    if (IsArray(value))\n        return ArrayType(value);\n    if (IsBoolean(value))\n        return BooleanType(value);\n    if (IsBigInt(value))\n        return BigIntType(value);\n    if (IsDate(value))\n        return DateType(value);\n    if (IsNull(value))\n        return NullType(value);\n    if (IsNumber(value))\n        return NumberType(value);\n    if (IsStandardObject(value))\n        return ObjectType(value);\n    if (IsString(value))\n        return StringType(value);\n    if (IsSymbol(value))\n        return SymbolType(value);\n    if (IsUint8Array(value))\n        return Uint8ArrayType(value);\n    if (IsUndefined(value))\n        return UndefinedType(value);\n    throw new ValueHashError(value);\n}\nfunction FNV1A64(byte) {\n    Accumulator = Accumulator ^ Bytes[byte];\n    Accumulator = (Accumulator * Prime) % Size;\n}\n// ------------------------------------------------------------------\n// Hash\n// ------------------------------------------------------------------\n/** Creates a FNV1A-64 non cryptographic hash of the given value */\nexport function Hash(value) {\n    Accumulator = BigInt('14695981039346656037');\n    Visit(value);\n    return Accumulator;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}