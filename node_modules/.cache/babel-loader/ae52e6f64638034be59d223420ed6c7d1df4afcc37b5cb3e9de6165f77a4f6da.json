{"ast":null,"code":"// Partial implementation that covers everything we need\nconst DELIMITER = \",\";\nfunction camelize(str) {\n  return str.split(\" \").map((str, i) => i === 0 ? str.toLowerCase() : str[0].toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\n}\nfunction convert(input) {\n  if (input.match(/\\d{4,4}-\\d{2,2}-\\d{2,2}/)) return new Date(input);\n  if (input.match(/^[0-9\\.]+$/)) return parseFloat(input);\n  if (input === \"null\") return null;\n  return input;\n}\nexport default function csv2json(csv) {\n  const lines = csv.split(\"\\n\");\n  // Actually we should handle this case, i.e. headers but no data.\n  // if (lines.length === 1)\n  //  throw new Error(\"No newlines in: \" + csv);\n  const headers = lines.shift().split(DELIMITER).map(camelize);\n  const out = new Array(lines.length);\n  for (let i = 0; i < lines.length; i++) {\n    const inRow = lines[i].split(DELIMITER);\n    const outRow = out[i] = {};\n    for (let j = 0; j < inRow.length; j++) {\n      outRow[headers[j]] = convert(inRow[j]);\n    }\n  }\n  return out;\n}","map":{"version":3,"names":["DELIMITER","camelize","str","split","map","i","toLowerCase","toUpperCase","substr","join","convert","input","match","Date","parseFloat","csv2json","csv","lines","headers","shift","out","Array","length","inRow","outRow","j"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/lib/csv2json.js"],"sourcesContent":["// Partial implementation that covers everything we need\nconst DELIMITER = \",\";\nfunction camelize(str) {\n    return str\n        .split(\" \")\n        .map((str, i) => i === 0\n        ? str.toLowerCase()\n        : str[0].toUpperCase() + str.substr(1).toLowerCase())\n        .join(\"\");\n}\nfunction convert(input) {\n    if (input.match(/\\d{4,4}-\\d{2,2}-\\d{2,2}/))\n        return new Date(input);\n    if (input.match(/^[0-9\\.]+$/))\n        return parseFloat(input);\n    if (input === \"null\")\n        return null;\n    return input;\n}\nexport default function csv2json(csv) {\n    const lines = csv.split(\"\\n\");\n    // Actually we should handle this case, i.e. headers but no data.\n    // if (lines.length === 1)\n    //  throw new Error(\"No newlines in: \" + csv);\n    const headers = lines.shift().split(DELIMITER).map(camelize);\n    const out = new Array(lines.length);\n    for (let i = 0; i < lines.length; i++) {\n        const inRow = lines[i].split(DELIMITER);\n        const outRow = (out[i] = {});\n        for (let j = 0; j < inRow.length; j++) {\n            outRow[headers[j]] = convert(inRow[j]);\n        }\n    }\n    return out;\n}\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,GAAG;AACrB,SAASC,QAAQA,CAACC,GAAG,EAAE;EACnB,OAAOA,GAAG,CACLC,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAC,CAACF,GAAG,EAAEG,CAAC,KAAKA,CAAC,KAAK,CAAC,GACtBH,GAAG,CAACI,WAAW,CAAC,CAAC,GACjBJ,GAAG,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,GAAGL,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC,CAAC,CACpDG,IAAI,CAAC,EAAE,CAAC;AACjB;AACA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACpB,IAAIA,KAAK,CAACC,KAAK,CAAC,yBAAyB,CAAC,EACtC,OAAO,IAAIC,IAAI,CAACF,KAAK,CAAC;EAC1B,IAAIA,KAAK,CAACC,KAAK,CAAC,YAAY,CAAC,EACzB,OAAOE,UAAU,CAACH,KAAK,CAAC;EAC5B,IAAIA,KAAK,KAAK,MAAM,EAChB,OAAO,IAAI;EACf,OAAOA,KAAK;AAChB;AACA,eAAe,SAASI,QAAQA,CAACC,GAAG,EAAE;EAClC,MAAMC,KAAK,GAAGD,GAAG,CAACb,KAAK,CAAC,IAAI,CAAC;EAC7B;EACA;EACA;EACA,MAAMe,OAAO,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAAChB,KAAK,CAACH,SAAS,CAAC,CAACI,GAAG,CAACH,QAAQ,CAAC;EAC5D,MAAMmB,GAAG,GAAG,IAAIC,KAAK,CAACJ,KAAK,CAACK,MAAM,CAAC;EACnC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,KAAK,CAACK,MAAM,EAAEjB,CAAC,EAAE,EAAE;IACnC,MAAMkB,KAAK,GAAGN,KAAK,CAACZ,CAAC,CAAC,CAACF,KAAK,CAACH,SAAS,CAAC;IACvC,MAAMwB,MAAM,GAAIJ,GAAG,CAACf,CAAC,CAAC,GAAG,CAAC,CAAE;IAC5B,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACD,MAAM,EAAEG,CAAC,EAAE,EAAE;MACnCD,MAAM,CAACN,OAAO,CAACO,CAAC,CAAC,CAAC,GAAGf,OAAO,CAACa,KAAK,CAACE,CAAC,CAAC,CAAC;IAC1C;EACJ;EACA,OAAOL,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}