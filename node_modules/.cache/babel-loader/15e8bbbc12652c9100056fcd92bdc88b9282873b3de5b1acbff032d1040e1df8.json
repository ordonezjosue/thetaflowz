{"ast":null,"code":"import { TemplateLiteralParseExact } from './parse.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\n// ------------------------------------------------------------------\n// TemplateLiteralFiniteError\n// ------------------------------------------------------------------\nexport class TemplateLiteralFiniteError extends TypeBoxError {}\n// ------------------------------------------------------------------\n// IsTemplateLiteralFiniteCheck\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction IsNumberExpression(expression) {\n  return expression.type === 'or' && expression.expr.length === 2 && expression.expr[0].type === 'const' && expression.expr[0].const === '0' && expression.expr[1].type === 'const' && expression.expr[1].const === '[1-9][0-9]*';\n}\n// prettier-ignore\nfunction IsBooleanExpression(expression) {\n  return expression.type === 'or' && expression.expr.length === 2 && expression.expr[0].type === 'const' && expression.expr[0].const === 'true' && expression.expr[1].type === 'const' && expression.expr[1].const === 'false';\n}\n// prettier-ignore\nfunction IsStringExpression(expression) {\n  return expression.type === 'const' && expression.const === '.*';\n}\n// ------------------------------------------------------------------\n// IsTemplateLiteralExpressionFinite\n// ------------------------------------------------------------------\n// prettier-ignore\nexport function IsTemplateLiteralExpressionFinite(expression) {\n  return IsNumberExpression(expression) || IsStringExpression(expression) ? false : IsBooleanExpression(expression) ? true : expression.type === 'and' ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === 'or' ? expression.expr.every(expr => IsTemplateLiteralExpressionFinite(expr)) : expression.type === 'const' ? true : (() => {\n    throw new TemplateLiteralFiniteError(`Unknown expression type`);\n  })();\n}\n/** Returns true if this TemplateLiteral resolves to a finite set of values */\nexport function IsTemplateLiteralFinite(schema) {\n  const expression = TemplateLiteralParseExact(schema.pattern);\n  return IsTemplateLiteralExpressionFinite(expression);\n}","map":{"version":3,"names":["TemplateLiteralParseExact","TypeBoxError","TemplateLiteralFiniteError","IsNumberExpression","expression","type","expr","length","const","IsBooleanExpression","IsStringExpression","IsTemplateLiteralExpressionFinite","every","IsTemplateLiteralFinite","schema","pattern"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/template-literal/finite.mjs"],"sourcesContent":["import { TemplateLiteralParseExact } from './parse.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\n// ------------------------------------------------------------------\n// TemplateLiteralFiniteError\n// ------------------------------------------------------------------\nexport class TemplateLiteralFiniteError extends TypeBoxError {\n}\n// ------------------------------------------------------------------\n// IsTemplateLiteralFiniteCheck\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction IsNumberExpression(expression) {\n    return (expression.type === 'or' &&\n        expression.expr.length === 2 &&\n        expression.expr[0].type === 'const' &&\n        expression.expr[0].const === '0' &&\n        expression.expr[1].type === 'const' &&\n        expression.expr[1].const === '[1-9][0-9]*');\n}\n// prettier-ignore\nfunction IsBooleanExpression(expression) {\n    return (expression.type === 'or' &&\n        expression.expr.length === 2 &&\n        expression.expr[0].type === 'const' &&\n        expression.expr[0].const === 'true' &&\n        expression.expr[1].type === 'const' &&\n        expression.expr[1].const === 'false');\n}\n// prettier-ignore\nfunction IsStringExpression(expression) {\n    return expression.type === 'const' && expression.const === '.*';\n}\n// ------------------------------------------------------------------\n// IsTemplateLiteralExpressionFinite\n// ------------------------------------------------------------------\n// prettier-ignore\nexport function IsTemplateLiteralExpressionFinite(expression) {\n    return (IsNumberExpression(expression) || IsStringExpression(expression) ? false :\n        IsBooleanExpression(expression) ? true :\n            (expression.type === 'and') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :\n                (expression.type === 'or') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :\n                    (expression.type === 'const') ? true :\n                        (() => { throw new TemplateLiteralFiniteError(`Unknown expression type`); })());\n}\n/** Returns true if this TemplateLiteral resolves to a finite set of values */\nexport function IsTemplateLiteralFinite(schema) {\n    const expression = TemplateLiteralParseExact(schema.pattern);\n    return IsTemplateLiteralExpressionFinite(expression);\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,aAAa;AACvD,SAASC,YAAY,QAAQ,oBAAoB;AACjD;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASD,YAAY,CAAC;AAE7D;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACC,UAAU,EAAE;EACpC,OAAQA,UAAU,CAACC,IAAI,KAAK,IAAI,IAC5BD,UAAU,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,IAC5BH,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,OAAO,IACnCD,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACE,KAAK,KAAK,GAAG,IAChCJ,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,OAAO,IACnCD,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACE,KAAK,KAAK,aAAa;AAClD;AACA;AACA,SAASC,mBAAmBA,CAACL,UAAU,EAAE;EACrC,OAAQA,UAAU,CAACC,IAAI,KAAK,IAAI,IAC5BD,UAAU,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,IAC5BH,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,OAAO,IACnCD,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACE,KAAK,KAAK,MAAM,IACnCJ,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACD,IAAI,KAAK,OAAO,IACnCD,UAAU,CAACE,IAAI,CAAC,CAAC,CAAC,CAACE,KAAK,KAAK,OAAO;AAC5C;AACA;AACA,SAASE,kBAAkBA,CAACN,UAAU,EAAE;EACpC,OAAOA,UAAU,CAACC,IAAI,KAAK,OAAO,IAAID,UAAU,CAACI,KAAK,KAAK,IAAI;AACnE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,iCAAiCA,CAACP,UAAU,EAAE;EAC1D,OAAQD,kBAAkB,CAACC,UAAU,CAAC,IAAIM,kBAAkB,CAACN,UAAU,CAAC,GAAG,KAAK,GAC5EK,mBAAmB,CAACL,UAAU,CAAC,GAAG,IAAI,GACjCA,UAAU,CAACC,IAAI,KAAK,KAAK,GAAID,UAAU,CAACE,IAAI,CAACM,KAAK,CAAEN,IAAI,IAAKK,iCAAiC,CAACL,IAAI,CAAC,CAAC,GACjGF,UAAU,CAACC,IAAI,KAAK,IAAI,GAAID,UAAU,CAACE,IAAI,CAACM,KAAK,CAAEN,IAAI,IAAKK,iCAAiC,CAACL,IAAI,CAAC,CAAC,GAChGF,UAAU,CAACC,IAAI,KAAK,OAAO,GAAI,IAAI,GAChC,CAAC,MAAM;IAAE,MAAM,IAAIH,0BAA0B,CAAC,yBAAyB,CAAC;EAAE,CAAC,EAAE,CAAC;AACtG;AACA;AACA,OAAO,SAASW,uBAAuBA,CAACC,MAAM,EAAE;EAC5C,MAAMV,UAAU,GAAGJ,yBAAyB,CAACc,MAAM,CAACC,OAAO,CAAC;EAC5D,OAAOJ,iCAAiC,CAACP,UAAU,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}