{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport { FailedYahooValidationError, InvalidOptionsError } from \"./errors.js\";\nimport { TransformDecodeCheckError, TransformDecodeError, Value } from \"@sinclair/typebox/value\";\nfunction logRelevantErrorInfo(e) {\n  const {\n    /* schema, */error /* , value */\n  } = e;\n  console.log(JSON.stringify(error, null, 2));\n}\nconst handleResultError = (e, options) => {\n  const title = e.schema.title;\n  if (options.logErrors) {\n    logRelevantErrorInfo(e);\n    console.log(`\n    This may happen intermittently and you should catch errors appropriately.\n    However:  1) if this recently started happening on every request for a symbol\n    that used to work, Yahoo may have changed their API.  2) If this happens on\n    every request for a symbol you've never used before, but not for other\n    symbols, you've found an edge-case (OR, we may just be protecting you from\n    \"bad\" data sometimes stored for e.g. misspelt symbols on Yahoo's side).\n    Please see if anyone has reported this previously:\n    \n      ${pkg.repository}/issues?q=is%3Aissue+${title}\n    \n    or open a new issue (and mention the symbol):  ${pkg.name} v${pkg.version}\n    \n      ${pkg.repository}/issues/new?labels=bug%2C+validation&template=validation.md&title=${title}\n    \n    For information on how to turn off the above logging or skip these errors,\n    see https://github.com/gadicc/node-yahoo-finance2/tree/devel/docs/validation.md.\n    \n    At the end of the doc, there's also a section on how to\n    [Help Fix Validation Errors](https://github.com/gadicc/node-yahoo-finance2/blob/devel/docs/validation.md#help-fix)\n    in case you'd like to contribute to the project.  Most of the time, these\n    fixes are very quick and easy; it's just hard for our small core team to keep up,\n    so help is always appreciated!\n    `);\n  }\n  throw new FailedYahooValidationError(\"Failed Yahoo Schema validation\", {\n    result: e.value,\n    errors: [e]\n  });\n};\nconst handleOptionsError = (e, {\n  logOptionsErrors\n}) => {\n  if (logOptionsErrors) {\n    console.error(`[yahooFinance] Invalid options (\"${JSON.stringify(e.error, null, 2)}\")`);\n  }\n  throw new InvalidOptionsError(\"Validation called with invalid options\");\n};\nexport const validateAndCoerceTypebox = ({\n  type,\n  data,\n  schema,\n  options\n}) => {\n  try {\n    const validationSchema = options._internalThrowOnAdditionalProperties ? {\n      ...schema,\n      additionalProperties: false\n    } : schema;\n    return Value.Decode(validationSchema, data);\n  } catch (e) {\n    if (e instanceof TransformDecodeError || e instanceof TransformDecodeCheckError) {\n      // TODO: The existing implementation of 'validate' assumes that the `type` parameter may not be provided\n      // and defaults to validating the options if it is not.\n      // We should probably explore validating this further up in the call chain.\n      // It'd be nice to do this in the body of a module (e.g. search) so that we can avoid\n      // polluting core code with type checks and edge cases\n      type === \"result\" ? handleResultError(e, options) : handleOptionsError(e, options);\n    }\n    throw e;\n  }\n};\nexport default validateAndCoerceTypebox;","map":{"version":3,"names":["pkg","type","FailedYahooValidationError","InvalidOptionsError","TransformDecodeCheckError","TransformDecodeError","Value","logRelevantErrorInfo","e","error","console","log","JSON","stringify","handleResultError","options","title","schema","logErrors","repository","name","version","result","value","errors","handleOptionsError","logOptionsErrors","validateAndCoerceTypebox","data","validationSchema","_internalThrowOnAdditionalProperties","additionalProperties","Decode"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/lib/validateAndCoerceTypes.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport { FailedYahooValidationError, InvalidOptionsError } from \"./errors.js\";\nimport { TransformDecodeCheckError, TransformDecodeError, Value, } from \"@sinclair/typebox/value\";\nfunction logRelevantErrorInfo(e) {\n    const { /* schema, */ error /* , value */ } = e;\n    console.log(JSON.stringify(error, null, 2));\n}\nconst handleResultError = (e, options) => {\n    const title = e.schema.title;\n    if (options.logErrors) {\n        logRelevantErrorInfo(e);\n        console.log(`\n    This may happen intermittently and you should catch errors appropriately.\n    However:  1) if this recently started happening on every request for a symbol\n    that used to work, Yahoo may have changed their API.  2) If this happens on\n    every request for a symbol you've never used before, but not for other\n    symbols, you've found an edge-case (OR, we may just be protecting you from\n    \"bad\" data sometimes stored for e.g. misspelt symbols on Yahoo's side).\n    Please see if anyone has reported this previously:\n    \n      ${pkg.repository}/issues?q=is%3Aissue+${title}\n    \n    or open a new issue (and mention the symbol):  ${pkg.name} v${pkg.version}\n    \n      ${pkg.repository}/issues/new?labels=bug%2C+validation&template=validation.md&title=${title}\n    \n    For information on how to turn off the above logging or skip these errors,\n    see https://github.com/gadicc/node-yahoo-finance2/tree/devel/docs/validation.md.\n    \n    At the end of the doc, there's also a section on how to\n    [Help Fix Validation Errors](https://github.com/gadicc/node-yahoo-finance2/blob/devel/docs/validation.md#help-fix)\n    in case you'd like to contribute to the project.  Most of the time, these\n    fixes are very quick and easy; it's just hard for our small core team to keep up,\n    so help is always appreciated!\n    `);\n    }\n    throw new FailedYahooValidationError(\"Failed Yahoo Schema validation\", {\n        result: e.value,\n        errors: [e],\n    });\n};\nconst handleOptionsError = (e, { logOptionsErrors }) => {\n    if (logOptionsErrors) {\n        console.error(`[yahooFinance] Invalid options (\"${JSON.stringify(e.error, null, 2)}\")`);\n    }\n    throw new InvalidOptionsError(\"Validation called with invalid options\");\n};\nexport const validateAndCoerceTypebox = ({ type, data, schema, options, }) => {\n    try {\n        const validationSchema = options._internalThrowOnAdditionalProperties\n            ? { ...schema, additionalProperties: false }\n            : schema;\n        return Value.Decode(validationSchema, data);\n    }\n    catch (e) {\n        if (e instanceof TransformDecodeError ||\n            e instanceof TransformDecodeCheckError) {\n            // TODO: The existing implementation of 'validate' assumes that the `type` parameter may not be provided\n            // and defaults to validating the options if it is not.\n            // We should probably explore validating this further up in the call chain.\n            // It'd be nice to do this in the body of a module (e.g. search) so that we can avoid\n            // polluting core code with type checks and edge cases\n            type === \"result\"\n                ? handleResultError(e, options)\n                : handleOptionsError(e, options);\n        }\n        throw e;\n    }\n};\nexport default validateAndCoerceTypebox;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,GAAG,MAAM,oBAAoB,QAAQC,IAAI,EAAE,MAAM;AACxD,SAASC,0BAA0B,EAAEC,mBAAmB,QAAQ,aAAa;AAC7E,SAASC,yBAAyB,EAAEC,oBAAoB,EAAEC,KAAK,QAAS,yBAAyB;AACjG,SAASC,oBAAoBA,CAACC,CAAC,EAAE;EAC7B,MAAM;IAAE,aAAcC,KAAK,CAAC;EAAc,CAAC,GAAGD,CAAC;EAC/CE,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAC/C;AACA,MAAMK,iBAAiB,GAAGA,CAACN,CAAC,EAAEO,OAAO,KAAK;EACtC,MAAMC,KAAK,GAAGR,CAAC,CAACS,MAAM,CAACD,KAAK;EAC5B,IAAID,OAAO,CAACG,SAAS,EAAE;IACnBX,oBAAoB,CAACC,CAAC,CAAC;IACvBE,OAAO,CAACC,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQX,GAAG,CAACmB,UAAU,wBAAwBH,KAAK;AACnD;AACA,qDAAqDhB,GAAG,CAACoB,IAAI,KAAKpB,GAAG,CAACqB,OAAO;AAC7E;AACA,QAAQrB,GAAG,CAACmB,UAAU,qEAAqEH,KAAK;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACF;EACA,MAAM,IAAId,0BAA0B,CAAC,gCAAgC,EAAE;IACnEoB,MAAM,EAAEd,CAAC,CAACe,KAAK;IACfC,MAAM,EAAE,CAAChB,CAAC;EACd,CAAC,CAAC;AACN,CAAC;AACD,MAAMiB,kBAAkB,GAAGA,CAACjB,CAAC,EAAE;EAAEkB;AAAiB,CAAC,KAAK;EACpD,IAAIA,gBAAgB,EAAE;IAClBhB,OAAO,CAACD,KAAK,CAAC,oCAAoCG,IAAI,CAACC,SAAS,CAACL,CAAC,CAACC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;EAC3F;EACA,MAAM,IAAIN,mBAAmB,CAAC,wCAAwC,CAAC;AAC3E,CAAC;AACD,OAAO,MAAMwB,wBAAwB,GAAGA,CAAC;EAAE1B,IAAI;EAAE2B,IAAI;EAAEX,MAAM;EAAEF;AAAS,CAAC,KAAK;EAC1E,IAAI;IACA,MAAMc,gBAAgB,GAAGd,OAAO,CAACe,oCAAoC,GAC/D;MAAE,GAAGb,MAAM;MAAEc,oBAAoB,EAAE;IAAM,CAAC,GAC1Cd,MAAM;IACZ,OAAOX,KAAK,CAAC0B,MAAM,CAACH,gBAAgB,EAAED,IAAI,CAAC;EAC/C,CAAC,CACD,OAAOpB,CAAC,EAAE;IACN,IAAIA,CAAC,YAAYH,oBAAoB,IACjCG,CAAC,YAAYJ,yBAAyB,EAAE;MACxC;MACA;MACA;MACA;MACA;MACAH,IAAI,KAAK,QAAQ,GACXa,iBAAiB,CAACN,CAAC,EAAEO,OAAO,CAAC,GAC7BU,kBAAkB,CAACjB,CAAC,EAAEO,OAAO,CAAC;IACxC;IACA,MAAMP,CAAC;EACX;AACJ,CAAC;AACD,eAAemB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}