{"ast":null,"code":"import { IsObject, IsArray, IsNumber, IsUndefined } from '../value/guard/index.mjs';\nexport var TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n  // ------------------------------------------------------------------\n  // TypeSystemPolicy\n  // ------------------------------------------------------------------\n  /** Shared assertion routines used by the value and errors modules */\n  /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n  TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n  /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n  TypeSystemPolicy.AllowArrayObject = false;\n  /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n  TypeSystemPolicy.AllowNaN = false;\n  /** Sets whether `null` should validate for void types. The default is `false` */\n  TypeSystemPolicy.AllowNullVoid = false;\n  /** Asserts this value using the ExactOptionalPropertyTypes policy */\n  function IsExactOptionalProperty(value, key) {\n    return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n  }\n  TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n  /** Asserts this value using the AllowArrayObjects policy */\n  function IsObjectLike(value) {\n    const isObject = IsObject(value);\n    return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !IsArray(value);\n  }\n  TypeSystemPolicy.IsObjectLike = IsObjectLike;\n  /** Asserts this value as a record using the AllowArrayObjects policy */\n  function IsRecordLike(value) {\n    return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n  }\n  TypeSystemPolicy.IsRecordLike = IsRecordLike;\n  /** Asserts this value using the AllowNaN policy */\n  function IsNumberLike(value) {\n    return TypeSystemPolicy.AllowNaN ? IsNumber(value) : Number.isFinite(value);\n  }\n  TypeSystemPolicy.IsNumberLike = IsNumberLike;\n  /** Asserts this value using the AllowVoidNull policy */\n  function IsVoidLike(value) {\n    const isUndefined = IsUndefined(value);\n    return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n  }\n  TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (TypeSystemPolicy = {}));","map":{"version":3,"names":["IsObject","IsArray","IsNumber","IsUndefined","TypeSystemPolicy","ExactOptionalPropertyTypes","AllowArrayObject","AllowNaN","AllowNullVoid","IsExactOptionalProperty","value","key","undefined","IsObjectLike","isObject","IsRecordLike","Date","Uint8Array","IsNumberLike","Number","isFinite","IsVoidLike","isUndefined"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/system/policy.mjs"],"sourcesContent":["import { IsObject, IsArray, IsNumber, IsUndefined } from '../value/guard/index.mjs';\nexport var TypeSystemPolicy;\n(function (TypeSystemPolicy) {\n    // ------------------------------------------------------------------\n    // TypeSystemPolicy\n    // ------------------------------------------------------------------\n    /** Shared assertion routines used by the value and errors modules */\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n    TypeSystemPolicy.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n    TypeSystemPolicy.AllowArrayObject = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n    TypeSystemPolicy.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */\n    TypeSystemPolicy.AllowNullVoid = false;\n    /** Asserts this value using the ExactOptionalPropertyTypes policy */\n    function IsExactOptionalProperty(value, key) {\n        return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;\n    /** Asserts this value using the AllowArrayObjects policy */\n    function IsObjectLike(value) {\n        const isObject = IsObject(value);\n        return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !IsArray(value);\n    }\n    TypeSystemPolicy.IsObjectLike = IsObjectLike;\n    /** Asserts this value as a record using the AllowArrayObjects policy */\n    function IsRecordLike(value) {\n        return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);\n    }\n    TypeSystemPolicy.IsRecordLike = IsRecordLike;\n    /** Asserts this value using the AllowNaN policy */\n    function IsNumberLike(value) {\n        return TypeSystemPolicy.AllowNaN ? IsNumber(value) : Number.isFinite(value);\n    }\n    TypeSystemPolicy.IsNumberLike = IsNumberLike;\n    /** Asserts this value using the AllowVoidNull policy */\n    function IsVoidLike(value) {\n        const isUndefined = IsUndefined(value);\n        return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;\n    }\n    TypeSystemPolicy.IsVoidLike = IsVoidLike;\n})(TypeSystemPolicy || (TypeSystemPolicy = {}));\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,0BAA0B;AACnF,OAAO,IAAIC,gBAAgB;AAC3B,CAAC,UAAUA,gBAAgB,EAAE;EACzB;EACA;EACA;EACA;EACA;EACAA,gBAAgB,CAACC,0BAA0B,GAAG,KAAK;EACnD;EACAD,gBAAgB,CAACE,gBAAgB,GAAG,KAAK;EACzC;EACAF,gBAAgB,CAACG,QAAQ,GAAG,KAAK;EACjC;EACAH,gBAAgB,CAACI,aAAa,GAAG,KAAK;EACtC;EACA,SAASC,uBAAuBA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACzC,OAAOP,gBAAgB,CAACC,0BAA0B,GAAGM,GAAG,IAAID,KAAK,GAAGA,KAAK,CAACC,GAAG,CAAC,KAAKC,SAAS;EAChG;EACAR,gBAAgB,CAACK,uBAAuB,GAAGA,uBAAuB;EAClE;EACA,SAASI,YAAYA,CAACH,KAAK,EAAE;IACzB,MAAMI,QAAQ,GAAGd,QAAQ,CAACU,KAAK,CAAC;IAChC,OAAON,gBAAgB,CAACE,gBAAgB,GAAGQ,QAAQ,GAAGA,QAAQ,IAAI,CAACb,OAAO,CAACS,KAAK,CAAC;EACrF;EACAN,gBAAgB,CAACS,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASE,YAAYA,CAACL,KAAK,EAAE;IACzB,OAAOG,YAAY,CAACH,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYM,IAAI,CAAC,IAAI,EAAEN,KAAK,YAAYO,UAAU,CAAC;EAC5F;EACAb,gBAAgB,CAACW,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASG,YAAYA,CAACR,KAAK,EAAE;IACzB,OAAON,gBAAgB,CAACG,QAAQ,GAAGL,QAAQ,CAACQ,KAAK,CAAC,GAAGS,MAAM,CAACC,QAAQ,CAACV,KAAK,CAAC;EAC/E;EACAN,gBAAgB,CAACc,YAAY,GAAGA,YAAY;EAC5C;EACA,SAASG,UAAUA,CAACX,KAAK,EAAE;IACvB,MAAMY,WAAW,GAAGnB,WAAW,CAACO,KAAK,CAAC;IACtC,OAAON,gBAAgB,CAACI,aAAa,GAAGc,WAAW,IAAIZ,KAAK,KAAK,IAAI,GAAGY,WAAW;EACvF;EACAlB,gBAAgB,CAACiB,UAAU,GAAGA,UAAU;AAC5C,CAAC,EAAEjB,gBAAgB,KAAKA,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}