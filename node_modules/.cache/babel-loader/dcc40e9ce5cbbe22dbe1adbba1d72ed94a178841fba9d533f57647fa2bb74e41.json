{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ordon\\\\ThetaFlowz_Cursor\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Mock authentication - in production, this would connect to Firebase or your backend\n  const login = async (email, password) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock user data\n    const user = {\n      id: '1',\n      email,\n      name: email.split('@')[0],\n      isAdmin: email.includes('admin'),\n      createdAt: new Date().toISOString()\n    };\n    setCurrentUser(user);\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  };\n  const register = async (email, password, name) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = {\n      id: Date.now().toString(),\n      email,\n      name,\n      isAdmin: false,\n      createdAt: new Date().toISOString()\n    };\n    setCurrentUser(user);\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n  };\n  useEffect(() => {\n    // Check for existing user session\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setCurrentUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","login","email","password","Promise","resolve","setTimeout","user","id","name","split","isAdmin","includes","createdAt","Date","toISOString","localStorage","setItem","JSON","stringify","register","now","toString","logout","removeItem","savedUser","getItem","parse","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Mock authentication - in production, this would connect to Firebase or your backend\r\n  const login = async (email, password) => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Mock user data\r\n    const user = {\r\n      id: '1',\r\n      email,\r\n      name: email.split('@')[0],\r\n      isAdmin: email.includes('admin'),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    setCurrentUser(user);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return user;\r\n  };\r\n\r\n  const register = async (email, password, name) => {\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    const user = {\r\n      id: Date.now().toString(),\r\n      email,\r\n      name,\r\n      isAdmin: false,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    setCurrentUser(user);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return user;\r\n  };\r\n\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check for existing user session\r\n    const savedUser = localStorage.getItem('user');\r\n    if (savedUser) {\r\n      setCurrentUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}