{"ast":null,"code":"import yahooFinance from 'yahoo-finance2';\nclass MarketDataService {\n  // Get real-time quote for a single symbol\n  async getQuote(symbol) {\n    try {\n      const quote = await yahooFinance.quote(symbol);\n      return {\n        symbol: quote.symbol,\n        price: quote.regularMarketPrice,\n        change: quote.regularMarketChange,\n        changePercent: quote.regularMarketChangePercent,\n        volume: quote.regularMarketVolume,\n        marketCap: quote.marketCap,\n        high: quote.regularMarketDayHigh,\n        low: quote.regularMarketDayLow,\n        open: quote.regularMarketOpen,\n        previousClose: quote.regularMarketPreviousClose,\n        timestamp: quote.regularMarketTime,\n        currency: quote.currency,\n        exchange: quote.exchange,\n        shortName: quote.shortName,\n        longName: quote.longName\n      };\n    } catch (error) {\n      console.error(`Error fetching quote for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Get quotes for multiple symbols\n  async getQuotes(symbols) {\n    try {\n      const quotes = await yahooFinance.quote(symbols);\n      return Array.isArray(quotes) ? quotes : [quotes];\n    } catch (error) {\n      console.error('Error fetching quotes:', error);\n      throw error;\n    }\n  }\n\n  // Get historical data for a symbol\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\n    try {\n      const historicalData = await yahooFinance.historical(symbol, {\n        period1: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n        // 30 days ago\n        period2: new Date(),\n        interval: interval\n      });\n      return historicalData;\n    } catch (error) {\n      console.error(`Error fetching historical data for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Get options chain for a symbol\n  async getOptionsChain(symbol) {\n    try {\n      const options = await yahooFinance.options(symbol);\n      return options;\n    } catch (error) {\n      console.error(`Error fetching options chain for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Search for symbols\n  async searchSymbols(query) {\n    try {\n      const searchResults = await yahooFinance.search(query);\n      return searchResults;\n    } catch (error) {\n      console.error('Error searching symbols:', error);\n      throw error;\n    }\n  }\n\n  // Get market summary (major indices)\n  async getMarketSummary() {\n    const majorIndices = ['^GSPC', '^DJI', '^IXIC', '^RUT', '^VIX'];\n    try {\n      const quotes = await this.getQuotes(majorIndices);\n      return quotes.map(quote => ({\n        symbol: quote.symbol,\n        name: quote.shortName || quote.longName,\n        price: quote.regularMarketPrice,\n        change: quote.regularMarketChange,\n        changePercent: quote.regularMarketChangePercent,\n        volume: quote.regularMarketVolume\n      }));\n    } catch (error) {\n      console.error('Error fetching market summary:', error);\n      throw error;\n    }\n  }\n}\nexport default new MarketDataService();","map":{"version":3,"names":["yahooFinance","MarketDataService","getQuote","symbol","quote","price","regularMarketPrice","change","regularMarketChange","changePercent","regularMarketChangePercent","volume","regularMarketVolume","marketCap","high","regularMarketDayHigh","low","regularMarketDayLow","open","regularMarketOpen","previousClose","regularMarketPreviousClose","timestamp","regularMarketTime","currency","exchange","shortName","longName","error","console","getQuotes","symbols","quotes","Array","isArray","getHistoricalData","period","interval","historicalData","historical","period1","Date","now","period2","getOptionsChain","options","searchSymbols","query","searchResults","search","getMarketSummary","majorIndices","map","name"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/services/marketDataService.js"],"sourcesContent":["import yahooFinance from 'yahoo-finance2';\r\n\r\nclass MarketDataService {\r\n  // Get real-time quote for a single symbol\r\n  async getQuote(symbol) {\r\n    try {\r\n      const quote = await yahooFinance.quote(symbol);\r\n      return {\r\n        symbol: quote.symbol,\r\n        price: quote.regularMarketPrice,\r\n        change: quote.regularMarketChange,\r\n        changePercent: quote.regularMarketChangePercent,\r\n        volume: quote.regularMarketVolume,\r\n        marketCap: quote.marketCap,\r\n        high: quote.regularMarketDayHigh,\r\n        low: quote.regularMarketDayLow,\r\n        open: quote.regularMarketOpen,\r\n        previousClose: quote.regularMarketPreviousClose,\r\n        timestamp: quote.regularMarketTime,\r\n        currency: quote.currency,\r\n        exchange: quote.exchange,\r\n        shortName: quote.shortName,\r\n        longName: quote.longName\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error fetching quote for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get quotes for multiple symbols\r\n  async getQuotes(symbols) {\r\n    try {\r\n      const quotes = await yahooFinance.quote(symbols);\r\n      return Array.isArray(quotes) ? quotes : [quotes];\r\n    } catch (error) {\r\n      console.error('Error fetching quotes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get historical data for a symbol\r\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\r\n    try {\r\n      const historicalData = await yahooFinance.historical(symbol, {\r\n        period1: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\r\n        period2: new Date(),\r\n        interval: interval\r\n      });\r\n      return historicalData;\r\n    } catch (error) {\r\n      console.error(`Error fetching historical data for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get options chain for a symbol\r\n  async getOptionsChain(symbol) {\r\n    try {\r\n      const options = await yahooFinance.options(symbol);\r\n      return options;\r\n    } catch (error) {\r\n      console.error(`Error fetching options chain for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search for symbols\r\n  async searchSymbols(query) {\r\n    try {\r\n      const searchResults = await yahooFinance.search(query);\r\n      return searchResults;\r\n    } catch (error) {\r\n      console.error('Error searching symbols:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get market summary (major indices)\r\n  async getMarketSummary() {\r\n    const majorIndices = ['^GSPC', '^DJI', '^IXIC', '^RUT', '^VIX'];\r\n    try {\r\n      const quotes = await this.getQuotes(majorIndices);\r\n      return quotes.map(quote => ({\r\n        symbol: quote.symbol,\r\n        name: quote.shortName || quote.longName,\r\n        price: quote.regularMarketPrice,\r\n        change: quote.regularMarketChange,\r\n        changePercent: quote.regularMarketChangePercent,\r\n        volume: quote.regularMarketVolume\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching market summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MarketDataService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}