{"ast":null,"code":"import { TypeBoxError } from '../../type/error/index.mjs';\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nexport class ValuePointerRootSetError extends TypeBoxError {\n  constructor(value, path, update) {\n    super('Cannot set root value');\n    this.value = value;\n    this.path = path;\n    this.update = update;\n  }\n}\nexport class ValuePointerRootDeleteError extends TypeBoxError {\n  constructor(value, path) {\n    super('Cannot delete root value');\n    this.value = value;\n    this.path = path;\n  }\n}\n// ------------------------------------------------------------------\n// ValuePointer\n// ------------------------------------------------------------------\n/** Provides functionality to update values through RFC6901 string pointers */\n// prettier-ignore\nfunction Escape(component) {\n  return component.indexOf('~') === -1 ? component : component.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n/** Formats the given pointer into navigable key components */\n// prettier-ignore\nexport function* Format(pointer) {\n  if (pointer === '') return;\n  let [start, end] = [0, 0];\n  for (let i = 0; i < pointer.length; i++) {\n    const char = pointer.charAt(i);\n    if (char === '/') {\n      if (i === 0) {\n        start = i + 1;\n      } else {\n        end = i;\n        yield Escape(pointer.slice(start, end));\n        start = i + 1;\n      }\n    } else {\n      end = i;\n    }\n  }\n  yield Escape(pointer.slice(start));\n}\n/** Sets the value at the given pointer. If the value at the pointer does not exist it is created */\n// prettier-ignore\nexport function Set(value, pointer, update) {\n  if (pointer === '') throw new ValuePointerRootSetError(value, pointer, update);\n  let [owner, next, key] = [null, value, ''];\n  for (const component of Format(pointer)) {\n    if (next[component] === undefined) next[component] = {};\n    owner = next;\n    next = next[component];\n    key = component;\n  }\n  owner[key] = update;\n}\n/** Deletes a value at the given pointer */\n// prettier-ignore\nexport function Delete(value, pointer) {\n  if (pointer === '') throw new ValuePointerRootDeleteError(value, pointer);\n  let [owner, next, key] = [null, value, ''];\n  for (const component of Format(pointer)) {\n    if (next[component] === undefined || next[component] === null) return;\n    owner = next;\n    next = next[component];\n    key = component;\n  }\n  if (Array.isArray(owner)) {\n    const index = parseInt(key);\n    owner.splice(index, 1);\n  } else {\n    delete owner[key];\n  }\n}\n/** Returns true if a value exists at the given pointer */\n// prettier-ignore\nexport function Has(value, pointer) {\n  if (pointer === '') return true;\n  let [owner, next, key] = [null, value, ''];\n  for (const component of Format(pointer)) {\n    if (next[component] === undefined) return false;\n    owner = next;\n    next = next[component];\n    key = component;\n  }\n  return Object.getOwnPropertyNames(owner).includes(key);\n}\n/** Gets the value at the given pointer */\n// prettier-ignore\nexport function Get(value, pointer) {\n  if (pointer === '') return value;\n  let current = value;\n  for (const component of Format(pointer)) {\n    if (current[component] === undefined) return undefined;\n    current = current[component];\n  }\n  return current;\n}","map":{"version":3,"names":["TypeBoxError","ValuePointerRootSetError","constructor","value","path","update","ValuePointerRootDeleteError","Escape","component","indexOf","replace","Format","pointer","start","end","i","length","char","charAt","slice","Set","owner","next","key","undefined","Delete","Array","isArray","index","parseInt","splice","Has","Object","getOwnPropertyNames","includes","Get","current"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/value/pointer/pointer.mjs"],"sourcesContent":["import { TypeBoxError } from '../../type/error/index.mjs';\n// ------------------------------------------------------------------\n// Errors\n// ------------------------------------------------------------------\nexport class ValuePointerRootSetError extends TypeBoxError {\n    constructor(value, path, update) {\n        super('Cannot set root value');\n        this.value = value;\n        this.path = path;\n        this.update = update;\n    }\n}\nexport class ValuePointerRootDeleteError extends TypeBoxError {\n    constructor(value, path) {\n        super('Cannot delete root value');\n        this.value = value;\n        this.path = path;\n    }\n}\n// ------------------------------------------------------------------\n// ValuePointer\n// ------------------------------------------------------------------\n/** Provides functionality to update values through RFC6901 string pointers */\n// prettier-ignore\nfunction Escape(component) {\n    return component.indexOf('~') === -1 ? component : component.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n/** Formats the given pointer into navigable key components */\n// prettier-ignore\nexport function* Format(pointer) {\n    if (pointer === '')\n        return;\n    let [start, end] = [0, 0];\n    for (let i = 0; i < pointer.length; i++) {\n        const char = pointer.charAt(i);\n        if (char === '/') {\n            if (i === 0) {\n                start = i + 1;\n            }\n            else {\n                end = i;\n                yield Escape(pointer.slice(start, end));\n                start = i + 1;\n            }\n        }\n        else {\n            end = i;\n        }\n    }\n    yield Escape(pointer.slice(start));\n}\n/** Sets the value at the given pointer. If the value at the pointer does not exist it is created */\n// prettier-ignore\nexport function Set(value, pointer, update) {\n    if (pointer === '')\n        throw new ValuePointerRootSetError(value, pointer, update);\n    let [owner, next, key] = [null, value, ''];\n    for (const component of Format(pointer)) {\n        if (next[component] === undefined)\n            next[component] = {};\n        owner = next;\n        next = next[component];\n        key = component;\n    }\n    owner[key] = update;\n}\n/** Deletes a value at the given pointer */\n// prettier-ignore\nexport function Delete(value, pointer) {\n    if (pointer === '')\n        throw new ValuePointerRootDeleteError(value, pointer);\n    let [owner, next, key] = [null, value, ''];\n    for (const component of Format(pointer)) {\n        if (next[component] === undefined || next[component] === null)\n            return;\n        owner = next;\n        next = next[component];\n        key = component;\n    }\n    if (Array.isArray(owner)) {\n        const index = parseInt(key);\n        owner.splice(index, 1);\n    }\n    else {\n        delete owner[key];\n    }\n}\n/** Returns true if a value exists at the given pointer */\n// prettier-ignore\nexport function Has(value, pointer) {\n    if (pointer === '')\n        return true;\n    let [owner, next, key] = [null, value, ''];\n    for (const component of Format(pointer)) {\n        if (next[component] === undefined)\n            return false;\n        owner = next;\n        next = next[component];\n        key = component;\n    }\n    return Object.getOwnPropertyNames(owner).includes(key);\n}\n/** Gets the value at the given pointer */\n// prettier-ignore\nexport function Get(value, pointer) {\n    if (pointer === '')\n        return value;\n    let current = value;\n    for (const component of Format(pointer)) {\n        if (current[component] === undefined)\n            return undefined;\n        current = current[component];\n    }\n    return current;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}