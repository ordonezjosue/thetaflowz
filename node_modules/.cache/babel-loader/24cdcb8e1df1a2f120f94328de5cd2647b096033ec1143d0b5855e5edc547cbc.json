{"ast":null,"code":"class MarketDataService {\n  constructor() {\n    // Using Alpha Vantage API (free tier available)\n    this.apiKey = 'demo'; // Replace with your Alpha Vantage API key\n    this.baseUrl = 'https://www.alphavantage.co/query';\n  }\n\n  // Get real-time quote for a single symbol\n  async getQuote(symbol) {\n    try {\n      const response = await fetch(`${this.baseUrl}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      if (data['Global Quote']) {\n        const quote = data['Global Quote'];\n        return {\n          symbol: quote['01. symbol'],\n          price: parseFloat(quote['05. price']),\n          change: parseFloat(quote['09. change']),\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')),\n          volume: parseInt(quote['06. volume']),\n          high: parseFloat(quote['03. high']),\n          low: parseFloat(quote['04. low']),\n          open: parseFloat(quote['02. open']),\n          previousClose: parseFloat(quote['08. previous close']),\n          timestamp: Date.now(),\n          currency: 'USD',\n          exchange: 'US',\n          shortName: symbol,\n          longName: symbol\n        };\n      }\n      throw new Error('No quote data available');\n    } catch (error) {\n      console.error(`Error fetching quote for ${symbol}:`, error);\n      // Return mock data for demo purposes\n      return {\n        symbol: symbol,\n        price: 150.00 + Math.random() * 50,\n        change: (Math.random() - 0.5) * 10,\n        changePercent: (Math.random() - 0.5) * 5,\n        volume: 1000000 + Math.random() * 5000000,\n        high: 160.00,\n        low: 140.00,\n        open: 155.00,\n        previousClose: 150.00,\n        timestamp: Date.now(),\n        currency: 'USD',\n        exchange: 'US',\n        shortName: symbol,\n        longName: symbol\n      };\n    }\n  }\n\n  // Get quotes for multiple symbols\n  async getQuotes(symbols) {\n    try {\n      const quotes = await Promise.all(symbols.map(symbol => this.getQuote(symbol)));\n      return quotes;\n    } catch (error) {\n      console.error('Error fetching quotes:', error);\n      throw error;\n    }\n  }\n\n  // Get historical data for a symbol\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\n    try {\n      const response = await fetch(`${this.baseUrl}?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      if (data['Time Series (Daily)']) {\n        const timeSeries = data['Time Series (Daily)'];\n        const dates = Object.keys(timeSeries).slice(0, 30); // Last 30 days\n\n        return dates.map(date => {\n          const dayData = timeSeries[date];\n          return {\n            date: new Date(date),\n            open: parseFloat(dayData['1. open']),\n            high: parseFloat(dayData['2. high']),\n            low: parseFloat(dayData['3. low']),\n            close: parseFloat(dayData['4. close']),\n            volume: parseInt(dayData['5. volume'])\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error(`Error fetching historical data for ${symbol}:`, error);\n      // Return mock data for demo purposes\n      const mockData = [];\n      for (let i = 30; i > 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        mockData.push({\n          date: date,\n          open: 150 + Math.random() * 10,\n          high: 155 + Math.random() * 10,\n          low: 145 + Math.random() * 10,\n          close: 150 + Math.random() * 10,\n          volume: 1000000 + Math.random() * 2000000\n        });\n      }\n      return mockData;\n    }\n  }\n\n  // Get options chain for a symbol\n  async getOptionsChain(symbol) {\n    try {\n      // Alpha Vantage doesn't provide options data in the free tier\n      // This is a placeholder - you'd need a paid plan for options data\n      throw new Error('Options data requires a paid Alpha Vantage plan');\n    } catch (error) {\n      console.error(`Error fetching options chain for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Search for symbols\n  async searchSymbols(query) {\n    try {\n      console.log('Searching for:', query);\n      const response = await fetch(`${this.baseUrl}?function=SYMBOL_SEARCH&keywords=${query}&apikey=${this.apiKey}`);\n      const data = await response.json();\n      console.log('API response:', data);\n      if (data.bestMatches) {\n        const results = data.bestMatches.map(item => ({\n          symbol: item['1. symbol'],\n          name: item['2. name'],\n          exchange: item['4. region'],\n          type: item['3. type']\n        }));\n        console.log('Processed results:', results);\n        return results;\n      }\n\n      // If API fails or returns no results, return mock data for testing\n      console.log('No API results, returning mock data');\n      const mockResults = [{\n        symbol: 'SPY',\n        name: 'SPDR S&P 500 ETF Trust',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXL',\n        name: 'Direxion Daily S&P 500 Bull 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXS',\n        name: 'Direxion Daily S&P 500 Bear 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }];\n      return mockResults;\n    } catch (error) {\n      console.error('Error searching symbols:', error);\n      // Return mock data for testing\n      const mockResults = [{\n        symbol: 'SPY',\n        name: 'SPDR S&P 500 ETF Trust',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXL',\n        name: 'Direxion Daily S&P 500 Bull 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }, {\n        symbol: 'SPXS',\n        name: 'Direxion Daily S&P 500 Bear 3X Shares',\n        exchange: 'US',\n        type: 'ETF'\n      }];\n      return mockResults;\n    }\n  }\n\n  // Get market summary (major indices)\n  async getMarketSummary() {\n    // Use major stock symbols for market overview\n    const majorStocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\n    try {\n      const quotes = await this.getQuotes(majorStocks);\n      return quotes.map(quote => ({\n        symbol: quote.symbol,\n        name: this.getStockName(quote.symbol),\n        price: quote.price,\n        change: quote.change,\n        changePercent: quote.changePercent,\n        volume: quote.volume\n      }));\n    } catch (error) {\n      console.error('Error fetching market summary:', error);\n      throw error;\n    }\n  }\n  getStockName(symbol) {\n    const names = {\n      'AAPL': 'Apple Inc.',\n      'MSFT': 'Microsoft Corporation',\n      'GOOGL': 'Alphabet Inc.',\n      'AMZN': 'Amazon.com Inc.',\n      'TSLA': 'Tesla Inc.'\n    };\n    return names[symbol] || symbol;\n  }\n}\nexport default new MarketDataService();","map":{"version":3,"names":["MarketDataService","constructor","apiKey","baseUrl","getQuote","symbol","response","fetch","data","json","quote","price","parseFloat","change","changePercent","replace","volume","parseInt","high","low","open","previousClose","timestamp","Date","now","currency","exchange","shortName","longName","Error","error","console","Math","random","getQuotes","symbols","quotes","Promise","all","map","getHistoricalData","period","interval","timeSeries","dates","Object","keys","slice","date","dayData","close","mockData","i","setDate","getDate","push","getOptionsChain","searchSymbols","query","log","bestMatches","results","item","name","type","mockResults","getMarketSummary","majorStocks","getStockName","names"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/services/marketDataService.js"],"sourcesContent":["class MarketDataService {\r\n  constructor() {\r\n    // Using Alpha Vantage API (free tier available)\r\n    this.apiKey = 'demo'; // Replace with your Alpha Vantage API key\r\n    this.baseUrl = 'https://www.alphavantage.co/query';\r\n  }\r\n\r\n  // Get real-time quote for a single symbol\r\n  async getQuote(symbol) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      \r\n      if (data['Global Quote']) {\r\n        const quote = data['Global Quote'];\r\n        return {\r\n          symbol: quote['01. symbol'],\r\n          price: parseFloat(quote['05. price']),\r\n          change: parseFloat(quote['09. change']),\r\n          changePercent: parseFloat(quote['10. change percent'].replace('%', '')),\r\n          volume: parseInt(quote['06. volume']),\r\n          high: parseFloat(quote['03. high']),\r\n          low: parseFloat(quote['04. low']),\r\n          open: parseFloat(quote['02. open']),\r\n          previousClose: parseFloat(quote['08. previous close']),\r\n          timestamp: Date.now(),\r\n          currency: 'USD',\r\n          exchange: 'US',\r\n          shortName: symbol,\r\n          longName: symbol\r\n        };\r\n      }\r\n      throw new Error('No quote data available');\r\n    } catch (error) {\r\n      console.error(`Error fetching quote for ${symbol}:`, error);\r\n      // Return mock data for demo purposes\r\n      return {\r\n        symbol: symbol,\r\n        price: 150.00 + Math.random() * 50,\r\n        change: (Math.random() - 0.5) * 10,\r\n        changePercent: (Math.random() - 0.5) * 5,\r\n        volume: 1000000 + Math.random() * 5000000,\r\n        high: 160.00,\r\n        low: 140.00,\r\n        open: 155.00,\r\n        previousClose: 150.00,\r\n        timestamp: Date.now(),\r\n        currency: 'USD',\r\n        exchange: 'US',\r\n        shortName: symbol,\r\n        longName: symbol\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get quotes for multiple symbols\r\n  async getQuotes(symbols) {\r\n    try {\r\n      const quotes = await Promise.all(\r\n        symbols.map(symbol => this.getQuote(symbol))\r\n      );\r\n      return quotes;\r\n    } catch (error) {\r\n      console.error('Error fetching quotes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get historical data for a symbol\r\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      \r\n      if (data['Time Series (Daily)']) {\r\n        const timeSeries = data['Time Series (Daily)'];\r\n        const dates = Object.keys(timeSeries).slice(0, 30); // Last 30 days\r\n        \r\n        return dates.map(date => {\r\n          const dayData = timeSeries[date];\r\n          return {\r\n            date: new Date(date),\r\n            open: parseFloat(dayData['1. open']),\r\n            high: parseFloat(dayData['2. high']),\r\n            low: parseFloat(dayData['3. low']),\r\n            close: parseFloat(dayData['4. close']),\r\n            volume: parseInt(dayData['5. volume'])\r\n          };\r\n        });\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching historical data for ${symbol}:`, error);\r\n      // Return mock data for demo purposes\r\n      const mockData = [];\r\n      for (let i = 30; i > 0; i--) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - i);\r\n        mockData.push({\r\n          date: date,\r\n          open: 150 + Math.random() * 10,\r\n          high: 155 + Math.random() * 10,\r\n          low: 145 + Math.random() * 10,\r\n          close: 150 + Math.random() * 10,\r\n          volume: 1000000 + Math.random() * 2000000\r\n        });\r\n      }\r\n      return mockData;\r\n    }\r\n  }\r\n\r\n  // Get options chain for a symbol\r\n  async getOptionsChain(symbol) {\r\n    try {\r\n      // Alpha Vantage doesn't provide options data in the free tier\r\n      // This is a placeholder - you'd need a paid plan for options data\r\n      throw new Error('Options data requires a paid Alpha Vantage plan');\r\n    } catch (error) {\r\n      console.error(`Error fetching options chain for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search for symbols\r\n  async searchSymbols(query) {\r\n    try {\r\n      console.log('Searching for:', query);\r\n      const response = await fetch(`${this.baseUrl}?function=SYMBOL_SEARCH&keywords=${query}&apikey=${this.apiKey}`);\r\n      const data = await response.json();\r\n      console.log('API response:', data);\r\n      \r\n      if (data.bestMatches) {\r\n        const results = data.bestMatches.map(item => ({\r\n          symbol: item['1. symbol'],\r\n          name: item['2. name'],\r\n          exchange: item['4. region'],\r\n          type: item['3. type']\r\n        }));\r\n        console.log('Processed results:', results);\r\n        return results;\r\n      }\r\n      \r\n      // If API fails or returns no results, return mock data for testing\r\n      console.log('No API results, returning mock data');\r\n      const mockResults = [\r\n        {\r\n          symbol: 'SPY',\r\n          name: 'SPDR S&P 500 ETF Trust',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXL',\r\n          name: 'Direxion Daily S&P 500 Bull 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXS',\r\n          name: 'Direxion Daily S&P 500 Bear 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        }\r\n      ];\r\n      return mockResults;\r\n    } catch (error) {\r\n      console.error('Error searching symbols:', error);\r\n      // Return mock data for testing\r\n      const mockResults = [\r\n        {\r\n          symbol: 'SPY',\r\n          name: 'SPDR S&P 500 ETF Trust',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXL',\r\n          name: 'Direxion Daily S&P 500 Bull 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        },\r\n        {\r\n          symbol: 'SPXS',\r\n          name: 'Direxion Daily S&P 500 Bear 3X Shares',\r\n          exchange: 'US',\r\n          type: 'ETF'\r\n        }\r\n      ];\r\n      return mockResults;\r\n    }\r\n  }\r\n\r\n  // Get market summary (major indices)\r\n  async getMarketSummary() {\r\n    // Use major stock symbols for market overview\r\n    const majorStocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\r\n    try {\r\n      const quotes = await this.getQuotes(majorStocks);\r\n      return quotes.map(quote => ({\r\n        symbol: quote.symbol,\r\n        name: this.getStockName(quote.symbol),\r\n        price: quote.price,\r\n        change: quote.change,\r\n        changePercent: quote.changePercent,\r\n        volume: quote.volume\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching market summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getStockName(symbol) {\r\n    const names = {\r\n      'AAPL': 'Apple Inc.',\r\n      'MSFT': 'Microsoft Corporation',\r\n      'GOOGL': 'Alphabet Inc.',\r\n      'AMZN': 'Amazon.com Inc.',\r\n      'TSLA': 'Tesla Inc.'\r\n    };\r\n    return names[symbol] || symbol;\r\n  }\r\n}\r\n\r\nexport default new MarketDataService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}