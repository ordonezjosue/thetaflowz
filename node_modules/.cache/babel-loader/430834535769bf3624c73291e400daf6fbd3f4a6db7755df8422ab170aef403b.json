{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ordon\\\\ThetaFlowz_Cursor\\\\src\\\\contexts\\\\MarketDataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport marketDataService from '../services/marketDataService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarketDataContext = /*#__PURE__*/createContext();\nexport const useMarketData = () => {\n  _s();\n  const context = useContext(MarketDataContext);\n  if (!context) {\n    throw new Error('useMarketData must be used within a MarketDataProvider');\n  }\n  return context;\n};\n_s(useMarketData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MarketDataProvider = ({\n  children\n}) => {\n  _s2();\n  const [marketSummary, setMarketSummary] = useState([]);\n  const [watchlist, setWatchlist] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // Load initial watchlist from localStorage\n  useEffect(() => {\n    const savedWatchlist = localStorage.getItem('thetaflowz-watchlist');\n    if (savedWatchlist) {\n      try {\n        setWatchlist(JSON.parse(savedWatchlist));\n      } catch (error) {\n        console.error('Error loading watchlist from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save watchlist to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('thetaflowz-watchlist', JSON.stringify(watchlist));\n  }, [watchlist]);\n\n  // Fetch market summary\n  const fetchMarketSummary = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const summary = await marketDataService.getMarketSummary();\n      setMarketSummary(summary);\n      setLastUpdate(new Date());\n    } catch (error) {\n      setError('Failed to fetch market summary');\n      console.error('Error fetching market summary:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch watchlist quotes\n  const fetchWatchlistQuotes = useCallback(async () => {\n    if (watchlist.length === 0) return;\n    try {\n      setLoading(true);\n      setError(null);\n      const symbols = watchlist.map(item => item.symbol);\n      const quotes = await marketDataService.getQuotes(symbols);\n      const updatedWatchlist = watchlist.map((item, index) => ({\n        ...item,\n        ...quotes[index]\n      }));\n      setWatchlist(updatedWatchlist);\n      setLastUpdate(new Date());\n    } catch (error) {\n      setError('Failed to fetch watchlist quotes');\n      console.error('Error fetching watchlist quotes:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [watchlist]);\n\n  // Add symbol to watchlist\n  const addToWatchlist = useCallback(async symbol => {\n    try {\n      const quote = await marketDataService.getQuote(symbol);\n      const newItem = {\n        symbol: quote.symbol,\n        name: quote.shortName || quote.longName || symbol,\n        price: quote.price,\n        change: quote.change,\n        changePercent: quote.changePercent,\n        addedAt: new Date().toISOString()\n      };\n      setWatchlist(prev => {\n        const exists = prev.find(item => item.symbol === symbol);\n        if (exists) return prev;\n        return [...prev, newItem];\n      });\n    } catch (error) {\n      setError(`Failed to add ${symbol} to watchlist`);\n      console.error(`Error adding ${symbol} to watchlist:`, error);\n    }\n  }, []);\n\n  // Remove symbol from watchlist\n  const removeFromWatchlist = useCallback(symbol => {\n    setWatchlist(prev => prev.filter(item => item.symbol !== symbol));\n  }, []);\n\n  // Search for symbols\n  const searchSymbols = useCallback(async query => {\n    try {\n      setLoading(true);\n      setError(null);\n      const results = await marketDataService.searchSymbols(query);\n      return results;\n    } catch (error) {\n      setError('Failed to search symbols');\n      console.error('Error searching symbols:', error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get quote for a single symbol\n  const getQuote = useCallback(async symbol => {\n    try {\n      setLoading(true);\n      setError(null);\n      const quote = await marketDataService.getQuote(symbol);\n      return quote;\n    } catch (error) {\n      setError(`Failed to fetch quote for ${symbol}`);\n      console.error(`Error fetching quote for ${symbol}:`, error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get historical data\n  const getHistoricalData = useCallback(async (symbol, period = '1mo', interval = '1d') => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await marketDataService.getHistoricalData(symbol, period, interval);\n      return data;\n    } catch (error) {\n      setError(`Failed to fetch historical data for ${symbol}`);\n      console.error(`Error fetching historical data for ${symbol}:`, error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get options chain\n  const getOptionsChain = useCallback(async symbol => {\n    try {\n      setLoading(true);\n      setError(null);\n      const options = await marketDataService.getOptionsChain(symbol);\n      return options;\n    } catch (error) {\n      setError(`Failed to fetch options chain for ${symbol}`);\n      console.error(`Error fetching options chain for ${symbol}:`, error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Auto-refresh data every 30 seconds\n  useEffect(() => {\n    fetchMarketSummary();\n    fetchWatchlistQuotes();\n    const interval = setInterval(() => {\n      fetchMarketSummary();\n      fetchWatchlistQuotes();\n    }, 30000); // 30 seconds\n\n    return () => clearInterval(interval);\n  }, [fetchMarketSummary, fetchWatchlistQuotes]);\n  const value = {\n    marketSummary,\n    watchlist,\n    loading,\n    error,\n    lastUpdate,\n    addToWatchlist,\n    removeFromWatchlist,\n    searchSymbols,\n    getQuote,\n    getHistoricalData,\n    getOptionsChain,\n    fetchMarketSummary,\n    fetchWatchlistQuotes\n  };\n  return /*#__PURE__*/_jsxDEV(MarketDataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s2(MarketDataProvider, \"zxcgGgOfdYu1PFGqaHQ6ojGeaHI=\");\n_c = MarketDataProvider;\nvar _c;\n$RefreshReg$(_c, \"MarketDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","marketDataService","jsxDEV","_jsxDEV","MarketDataContext","useMarketData","_s","context","Error","MarketDataProvider","children","_s2","marketSummary","setMarketSummary","watchlist","setWatchlist","loading","setLoading","error","setError","lastUpdate","setLastUpdate","savedWatchlist","localStorage","getItem","JSON","parse","console","setItem","stringify","fetchMarketSummary","summary","getMarketSummary","Date","fetchWatchlistQuotes","length","symbols","map","item","symbol","quotes","getQuotes","updatedWatchlist","index","addToWatchlist","quote","getQuote","newItem","name","shortName","longName","price","change","changePercent","addedAt","toISOString","prev","exists","find","removeFromWatchlist","filter","searchSymbols","query","results","getHistoricalData","period","interval","data","getOptionsChain","options","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/contexts/MarketDataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport marketDataService from '../services/marketDataService';\r\n\r\nconst MarketDataContext = createContext();\r\n\r\nexport const useMarketData = () => {\r\n  const context = useContext(MarketDataContext);\r\n  if (!context) {\r\n    throw new Error('useMarketData must be used within a MarketDataProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MarketDataProvider = ({ children }) => {\r\n  const [marketSummary, setMarketSummary] = useState([]);\r\n  const [watchlist, setWatchlist] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [lastUpdate, setLastUpdate] = useState(null);\r\n\r\n  // Load initial watchlist from localStorage\r\n  useEffect(() => {\r\n    const savedWatchlist = localStorage.getItem('thetaflowz-watchlist');\r\n    if (savedWatchlist) {\r\n      try {\r\n        setWatchlist(JSON.parse(savedWatchlist));\r\n      } catch (error) {\r\n        console.error('Error loading watchlist from localStorage:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save watchlist to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('thetaflowz-watchlist', JSON.stringify(watchlist));\r\n  }, [watchlist]);\r\n\r\n  // Fetch market summary\r\n  const fetchMarketSummary = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const summary = await marketDataService.getMarketSummary();\r\n      setMarketSummary(summary);\r\n      setLastUpdate(new Date());\r\n    } catch (error) {\r\n      setError('Failed to fetch market summary');\r\n      console.error('Error fetching market summary:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch watchlist quotes\r\n  const fetchWatchlistQuotes = useCallback(async () => {\r\n    if (watchlist.length === 0) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const symbols = watchlist.map(item => item.symbol);\r\n      const quotes = await marketDataService.getQuotes(symbols);\r\n      \r\n      const updatedWatchlist = watchlist.map((item, index) => ({\r\n        ...item,\r\n        ...quotes[index]\r\n      }));\r\n      \r\n      setWatchlist(updatedWatchlist);\r\n      setLastUpdate(new Date());\r\n    } catch (error) {\r\n      setError('Failed to fetch watchlist quotes');\r\n      console.error('Error fetching watchlist quotes:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [watchlist]);\r\n\r\n  // Add symbol to watchlist\r\n  const addToWatchlist = useCallback(async (symbol) => {\r\n    try {\r\n      const quote = await marketDataService.getQuote(symbol);\r\n      const newItem = {\r\n        symbol: quote.symbol,\r\n        name: quote.shortName || quote.longName || symbol,\r\n        price: quote.price,\r\n        change: quote.change,\r\n        changePercent: quote.changePercent,\r\n        addedAt: new Date().toISOString()\r\n      };\r\n\r\n      setWatchlist(prev => {\r\n        const exists = prev.find(item => item.symbol === symbol);\r\n        if (exists) return prev;\r\n        return [...prev, newItem];\r\n      });\r\n    } catch (error) {\r\n      setError(`Failed to add ${symbol} to watchlist`);\r\n      console.error(`Error adding ${symbol} to watchlist:`, error);\r\n    }\r\n  }, []);\r\n\r\n  // Remove symbol from watchlist\r\n  const removeFromWatchlist = useCallback((symbol) => {\r\n    setWatchlist(prev => prev.filter(item => item.symbol !== symbol));\r\n  }, []);\r\n\r\n  // Search for symbols\r\n  const searchSymbols = useCallback(async (query) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const results = await marketDataService.searchSymbols(query);\r\n      return results;\r\n    } catch (error) {\r\n      setError('Failed to search symbols');\r\n      console.error('Error searching symbols:', error);\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Get quote for a single symbol\r\n  const getQuote = useCallback(async (symbol) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const quote = await marketDataService.getQuote(symbol);\r\n      return quote;\r\n    } catch (error) {\r\n      setError(`Failed to fetch quote for ${symbol}`);\r\n      console.error(`Error fetching quote for ${symbol}:`, error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Get historical data\r\n  const getHistoricalData = useCallback(async (symbol, period = '1mo', interval = '1d') => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const data = await marketDataService.getHistoricalData(symbol, period, interval);\r\n      return data;\r\n    } catch (error) {\r\n      setError(`Failed to fetch historical data for ${symbol}`);\r\n      console.error(`Error fetching historical data for ${symbol}:`, error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Get options chain\r\n  const getOptionsChain = useCallback(async (symbol) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const options = await marketDataService.getOptionsChain(symbol);\r\n      return options;\r\n    } catch (error) {\r\n      setError(`Failed to fetch options chain for ${symbol}`);\r\n      console.error(`Error fetching options chain for ${symbol}:`, error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Auto-refresh data every 30 seconds\r\n  useEffect(() => {\r\n    fetchMarketSummary();\r\n    fetchWatchlistQuotes();\r\n\r\n    const interval = setInterval(() => {\r\n      fetchMarketSummary();\r\n      fetchWatchlistQuotes();\r\n    }, 30000); // 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [fetchMarketSummary, fetchWatchlistQuotes]);\r\n\r\n  const value = {\r\n    marketSummary,\r\n    watchlist,\r\n    loading,\r\n    error,\r\n    lastUpdate,\r\n    addToWatchlist,\r\n    removeFromWatchlist,\r\n    searchSymbols,\r\n    getQuote,\r\n    getHistoricalData,\r\n    getOptionsChain,\r\n    fetchMarketSummary,\r\n    fetchWatchlistQuotes\r\n  };\r\n\r\n  return (\r\n    <MarketDataContext.Provider value={value}>\r\n      {children}\r\n    </MarketDataContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}