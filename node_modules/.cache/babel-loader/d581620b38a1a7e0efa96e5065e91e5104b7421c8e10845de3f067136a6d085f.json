{"ast":null,"code":"import * as ValueGuard from './value.mjs';\nimport { Kind, Hint, TransformKind, ReadonlyKind, OptionalKind } from '../symbols/index.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\nexport class TypeGuardUnknownTypeError extends TypeBoxError {}\nconst KnownTypes = ['Any', 'Array', 'AsyncIterator', 'BigInt', 'Boolean', 'Constructor', 'Date', 'Enum', 'Function', 'Integer', 'Intersect', 'Iterator', 'Literal', 'MappedKey', 'MappedResult', 'Not', 'Null', 'Number', 'Object', 'Promise', 'Record', 'Ref', 'RegExp', 'String', 'Symbol', 'TemplateLiteral', 'This', 'Tuple', 'Undefined', 'Union', 'Uint8Array', 'Unknown', 'Void'];\nfunction IsPattern(value) {\n  try {\n    new RegExp(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction IsControlCharacterFree(value) {\n  if (!ValueGuard.IsString(value)) return false;\n  for (let i = 0; i < value.length; i++) {\n    const code = value.charCodeAt(i);\n    if (code >= 7 && code <= 13 || code === 27 || code === 127) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction IsAdditionalProperties(value) {\n  return IsOptionalBoolean(value) || IsSchema(value);\n}\nfunction IsOptionalBigInt(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsBigInt(value);\n}\nfunction IsOptionalNumber(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsNumber(value);\n}\nfunction IsOptionalBoolean(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsBoolean(value);\n}\nfunction IsOptionalString(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value);\n}\nfunction IsOptionalPattern(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value) && IsControlCharacterFree(value) && IsPattern(value);\n}\nfunction IsOptionalFormat(value) {\n  return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value) && IsControlCharacterFree(value);\n}\nfunction IsOptionalSchema(value) {\n  return ValueGuard.IsUndefined(value) || IsSchema(value);\n}\n// ------------------------------------------------------------------\n// Modifiers\n// ------------------------------------------------------------------\n/** Returns true if this value has a Readonly symbol */\nexport function IsReadonly(value) {\n  return ValueGuard.IsObject(value) && value[ReadonlyKind] === 'Readonly';\n}\n/** Returns true if this value has a Optional symbol */\nexport function IsOptional(value) {\n  return ValueGuard.IsObject(value) && value[OptionalKind] === 'Optional';\n}\n// ------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------\n/** Returns true if the given value is TAny */\nexport function IsAny(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Any') && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TArray */\nexport function IsArray(value) {\n  return IsKindOf(value, 'Array') && value.type === 'array' && IsOptionalString(value.$id) && IsSchema(value.items) && IsOptionalNumber(value.minItems) && IsOptionalNumber(value.maxItems) && IsOptionalBoolean(value.uniqueItems) && IsOptionalSchema(value.contains) && IsOptionalNumber(value.minContains) && IsOptionalNumber(value.maxContains);\n}\n/** Returns true if the given value is TAsyncIterator */\nexport function IsAsyncIterator(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'AsyncIterator') && value.type === 'AsyncIterator' && IsOptionalString(value.$id) && IsSchema(value.items);\n}\n/** Returns true if the given value is TBigInt */\nexport function IsBigInt(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'BigInt') && value.type === 'bigint' && IsOptionalString(value.$id) && IsOptionalBigInt(value.exclusiveMaximum) && IsOptionalBigInt(value.exclusiveMinimum) && IsOptionalBigInt(value.maximum) && IsOptionalBigInt(value.minimum) && IsOptionalBigInt(value.multipleOf);\n}\n/** Returns true if the given value is TBoolean */\nexport function IsBoolean(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Boolean') && value.type === 'boolean' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TConstructor */\nexport function IsConstructor(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Constructor') && value.type === 'Constructor' && IsOptionalString(value.$id) && ValueGuard.IsArray(value.parameters) && value.parameters.every(schema => IsSchema(schema)) && IsSchema(value.returns);\n}\n/** Returns true if the given value is TDate */\nexport function IsDate(value) {\n  return IsKindOf(value, 'Date') && value.type === 'Date' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximumTimestamp) && IsOptionalNumber(value.exclusiveMinimumTimestamp) && IsOptionalNumber(value.maximumTimestamp) && IsOptionalNumber(value.minimumTimestamp) && IsOptionalNumber(value.multipleOfTimestamp);\n}\n/** Returns true if the given value is TFunction */\nexport function IsFunction(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Function') && value.type === 'Function' && IsOptionalString(value.$id) && ValueGuard.IsArray(value.parameters) && value.parameters.every(schema => IsSchema(schema)) && IsSchema(value.returns);\n}\n/** Returns true if the given value is TInteger */\nexport function IsInteger(value) {\n  return IsKindOf(value, 'Integer') && value.type === 'integer' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);\n}\n/** Returns true if the given schema is TProperties */\nexport function IsProperties(value) {\n  // prettier-ignore\n  return ValueGuard.IsObject(value) && Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema(schema));\n}\n/** Returns true if the given value is TIntersect */\nexport function IsIntersect(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Intersect') && (ValueGuard.IsString(value.type) && value.type !== 'object' ? false : true) && ValueGuard.IsArray(value.allOf) && value.allOf.every(schema => IsSchema(schema) && !IsTransform(schema)) && IsOptionalString(value.type) && (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TIterator */\nexport function IsIterator(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Iterator') && value.type === 'Iterator' && IsOptionalString(value.$id) && IsSchema(value.items);\n}\n/** Returns true if the given value is a TKind with the given name. */\nexport function IsKindOf(value, kind) {\n  return ValueGuard.IsObject(value) && Kind in value && value[Kind] === kind;\n}\n/** Returns true if the given value is TLiteral<string> */\nexport function IsLiteralString(value) {\n  return IsLiteral(value) && ValueGuard.IsString(value.const);\n}\n/** Returns true if the given value is TLiteral<number> */\nexport function IsLiteralNumber(value) {\n  return IsLiteral(value) && ValueGuard.IsNumber(value.const);\n}\n/** Returns true if the given value is TLiteral<boolean> */\nexport function IsLiteralBoolean(value) {\n  return IsLiteral(value) && ValueGuard.IsBoolean(value.const);\n}\n/** Returns true if the given value is TLiteral */\nexport function IsLiteral(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Literal') && IsOptionalString(value.$id) && IsLiteralValue(value.const);\n}\n/** Returns true if the given value is a TLiteralValue */\nexport function IsLiteralValue(value) {\n  return ValueGuard.IsBoolean(value) || ValueGuard.IsNumber(value) || ValueGuard.IsString(value);\n}\n/** Returns true if the given value is a TMappedKey */\nexport function IsMappedKey(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'MappedKey') && ValueGuard.IsArray(value.keys) && value.keys.every(key => ValueGuard.IsNumber(key) || ValueGuard.IsString(key));\n}\n/** Returns true if the given value is TMappedResult */\nexport function IsMappedResult(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'MappedResult') && IsProperties(value.properties);\n}\n/** Returns true if the given value is TNever */\nexport function IsNever(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Never') && ValueGuard.IsObject(value.not) && Object.getOwnPropertyNames(value.not).length === 0;\n}\n/** Returns true if the given value is TNot */\nexport function IsNot(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Not') && IsSchema(value.not);\n}\n/** Returns true if the given value is TNull */\nexport function IsNull(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Null') && value.type === 'null' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TNumber */\nexport function IsNumber(value) {\n  return IsKindOf(value, 'Number') && value.type === 'number' && IsOptionalString(value.$id) && IsOptionalNumber(value.exclusiveMaximum) && IsOptionalNumber(value.exclusiveMinimum) && IsOptionalNumber(value.maximum) && IsOptionalNumber(value.minimum) && IsOptionalNumber(value.multipleOf);\n}\n/** Returns true if the given value is TObject */\nexport function IsObject(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Object') && value.type === 'object' && IsOptionalString(value.$id) && IsProperties(value.properties) && IsAdditionalProperties(value.additionalProperties) && IsOptionalNumber(value.minProperties) && IsOptionalNumber(value.maxProperties);\n}\n/** Returns true if the given value is TPromise */\nexport function IsPromise(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Promise') && value.type === 'Promise' && IsOptionalString(value.$id) && IsSchema(value.item);\n}\n/** Returns true if the given value is TRecord */\nexport function IsRecord(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Record') && value.type === 'object' && IsOptionalString(value.$id) && IsAdditionalProperties(value.additionalProperties) && ValueGuard.IsObject(value.patternProperties) && (schema => {\n    const keys = Object.getOwnPropertyNames(schema.patternProperties);\n    return keys.length === 1 && IsPattern(keys[0]) && ValueGuard.IsObject(schema.patternProperties) && IsSchema(schema.patternProperties[keys[0]]);\n  })(value);\n}\n/** Returns true if this value is TRecursive */\nexport function IsRecursive(value) {\n  return ValueGuard.IsObject(value) && Hint in value && value[Hint] === 'Recursive';\n}\n/** Returns true if the given value is TRef */\nexport function IsRef(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Ref') && IsOptionalString(value.$id) && ValueGuard.IsString(value.$ref);\n}\n/** Returns true if the given value is TRegExp */\nexport function IsRegExp(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'RegExp') && IsOptionalString(value.$id) && ValueGuard.IsString(value.source) && ValueGuard.IsString(value.flags) && IsOptionalNumber(value.maxLength) && IsOptionalNumber(value.minLength);\n}\n/** Returns true if the given value is TString */\nexport function IsString(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'String') && value.type === 'string' && IsOptionalString(value.$id) && IsOptionalNumber(value.minLength) && IsOptionalNumber(value.maxLength) && IsOptionalPattern(value.pattern) && IsOptionalFormat(value.format);\n}\n/** Returns true if the given value is TSymbol */\nexport function IsSymbol(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Symbol') && value.type === 'symbol' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TTemplateLiteral */\nexport function IsTemplateLiteral(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'TemplateLiteral') && value.type === 'string' && ValueGuard.IsString(value.pattern) && value.pattern[0] === '^' && value.pattern[value.pattern.length - 1] === '$';\n}\n/** Returns true if the given value is TThis */\nexport function IsThis(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'This') && IsOptionalString(value.$id) && ValueGuard.IsString(value.$ref);\n}\n/** Returns true of this value is TTransform */\nexport function IsTransform(value) {\n  return ValueGuard.IsObject(value) && TransformKind in value;\n}\n/** Returns true if the given value is TTuple */\nexport function IsTuple(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Tuple') && value.type === 'array' && IsOptionalString(value.$id) && ValueGuard.IsNumber(value.minItems) && ValueGuard.IsNumber(value.maxItems) && value.minItems === value.maxItems && (\n  // empty\n  ValueGuard.IsUndefined(value.items) && ValueGuard.IsUndefined(value.additionalItems) && value.minItems === 0 || ValueGuard.IsArray(value.items) && value.items.every(schema => IsSchema(schema)));\n}\n/** Returns true if the given value is TUndefined */\nexport function IsUndefined(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Undefined') && value.type === 'undefined' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TUnion<Literal<string | number>[]> */\nexport function IsUnionLiteral(value) {\n  return IsUnion(value) && value.anyOf.every(schema => IsLiteralString(schema) || IsLiteralNumber(schema));\n}\n/** Returns true if the given value is TUnion */\nexport function IsUnion(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Union') && IsOptionalString(value.$id) && ValueGuard.IsObject(value) && ValueGuard.IsArray(value.anyOf) && value.anyOf.every(schema => IsSchema(schema));\n}\n/** Returns true if the given value is TUint8Array */\nexport function IsUint8Array(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Uint8Array') && value.type === 'Uint8Array' && IsOptionalString(value.$id) && IsOptionalNumber(value.minByteLength) && IsOptionalNumber(value.maxByteLength);\n}\n/** Returns true if the given value is TUnknown */\nexport function IsUnknown(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Unknown') && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is a raw TUnsafe */\nexport function IsUnsafe(value) {\n  return IsKindOf(value, 'Unsafe');\n}\n/** Returns true if the given value is TVoid */\nexport function IsVoid(value) {\n  // prettier-ignore\n  return IsKindOf(value, 'Void') && value.type === 'void' && IsOptionalString(value.$id);\n}\n/** Returns true if the given value is TKind */\nexport function IsKind(value) {\n  return ValueGuard.IsObject(value) && Kind in value && ValueGuard.IsString(value[Kind]) && !KnownTypes.includes(value[Kind]);\n}\n/** Returns true if the given value is TSchema */\nexport function IsSchema(value) {\n  // prettier-ignore\n  return ValueGuard.IsObject(value) && (IsAny(value) || IsArray(value) || IsBoolean(value) || IsBigInt(value) || IsAsyncIterator(value) || IsConstructor(value) || IsDate(value) || IsFunction(value) || IsInteger(value) || IsIntersect(value) || IsIterator(value) || IsLiteral(value) || IsMappedKey(value) || IsMappedResult(value) || IsNever(value) || IsNot(value) || IsNull(value) || IsNumber(value) || IsObject(value) || IsPromise(value) || IsRecord(value) || IsRef(value) || IsRegExp(value) || IsString(value) || IsSymbol(value) || IsTemplateLiteral(value) || IsThis(value) || IsTuple(value) || IsUndefined(value) || IsUnion(value) || IsUint8Array(value) || IsUnknown(value) || IsUnsafe(value) || IsVoid(value) || IsKind(value));\n}","map":{"version":3,"names":["ValueGuard","Kind","Hint","TransformKind","ReadonlyKind","OptionalKind","TypeBoxError","TypeGuardUnknownTypeError","KnownTypes","IsPattern","value","RegExp","IsControlCharacterFree","IsString","i","length","code","charCodeAt","IsAdditionalProperties","IsOptionalBoolean","IsSchema","IsOptionalBigInt","IsUndefined","IsBigInt","IsOptionalNumber","IsNumber","IsBoolean","IsOptionalString","IsOptionalPattern","IsOptionalFormat","IsOptionalSchema","IsReadonly","IsObject","IsOptional","IsAny","IsKindOf","$id","IsArray","type","items","minItems","maxItems","uniqueItems","contains","minContains","maxContains","IsAsyncIterator","exclusiveMaximum","exclusiveMinimum","maximum","minimum","multipleOf","IsConstructor","parameters","every","schema","returns","IsDate","exclusiveMaximumTimestamp","exclusiveMinimumTimestamp","maximumTimestamp","minimumTimestamp","multipleOfTimestamp","IsFunction","IsInteger","IsProperties","Object","entries","key","IsIntersect","allOf","IsTransform","unevaluatedProperties","IsIterator","kind","IsLiteralString","IsLiteral","const","IsLiteralNumber","IsLiteralBoolean","IsLiteralValue","IsMappedKey","keys","IsMappedResult","properties","IsNever","not","getOwnPropertyNames","IsNot","IsNull","additionalProperties","minProperties","maxProperties","IsPromise","item","IsRecord","patternProperties","IsRecursive","IsRef","$ref","IsRegExp","source","flags","maxLength","minLength","pattern","format","IsSymbol","IsTemplateLiteral","IsThis","IsTuple","additionalItems","IsUnionLiteral","IsUnion","anyOf","IsUint8Array","minByteLength","maxByteLength","IsUnknown","IsUnsafe","IsVoid","IsKind","includes"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/guard/type.mjs"],"sourcesContent":["import * as ValueGuard from './value.mjs';\nimport { Kind, Hint, TransformKind, ReadonlyKind, OptionalKind } from '../symbols/index.mjs';\nimport { TypeBoxError } from '../error/index.mjs';\nexport class TypeGuardUnknownTypeError extends TypeBoxError {\n}\nconst KnownTypes = [\n    'Any',\n    'Array',\n    'AsyncIterator',\n    'BigInt',\n    'Boolean',\n    'Constructor',\n    'Date',\n    'Enum',\n    'Function',\n    'Integer',\n    'Intersect',\n    'Iterator',\n    'Literal',\n    'MappedKey',\n    'MappedResult',\n    'Not',\n    'Null',\n    'Number',\n    'Object',\n    'Promise',\n    'Record',\n    'Ref',\n    'RegExp',\n    'String',\n    'Symbol',\n    'TemplateLiteral',\n    'This',\n    'Tuple',\n    'Undefined',\n    'Union',\n    'Uint8Array',\n    'Unknown',\n    'Void',\n];\nfunction IsPattern(value) {\n    try {\n        new RegExp(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction IsControlCharacterFree(value) {\n    if (!ValueGuard.IsString(value))\n        return false;\n    for (let i = 0; i < value.length; i++) {\n        const code = value.charCodeAt(i);\n        if ((code >= 7 && code <= 13) || code === 27 || code === 127) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction IsAdditionalProperties(value) {\n    return IsOptionalBoolean(value) || IsSchema(value);\n}\nfunction IsOptionalBigInt(value) {\n    return ValueGuard.IsUndefined(value) || ValueGuard.IsBigInt(value);\n}\nfunction IsOptionalNumber(value) {\n    return ValueGuard.IsUndefined(value) || ValueGuard.IsNumber(value);\n}\nfunction IsOptionalBoolean(value) {\n    return ValueGuard.IsUndefined(value) || ValueGuard.IsBoolean(value);\n}\nfunction IsOptionalString(value) {\n    return ValueGuard.IsUndefined(value) || ValueGuard.IsString(value);\n}\nfunction IsOptionalPattern(value) {\n    return ValueGuard.IsUndefined(value) || (ValueGuard.IsString(value) && IsControlCharacterFree(value) && IsPattern(value));\n}\nfunction IsOptionalFormat(value) {\n    return ValueGuard.IsUndefined(value) || (ValueGuard.IsString(value) && IsControlCharacterFree(value));\n}\nfunction IsOptionalSchema(value) {\n    return ValueGuard.IsUndefined(value) || IsSchema(value);\n}\n// ------------------------------------------------------------------\n// Modifiers\n// ------------------------------------------------------------------\n/** Returns true if this value has a Readonly symbol */\nexport function IsReadonly(value) {\n    return ValueGuard.IsObject(value) && value[ReadonlyKind] === 'Readonly';\n}\n/** Returns true if this value has a Optional symbol */\nexport function IsOptional(value) {\n    return ValueGuard.IsObject(value) && value[OptionalKind] === 'Optional';\n}\n// ------------------------------------------------------------------\n// Types\n// ------------------------------------------------------------------\n/** Returns true if the given value is TAny */\nexport function IsAny(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Any') &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TArray */\nexport function IsArray(value) {\n    return (IsKindOf(value, 'Array') &&\n        value.type === 'array' &&\n        IsOptionalString(value.$id) &&\n        IsSchema(value.items) &&\n        IsOptionalNumber(value.minItems) &&\n        IsOptionalNumber(value.maxItems) &&\n        IsOptionalBoolean(value.uniqueItems) &&\n        IsOptionalSchema(value.contains) &&\n        IsOptionalNumber(value.minContains) &&\n        IsOptionalNumber(value.maxContains));\n}\n/** Returns true if the given value is TAsyncIterator */\nexport function IsAsyncIterator(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'AsyncIterator') &&\n        value.type === 'AsyncIterator' &&\n        IsOptionalString(value.$id) &&\n        IsSchema(value.items));\n}\n/** Returns true if the given value is TBigInt */\nexport function IsBigInt(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'BigInt') &&\n        value.type === 'bigint' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalBigInt(value.exclusiveMaximum) &&\n        IsOptionalBigInt(value.exclusiveMinimum) &&\n        IsOptionalBigInt(value.maximum) &&\n        IsOptionalBigInt(value.minimum) &&\n        IsOptionalBigInt(value.multipleOf));\n}\n/** Returns true if the given value is TBoolean */\nexport function IsBoolean(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Boolean') &&\n        value.type === 'boolean' &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TConstructor */\nexport function IsConstructor(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Constructor') &&\n        value.type === 'Constructor' &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsArray(value.parameters) &&\n        value.parameters.every(schema => IsSchema(schema)) &&\n        IsSchema(value.returns));\n}\n/** Returns true if the given value is TDate */\nexport function IsDate(value) {\n    return (IsKindOf(value, 'Date') &&\n        value.type === 'Date' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalNumber(value.exclusiveMaximumTimestamp) &&\n        IsOptionalNumber(value.exclusiveMinimumTimestamp) &&\n        IsOptionalNumber(value.maximumTimestamp) &&\n        IsOptionalNumber(value.minimumTimestamp) &&\n        IsOptionalNumber(value.multipleOfTimestamp));\n}\n/** Returns true if the given value is TFunction */\nexport function IsFunction(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Function') &&\n        value.type === 'Function' &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsArray(value.parameters) &&\n        value.parameters.every(schema => IsSchema(schema)) &&\n        IsSchema(value.returns));\n}\n/** Returns true if the given value is TInteger */\nexport function IsInteger(value) {\n    return (IsKindOf(value, 'Integer') &&\n        value.type === 'integer' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalNumber(value.exclusiveMaximum) &&\n        IsOptionalNumber(value.exclusiveMinimum) &&\n        IsOptionalNumber(value.maximum) &&\n        IsOptionalNumber(value.minimum) &&\n        IsOptionalNumber(value.multipleOf));\n}\n/** Returns true if the given schema is TProperties */\nexport function IsProperties(value) {\n    // prettier-ignore\n    return (ValueGuard.IsObject(value) &&\n        Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && IsSchema(schema)));\n}\n/** Returns true if the given value is TIntersect */\nexport function IsIntersect(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Intersect') &&\n        (ValueGuard.IsString(value.type) && value.type !== 'object' ? false : true) &&\n        ValueGuard.IsArray(value.allOf) &&\n        value.allOf.every(schema => IsSchema(schema) && !IsTransform(schema)) &&\n        IsOptionalString(value.type) &&\n        (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TIterator */\nexport function IsIterator(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Iterator') &&\n        value.type === 'Iterator' &&\n        IsOptionalString(value.$id) &&\n        IsSchema(value.items));\n}\n/** Returns true if the given value is a TKind with the given name. */\nexport function IsKindOf(value, kind) {\n    return ValueGuard.IsObject(value) && Kind in value && value[Kind] === kind;\n}\n/** Returns true if the given value is TLiteral<string> */\nexport function IsLiteralString(value) {\n    return IsLiteral(value) && ValueGuard.IsString(value.const);\n}\n/** Returns true if the given value is TLiteral<number> */\nexport function IsLiteralNumber(value) {\n    return IsLiteral(value) && ValueGuard.IsNumber(value.const);\n}\n/** Returns true if the given value is TLiteral<boolean> */\nexport function IsLiteralBoolean(value) {\n    return IsLiteral(value) && ValueGuard.IsBoolean(value.const);\n}\n/** Returns true if the given value is TLiteral */\nexport function IsLiteral(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Literal') &&\n        IsOptionalString(value.$id) && IsLiteralValue(value.const));\n}\n/** Returns true if the given value is a TLiteralValue */\nexport function IsLiteralValue(value) {\n    return ValueGuard.IsBoolean(value) || ValueGuard.IsNumber(value) || ValueGuard.IsString(value);\n}\n/** Returns true if the given value is a TMappedKey */\nexport function IsMappedKey(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'MappedKey') &&\n        ValueGuard.IsArray(value.keys) &&\n        value.keys.every(key => ValueGuard.IsNumber(key) || ValueGuard.IsString(key)));\n}\n/** Returns true if the given value is TMappedResult */\nexport function IsMappedResult(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'MappedResult') &&\n        IsProperties(value.properties));\n}\n/** Returns true if the given value is TNever */\nexport function IsNever(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Never') &&\n        ValueGuard.IsObject(value.not) &&\n        Object.getOwnPropertyNames(value.not).length === 0);\n}\n/** Returns true if the given value is TNot */\nexport function IsNot(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Not') &&\n        IsSchema(value.not));\n}\n/** Returns true if the given value is TNull */\nexport function IsNull(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Null') &&\n        value.type === 'null' &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TNumber */\nexport function IsNumber(value) {\n    return (IsKindOf(value, 'Number') &&\n        value.type === 'number' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalNumber(value.exclusiveMaximum) &&\n        IsOptionalNumber(value.exclusiveMinimum) &&\n        IsOptionalNumber(value.maximum) &&\n        IsOptionalNumber(value.minimum) &&\n        IsOptionalNumber(value.multipleOf));\n}\n/** Returns true if the given value is TObject */\nexport function IsObject(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Object') &&\n        value.type === 'object' &&\n        IsOptionalString(value.$id) &&\n        IsProperties(value.properties) &&\n        IsAdditionalProperties(value.additionalProperties) &&\n        IsOptionalNumber(value.minProperties) &&\n        IsOptionalNumber(value.maxProperties));\n}\n/** Returns true if the given value is TPromise */\nexport function IsPromise(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Promise') &&\n        value.type === 'Promise' &&\n        IsOptionalString(value.$id) &&\n        IsSchema(value.item));\n}\n/** Returns true if the given value is TRecord */\nexport function IsRecord(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Record') &&\n        value.type === 'object' &&\n        IsOptionalString(value.$id) &&\n        IsAdditionalProperties(value.additionalProperties) &&\n        ValueGuard.IsObject(value.patternProperties) &&\n        ((schema) => {\n            const keys = Object.getOwnPropertyNames(schema.patternProperties);\n            return (keys.length === 1 &&\n                IsPattern(keys[0]) &&\n                ValueGuard.IsObject(schema.patternProperties) &&\n                IsSchema(schema.patternProperties[keys[0]]));\n        })(value));\n}\n/** Returns true if this value is TRecursive */\nexport function IsRecursive(value) {\n    return ValueGuard.IsObject(value) && Hint in value && value[Hint] === 'Recursive';\n}\n/** Returns true if the given value is TRef */\nexport function IsRef(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Ref') &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsString(value.$ref));\n}\n/** Returns true if the given value is TRegExp */\nexport function IsRegExp(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'RegExp') &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsString(value.source) &&\n        ValueGuard.IsString(value.flags) &&\n        IsOptionalNumber(value.maxLength) &&\n        IsOptionalNumber(value.minLength));\n}\n/** Returns true if the given value is TString */\nexport function IsString(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'String') &&\n        value.type === 'string' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalNumber(value.minLength) &&\n        IsOptionalNumber(value.maxLength) &&\n        IsOptionalPattern(value.pattern) &&\n        IsOptionalFormat(value.format));\n}\n/** Returns true if the given value is TSymbol */\nexport function IsSymbol(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Symbol') &&\n        value.type === 'symbol' &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TTemplateLiteral */\nexport function IsTemplateLiteral(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'TemplateLiteral') &&\n        value.type === 'string' &&\n        ValueGuard.IsString(value.pattern) &&\n        value.pattern[0] === '^' &&\n        value.pattern[value.pattern.length - 1] === '$');\n}\n/** Returns true if the given value is TThis */\nexport function IsThis(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'This') &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsString(value.$ref));\n}\n/** Returns true of this value is TTransform */\nexport function IsTransform(value) {\n    return ValueGuard.IsObject(value) && TransformKind in value;\n}\n/** Returns true if the given value is TTuple */\nexport function IsTuple(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Tuple') &&\n        value.type === 'array' &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsNumber(value.minItems) &&\n        ValueGuard.IsNumber(value.maxItems) &&\n        value.minItems === value.maxItems &&\n        (( // empty\n        ValueGuard.IsUndefined(value.items) &&\n            ValueGuard.IsUndefined(value.additionalItems) &&\n            value.minItems === 0) || (ValueGuard.IsArray(value.items) &&\n            value.items.every(schema => IsSchema(schema)))));\n}\n/** Returns true if the given value is TUndefined */\nexport function IsUndefined(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Undefined') &&\n        value.type === 'undefined' &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TUnion<Literal<string | number>[]> */\nexport function IsUnionLiteral(value) {\n    return IsUnion(value) && value.anyOf.every((schema) => IsLiteralString(schema) || IsLiteralNumber(schema));\n}\n/** Returns true if the given value is TUnion */\nexport function IsUnion(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Union') &&\n        IsOptionalString(value.$id) &&\n        ValueGuard.IsObject(value) &&\n        ValueGuard.IsArray(value.anyOf) &&\n        value.anyOf.every(schema => IsSchema(schema)));\n}\n/** Returns true if the given value is TUint8Array */\nexport function IsUint8Array(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Uint8Array') &&\n        value.type === 'Uint8Array' &&\n        IsOptionalString(value.$id) &&\n        IsOptionalNumber(value.minByteLength) &&\n        IsOptionalNumber(value.maxByteLength));\n}\n/** Returns true if the given value is TUnknown */\nexport function IsUnknown(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Unknown') &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is a raw TUnsafe */\nexport function IsUnsafe(value) {\n    return IsKindOf(value, 'Unsafe');\n}\n/** Returns true if the given value is TVoid */\nexport function IsVoid(value) {\n    // prettier-ignore\n    return (IsKindOf(value, 'Void') &&\n        value.type === 'void' &&\n        IsOptionalString(value.$id));\n}\n/** Returns true if the given value is TKind */\nexport function IsKind(value) {\n    return ValueGuard.IsObject(value) && Kind in value && ValueGuard.IsString(value[Kind]) && !KnownTypes.includes(value[Kind]);\n}\n/** Returns true if the given value is TSchema */\nexport function IsSchema(value) {\n    // prettier-ignore\n    return (ValueGuard.IsObject(value)) && (IsAny(value) ||\n        IsArray(value) ||\n        IsBoolean(value) ||\n        IsBigInt(value) ||\n        IsAsyncIterator(value) ||\n        IsConstructor(value) ||\n        IsDate(value) ||\n        IsFunction(value) ||\n        IsInteger(value) ||\n        IsIntersect(value) ||\n        IsIterator(value) ||\n        IsLiteral(value) ||\n        IsMappedKey(value) ||\n        IsMappedResult(value) ||\n        IsNever(value) ||\n        IsNot(value) ||\n        IsNull(value) ||\n        IsNumber(value) ||\n        IsObject(value) ||\n        IsPromise(value) ||\n        IsRecord(value) ||\n        IsRef(value) ||\n        IsRegExp(value) ||\n        IsString(value) ||\n        IsSymbol(value) ||\n        IsTemplateLiteral(value) ||\n        IsThis(value) ||\n        IsTuple(value) ||\n        IsUndefined(value) ||\n        IsUnion(value) ||\n        IsUint8Array(value) ||\n        IsUnknown(value) ||\n        IsUnsafe(value) ||\n        IsVoid(value) ||\n        IsKind(value));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}