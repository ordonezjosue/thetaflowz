{"ast":null,"code":"import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsIntersect, IsUnion, IsPromise } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n  return T.map(L => AwaitedResolve(L));\n}\n// prettier-ignore\nfunction FromIntersect(T) {\n  return Intersect(FromRest(T));\n}\n// prettier-ignore\nfunction FromUnion(T) {\n  return Union(FromRest(T));\n}\n// prettier-ignore\nfunction FromPromise(T) {\n  return AwaitedResolve(T);\n}\n// ----------------------------------------------------------------\n// AwaitedResolve\n// ----------------------------------------------------------------\n// prettier-ignore\nfunction AwaitedResolve(T) {\n  return IsIntersect(T) ? FromIntersect(T.allOf) : IsUnion(T) ? FromUnion(T.anyOf) : IsPromise(T) ? FromPromise(T.item) : T;\n}\n/** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */\nexport function Awaited(T, options = {}) {\n  return CloneType(AwaitedResolve(T), options);\n}","map":{"version":3,"names":["Intersect","Union","CloneType","IsIntersect","IsUnion","IsPromise","FromRest","T","map","L","AwaitedResolve","FromIntersect","FromUnion","FromPromise","allOf","anyOf","item","Awaited","options"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/awaited/awaited.mjs"],"sourcesContent":["import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsIntersect, IsUnion, IsPromise } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => AwaitedResolve(L));\n}\n// prettier-ignore\nfunction FromIntersect(T) {\n    return Intersect(FromRest(T));\n}\n// prettier-ignore\nfunction FromUnion(T) {\n    return Union(FromRest(T));\n}\n// prettier-ignore\nfunction FromPromise(T) {\n    return AwaitedResolve(T);\n}\n// ----------------------------------------------------------------\n// AwaitedResolve\n// ----------------------------------------------------------------\n// prettier-ignore\nfunction AwaitedResolve(T) {\n    return (IsIntersect(T) ? FromIntersect(T.allOf) :\n        IsUnion(T) ? FromUnion(T.anyOf) :\n            IsPromise(T) ? FromPromise(T.item) :\n                T);\n}\n/** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */\nexport function Awaited(T, options = {}) {\n    return CloneType(AwaitedResolve(T), options);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,SAAS,QAAQ,mBAAmB;AAC7C;AACA;AACA;AACA,SAASC,WAAW,EAAEC,OAAO,EAAEC,SAAS,QAAQ,mBAAmB;AACnE;AACA,SAASC,QAAQA,CAACC,CAAC,EAAE;EACjB,OAAOA,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,cAAc,CAACD,CAAC,CAAC,CAAC;AACxC;AACA;AACA,SAASE,aAAaA,CAACJ,CAAC,EAAE;EACtB,OAAOP,SAAS,CAACM,QAAQ,CAACC,CAAC,CAAC,CAAC;AACjC;AACA;AACA,SAASK,SAASA,CAACL,CAAC,EAAE;EAClB,OAAON,KAAK,CAACK,QAAQ,CAACC,CAAC,CAAC,CAAC;AAC7B;AACA;AACA,SAASM,WAAWA,CAACN,CAAC,EAAE;EACpB,OAAOG,cAAc,CAACH,CAAC,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CAACH,CAAC,EAAE;EACvB,OAAQJ,WAAW,CAACI,CAAC,CAAC,GAAGI,aAAa,CAACJ,CAAC,CAACO,KAAK,CAAC,GAC3CV,OAAO,CAACG,CAAC,CAAC,GAAGK,SAAS,CAACL,CAAC,CAACQ,KAAK,CAAC,GAC3BV,SAAS,CAACE,CAAC,CAAC,GAAGM,WAAW,CAACN,CAAC,CAACS,IAAI,CAAC,GAC9BT,CAAC;AACjB;AACA;AACA,OAAO,SAASU,OAAOA,CAACV,CAAC,EAAEW,OAAO,GAAG,CAAC,CAAC,EAAE;EACrC,OAAOhB,SAAS,CAACQ,cAAc,CAACH,CAAC,CAAC,EAAEW,OAAO,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}