{"ast":null,"code":"// --------------------------------------------------------------------------\n// Iterators\n// --------------------------------------------------------------------------\n/** Returns true if this value is an async iterator */\nexport function IsAsyncIterator(value) {\n  return IsObject(value) && Symbol.asyncIterator in value;\n}\n/** Returns true if this value is an iterator */\nexport function IsIterator(value) {\n  return IsObject(value) && Symbol.iterator in value;\n}\n// --------------------------------------------------------------------------\n// Object Instances\n// --------------------------------------------------------------------------\n/** Returns true if this value is not an instance of a class */\nexport function IsStandardObject(value) {\n  return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);\n}\n/** Returns true if this value is an instance of a class */\nexport function IsInstanceObject(value) {\n  return IsObject(value) && !IsArray(value) && IsFunction(value.constructor) && value.constructor.name !== 'Object';\n}\n// --------------------------------------------------------------------------\n// JavaScript\n// --------------------------------------------------------------------------\n/** Returns true if this value is a Promise */\nexport function IsPromise(value) {\n  return value instanceof Promise;\n}\n/** Returns true if this value is a Date */\nexport function IsDate(value) {\n  return value instanceof Date && Number.isFinite(value.getTime());\n}\n/** Returns true if this value is an instance of Map<K, T> */\nexport function IsMap(value) {\n  return value instanceof globalThis.Map;\n}\n/** Returns true if this value is an instance of Set<T> */\nexport function IsSet(value) {\n  return value instanceof globalThis.Set;\n}\n/** Returns true if this value is RegExp */\nexport function IsRegExp(value) {\n  return value instanceof globalThis.RegExp;\n}\n/** Returns true if this value is a typed array */\nexport function IsTypedArray(value) {\n  return ArrayBuffer.isView(value);\n}\n/** Returns true if the value is a Int8Array */\nexport function IsInt8Array(value) {\n  return value instanceof globalThis.Int8Array;\n}\n/** Returns true if the value is a Uint8Array */\nexport function IsUint8Array(value) {\n  return value instanceof globalThis.Uint8Array;\n}\n/** Returns true if the value is a Uint8ClampedArray */\nexport function IsUint8ClampedArray(value) {\n  return value instanceof globalThis.Uint8ClampedArray;\n}\n/** Returns true if the value is a Int16Array */\nexport function IsInt16Array(value) {\n  return value instanceof globalThis.Int16Array;\n}\n/** Returns true if the value is a Uint16Array */\nexport function IsUint16Array(value) {\n  return value instanceof globalThis.Uint16Array;\n}\n/** Returns true if the value is a Int32Array */\nexport function IsInt32Array(value) {\n  return value instanceof globalThis.Int32Array;\n}\n/** Returns true if the value is a Uint32Array */\nexport function IsUint32Array(value) {\n  return value instanceof globalThis.Uint32Array;\n}\n/** Returns true if the value is a Float32Array */\nexport function IsFloat32Array(value) {\n  return value instanceof globalThis.Float32Array;\n}\n/** Returns true if the value is a Float64Array */\nexport function IsFloat64Array(value) {\n  return value instanceof globalThis.Float64Array;\n}\n/** Returns true if the value is a BigInt64Array */\nexport function IsBigInt64Array(value) {\n  return value instanceof globalThis.BigInt64Array;\n}\n/** Returns true if the value is a BigUint64Array */\nexport function IsBigUint64Array(value) {\n  return value instanceof globalThis.BigUint64Array;\n}\n// --------------------------------------------------------------------------\n// Standard\n// --------------------------------------------------------------------------\n/** Returns true if this value has this property key */\nexport function HasPropertyKey(value, key) {\n  return key in value;\n}\n/** Returns true of this value is an object type */\nexport function IsObject(value) {\n  return value !== null && typeof value === 'object';\n}\n/** Returns true if this value is an array, but not a typed array */\nexport function IsArray(value) {\n  return Array.isArray(value) && !ArrayBuffer.isView(value);\n}\n/** Returns true if this value is an undefined */\nexport function IsUndefined(value) {\n  return value === undefined;\n}\n/** Returns true if this value is an null */\nexport function IsNull(value) {\n  return value === null;\n}\n/** Returns true if this value is an boolean */\nexport function IsBoolean(value) {\n  return typeof value === 'boolean';\n}\n/** Returns true if this value is an number */\nexport function IsNumber(value) {\n  return typeof value === 'number';\n}\n/** Returns true if this value is an integer */\nexport function IsInteger(value) {\n  return Number.isInteger(value);\n}\n/** Returns true if this value is bigint */\nexport function IsBigInt(value) {\n  return typeof value === 'bigint';\n}\n/** Returns true if this value is string */\nexport function IsString(value) {\n  return typeof value === 'string';\n}\n/** Returns true if this value is a function */\nexport function IsFunction(value) {\n  return typeof value === 'function';\n}\n/** Returns true if this value is a symbol */\nexport function IsSymbol(value) {\n  return typeof value === 'symbol';\n}\n/** Returns true if this value is a value type such as number, string, boolean */\nexport function IsValueType(value) {\n  // prettier-ignore\n  return IsBigInt(value) || IsBoolean(value) || IsNull(value) || IsNumber(value) || IsString(value) || IsSymbol(value) || IsUndefined(value);\n}","map":{"version":3,"names":["IsAsyncIterator","value","IsObject","Symbol","asyncIterator","IsIterator","iterator","IsStandardObject","Object","getPrototypeOf","prototype","IsInstanceObject","IsArray","IsFunction","constructor","name","IsPromise","Promise","IsDate","Date","Number","isFinite","getTime","IsMap","globalThis","Map","IsSet","Set","IsRegExp","RegExp","IsTypedArray","ArrayBuffer","isView","IsInt8Array","Int8Array","IsUint8Array","Uint8Array","IsUint8ClampedArray","Uint8ClampedArray","IsInt16Array","Int16Array","IsUint16Array","Uint16Array","IsInt32Array","Int32Array","IsUint32Array","Uint32Array","IsFloat32Array","Float32Array","IsFloat64Array","Float64Array","IsBigInt64Array","BigInt64Array","IsBigUint64Array","BigUint64Array","HasPropertyKey","key","Array","isArray","IsUndefined","undefined","IsNull","IsBoolean","IsNumber","IsInteger","isInteger","IsBigInt","IsString","IsSymbol","IsValueType"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/value/guard/guard.mjs"],"sourcesContent":["// --------------------------------------------------------------------------\n// Iterators\n// --------------------------------------------------------------------------\n/** Returns true if this value is an async iterator */\nexport function IsAsyncIterator(value) {\n    return IsObject(value) && Symbol.asyncIterator in value;\n}\n/** Returns true if this value is an iterator */\nexport function IsIterator(value) {\n    return IsObject(value) && Symbol.iterator in value;\n}\n// --------------------------------------------------------------------------\n// Object Instances\n// --------------------------------------------------------------------------\n/** Returns true if this value is not an instance of a class */\nexport function IsStandardObject(value) {\n    return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);\n}\n/** Returns true if this value is an instance of a class */\nexport function IsInstanceObject(value) {\n    return IsObject(value) && !IsArray(value) && IsFunction(value.constructor) && value.constructor.name !== 'Object';\n}\n// --------------------------------------------------------------------------\n// JavaScript\n// --------------------------------------------------------------------------\n/** Returns true if this value is a Promise */\nexport function IsPromise(value) {\n    return value instanceof Promise;\n}\n/** Returns true if this value is a Date */\nexport function IsDate(value) {\n    return value instanceof Date && Number.isFinite(value.getTime());\n}\n/** Returns true if this value is an instance of Map<K, T> */\nexport function IsMap(value) {\n    return value instanceof globalThis.Map;\n}\n/** Returns true if this value is an instance of Set<T> */\nexport function IsSet(value) {\n    return value instanceof globalThis.Set;\n}\n/** Returns true if this value is RegExp */\nexport function IsRegExp(value) {\n    return value instanceof globalThis.RegExp;\n}\n/** Returns true if this value is a typed array */\nexport function IsTypedArray(value) {\n    return ArrayBuffer.isView(value);\n}\n/** Returns true if the value is a Int8Array */\nexport function IsInt8Array(value) {\n    return value instanceof globalThis.Int8Array;\n}\n/** Returns true if the value is a Uint8Array */\nexport function IsUint8Array(value) {\n    return value instanceof globalThis.Uint8Array;\n}\n/** Returns true if the value is a Uint8ClampedArray */\nexport function IsUint8ClampedArray(value) {\n    return value instanceof globalThis.Uint8ClampedArray;\n}\n/** Returns true if the value is a Int16Array */\nexport function IsInt16Array(value) {\n    return value instanceof globalThis.Int16Array;\n}\n/** Returns true if the value is a Uint16Array */\nexport function IsUint16Array(value) {\n    return value instanceof globalThis.Uint16Array;\n}\n/** Returns true if the value is a Int32Array */\nexport function IsInt32Array(value) {\n    return value instanceof globalThis.Int32Array;\n}\n/** Returns true if the value is a Uint32Array */\nexport function IsUint32Array(value) {\n    return value instanceof globalThis.Uint32Array;\n}\n/** Returns true if the value is a Float32Array */\nexport function IsFloat32Array(value) {\n    return value instanceof globalThis.Float32Array;\n}\n/** Returns true if the value is a Float64Array */\nexport function IsFloat64Array(value) {\n    return value instanceof globalThis.Float64Array;\n}\n/** Returns true if the value is a BigInt64Array */\nexport function IsBigInt64Array(value) {\n    return value instanceof globalThis.BigInt64Array;\n}\n/** Returns true if the value is a BigUint64Array */\nexport function IsBigUint64Array(value) {\n    return value instanceof globalThis.BigUint64Array;\n}\n// --------------------------------------------------------------------------\n// Standard\n// --------------------------------------------------------------------------\n/** Returns true if this value has this property key */\nexport function HasPropertyKey(value, key) {\n    return key in value;\n}\n/** Returns true of this value is an object type */\nexport function IsObject(value) {\n    return value !== null && typeof value === 'object';\n}\n/** Returns true if this value is an array, but not a typed array */\nexport function IsArray(value) {\n    return Array.isArray(value) && !ArrayBuffer.isView(value);\n}\n/** Returns true if this value is an undefined */\nexport function IsUndefined(value) {\n    return value === undefined;\n}\n/** Returns true if this value is an null */\nexport function IsNull(value) {\n    return value === null;\n}\n/** Returns true if this value is an boolean */\nexport function IsBoolean(value) {\n    return typeof value === 'boolean';\n}\n/** Returns true if this value is an number */\nexport function IsNumber(value) {\n    return typeof value === 'number';\n}\n/** Returns true if this value is an integer */\nexport function IsInteger(value) {\n    return Number.isInteger(value);\n}\n/** Returns true if this value is bigint */\nexport function IsBigInt(value) {\n    return typeof value === 'bigint';\n}\n/** Returns true if this value is string */\nexport function IsString(value) {\n    return typeof value === 'string';\n}\n/** Returns true if this value is a function */\nexport function IsFunction(value) {\n    return typeof value === 'function';\n}\n/** Returns true if this value is a symbol */\nexport function IsSymbol(value) {\n    return typeof value === 'symbol';\n}\n/** Returns true if this value is a value type such as number, string, boolean */\nexport function IsValueType(value) {\n    // prettier-ignore\n    return (IsBigInt(value) ||\n        IsBoolean(value) ||\n        IsNull(value) ||\n        IsNumber(value) ||\n        IsString(value) ||\n        IsSymbol(value) ||\n        IsUndefined(value));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}