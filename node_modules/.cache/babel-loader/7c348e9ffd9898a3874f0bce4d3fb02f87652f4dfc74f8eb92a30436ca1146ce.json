{"ast":null,"code":"import finnhub from 'finnhub';\nclass MarketDataService {\n  constructor() {\n    // You'll need to get a free API key from https://finnhub.io/\n    this.apiKey = 'YOUR_FINNHUB_API_KEY'; // Replace with your actual API key\n    this.client = new finnhub.DefaultApi(new finnhub.Configuration({\n      apiKey: this.apiKey\n    }));\n  }\n\n  // Get real-time quote for a single symbol\n  async getQuote(symbol) {\n    try {\n      const quote = await this.client.quote(symbol);\n      return {\n        symbol: symbol,\n        price: quote.c,\n        change: quote.d,\n        changePercent: quote.dp,\n        volume: quote.v,\n        high: quote.h,\n        low: quote.l,\n        open: quote.o,\n        previousClose: quote.pc,\n        timestamp: Date.now(),\n        currency: 'USD',\n        exchange: 'US',\n        shortName: symbol,\n        longName: symbol\n      };\n    } catch (error) {\n      console.error(`Error fetching quote for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Get quotes for multiple symbols\n  async getQuotes(symbols) {\n    try {\n      const quotes = await Promise.all(symbols.map(symbol => this.getQuote(symbol)));\n      return quotes;\n    } catch (error) {\n      console.error('Error fetching quotes:', error);\n      throw error;\n    }\n  }\n\n  // Get historical data for a symbol\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\n    try {\n      const endDate = Math.floor(Date.now() / 1000);\n      const startDate = endDate - 30 * 24 * 60 * 60; // 30 days ago\n\n      const historical = await this.client.stockCandles(symbol, 'D', startDate, endDate);\n      if (historical.s === 'ok') {\n        return historical.t.map((timestamp, index) => ({\n          date: new Date(timestamp * 1000),\n          open: historical.o[index],\n          high: historical.h[index],\n          low: historical.l[index],\n          close: historical.c[index],\n          volume: historical.v[index]\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error(`Error fetching historical data for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Get options chain for a symbol\n  async getOptionsChain(symbol) {\n    try {\n      // Finnhub doesn't provide options data in the free tier\n      // This is a placeholder - you'd need a paid plan for options data\n      throw new Error('Options data requires a paid Finnhub plan');\n    } catch (error) {\n      console.error(`Error fetching options chain for ${symbol}:`, error);\n      throw error;\n    }\n  }\n\n  // Search for symbols\n  async searchSymbols(query) {\n    try {\n      const search = await this.client.symbolSearch(query);\n      return search.result.map(item => ({\n        symbol: item.symbol,\n        name: item.description,\n        exchange: item.primaryExchange,\n        type: item.type\n      }));\n    } catch (error) {\n      console.error('Error searching symbols:', error);\n      throw error;\n    }\n  }\n\n  // Get market summary (major indices)\n  async getMarketSummary() {\n    // Use ETF symbols instead of indices for better compatibility\n    const majorIndices = ['SPY', 'DIA', 'QQQ', 'IWM', 'VXX'];\n    try {\n      const quotes = await this.getQuotes(majorIndices);\n      return quotes.map(quote => ({\n        symbol: quote.symbol,\n        name: this.getIndexName(quote.symbol),\n        price: quote.price,\n        change: quote.change,\n        changePercent: quote.changePercent,\n        volume: quote.volume\n      }));\n    } catch (error) {\n      console.error('Error fetching market summary:', error);\n      throw error;\n    }\n  }\n  getIndexName(symbol) {\n    const names = {\n      'SPY': 'S&P 500 ETF',\n      'DIA': 'Dow Jones ETF',\n      'QQQ': 'NASDAQ ETF',\n      'IWM': 'Russell 2000 ETF',\n      'VXX': 'Volatility Index'\n    };\n    return names[symbol] || symbol;\n  }\n}\nexport default new MarketDataService();","map":{"version":3,"names":["finnhub","MarketDataService","constructor","apiKey","client","DefaultApi","Configuration","getQuote","symbol","quote","price","c","change","d","changePercent","dp","volume","v","high","h","low","l","open","o","previousClose","pc","timestamp","Date","now","currency","exchange","shortName","longName","error","console","getQuotes","symbols","quotes","Promise","all","map","getHistoricalData","period","interval","endDate","Math","floor","startDate","historical","stockCandles","s","t","index","date","close","getOptionsChain","Error","searchSymbols","query","search","symbolSearch","result","item","name","description","primaryExchange","type","getMarketSummary","majorIndices","getIndexName","names"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/src/services/marketDataService.js"],"sourcesContent":["import finnhub from 'finnhub';\r\n\r\nclass MarketDataService {\r\n  constructor() {\r\n    // You'll need to get a free API key from https://finnhub.io/\r\n    this.apiKey = 'YOUR_FINNHUB_API_KEY'; // Replace with your actual API key\r\n    this.client = new finnhub.DefaultApi(new finnhub.Configuration({\r\n      apiKey: this.apiKey\r\n    }));\r\n  }\r\n\r\n  // Get real-time quote for a single symbol\r\n  async getQuote(symbol) {\r\n    try {\r\n      const quote = await this.client.quote(symbol);\r\n      return {\r\n        symbol: symbol,\r\n        price: quote.c,\r\n        change: quote.d,\r\n        changePercent: quote.dp,\r\n        volume: quote.v,\r\n        high: quote.h,\r\n        low: quote.l,\r\n        open: quote.o,\r\n        previousClose: quote.pc,\r\n        timestamp: Date.now(),\r\n        currency: 'USD',\r\n        exchange: 'US',\r\n        shortName: symbol,\r\n        longName: symbol\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error fetching quote for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get quotes for multiple symbols\r\n  async getQuotes(symbols) {\r\n    try {\r\n      const quotes = await Promise.all(\r\n        symbols.map(symbol => this.getQuote(symbol))\r\n      );\r\n      return quotes;\r\n    } catch (error) {\r\n      console.error('Error fetching quotes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get historical data for a symbol\r\n  async getHistoricalData(symbol, period = '1mo', interval = '1d') {\r\n    try {\r\n      const endDate = Math.floor(Date.now() / 1000);\r\n      const startDate = endDate - (30 * 24 * 60 * 60); // 30 days ago\r\n      \r\n      const historical = await this.client.stockCandles(symbol, 'D', startDate, endDate);\r\n      \r\n      if (historical.s === 'ok') {\r\n        return historical.t.map((timestamp, index) => ({\r\n          date: new Date(timestamp * 1000),\r\n          open: historical.o[index],\r\n          high: historical.h[index],\r\n          low: historical.l[index],\r\n          close: historical.c[index],\r\n          volume: historical.v[index]\r\n        }));\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching historical data for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get options chain for a symbol\r\n  async getOptionsChain(symbol) {\r\n    try {\r\n      // Finnhub doesn't provide options data in the free tier\r\n      // This is a placeholder - you'd need a paid plan for options data\r\n      throw new Error('Options data requires a paid Finnhub plan');\r\n    } catch (error) {\r\n      console.error(`Error fetching options chain for ${symbol}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search for symbols\r\n  async searchSymbols(query) {\r\n    try {\r\n      const search = await this.client.symbolSearch(query);\r\n      return search.result.map(item => ({\r\n        symbol: item.symbol,\r\n        name: item.description,\r\n        exchange: item.primaryExchange,\r\n        type: item.type\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error searching symbols:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get market summary (major indices)\r\n  async getMarketSummary() {\r\n    // Use ETF symbols instead of indices for better compatibility\r\n    const majorIndices = ['SPY', 'DIA', 'QQQ', 'IWM', 'VXX'];\r\n    try {\r\n      const quotes = await this.getQuotes(majorIndices);\r\n      return quotes.map(quote => ({\r\n        symbol: quote.symbol,\r\n        name: this.getIndexName(quote.symbol),\r\n        price: quote.price,\r\n        change: quote.change,\r\n        changePercent: quote.changePercent,\r\n        volume: quote.volume\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching market summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getIndexName(symbol) {\r\n    const names = {\r\n      'SPY': 'S&P 500 ETF',\r\n      'DIA': 'Dow Jones ETF',\r\n      'QQQ': 'NASDAQ ETF',\r\n      'IWM': 'Russell 2000 ETF',\r\n      'VXX': 'Volatility Index'\r\n    };\r\n    return names[symbol] || symbol;\r\n  }\r\n}\r\n\r\nexport default new MarketDataService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}