{"ast":null,"code":"import { Type } from \"@sinclair/typebox\";\nimport { Value } from \"@sinclair/typebox/value\";\nimport { FormatRegistry } from \"@sinclair/typebox\";\nimport { isDate, isDateTime, isYear } from \"./datetime.js\";\nFormatRegistry.Set(\"date\", isDate);\nFormatRegistry.Set(\"date-time\", isDateTime);\nFormatRegistry.Set(\"year\", isYear);\n// Strictly must be empty\nexport const EmptyObjectCoerceToNull = Type.Transform(Type.Object({}, {\n  maxProperties: 0,\n  title: \"EmptyObjectCoerceToNull\"\n})).Decode(() => null).Encode(() => ({}));\n// Technically this will also contain a string 'fmt' key but we don't care because we don't use it\nexport const RawNumber = Type.Transform(Type.Object({\n  raw: Type.Number()\n}, {\n  title: \"RawNumber\"\n})).Decode(v => v.raw).Encode(v => ({\n  raw: v\n}));\nexport const TwoNumberRangeString = Type.Transform(Type.RegExp(/^(-?\\d+(?:\\.\\d+)?) - (-?\\d+(?:\\.\\d+)?)$/g, {\n  title: \"TwoNumberRangeString\"\n})).Decode(value => {\n  // Split the two numbers allowing for negatives on either side\n  const validatedNumbers = value.match(/-?\\d+(?:\\.\\d+)?/g);\n  if (!validatedNumbers) {\n    throw new Error(`Unable to decode number range from: ${value}`);\n  }\n  const [low, high] = validatedNumbers.map(number => parseFloat(number));\n  if (isNaN(low) || isNaN(high)) {\n    throw new Error(`Unable to decode number range from: ${value}. Decoded value for low is: ${low}, decoded value for high is: ${high}`);\n  }\n  return {\n    low,\n    high\n  };\n}).Encode(({\n  low,\n  high\n}) => `${low} - ${high}`);\nconst TwoNumberRange = Type.Object({\n  low: Type.Number(),\n  high: Type.Number()\n}, {\n  title: \"TwoNumberRange\"\n});\nexport const EpochTimestamp = Type.Transform(Type.Number()).Decode(v => new Date(v * 1000)).Encode(v => +v / 1000);\nexport const RawDateObject = Type.Transform(Type.Object({\n  raw: EpochTimestamp\n}, {\n  title: \"RawDateObject\"\n})).Decode(v => v.raw).Encode(v => ({\n  raw: Value.Encode(EpochTimestamp, v)\n}));\nexport const ISOStringDate = Type.Transform(Type.Union([Type.String({\n  format: \"date\"\n}), Type.String({\n  format: \"year\"\n}), Type.String({\n  format: \"date-time\"\n})], {\n  title: \"ISOStringDate\"\n})).Decode(v => new Date(v)).Encode(v => v.toISOString());\nexport const YahooFinanceDate = Type.Union([Type.Date(), EpochTimestamp, RawDateObject, ISOStringDate], {\n  title: \"YahooFinanceDate\"\n});\n/**\n * Validates and decodes all nullable date representations produced by Yahoo\n * e.g. accepted inputs include:\n * - 1612313997\n * - { raw: 1612313997 }\n * - \"2024-02-29\"\n * - \"2024-05-04T13:24:41.100Z\"\n * - {} (coerces to null)\n */\nexport const NullableYahooFinanceDate = Type.Union([YahooFinanceDate, Type.Null(), EmptyObjectCoerceToNull], {\n  title: \"NullableYahooFinanceDate\"\n});\n/**\n * Validates and decodes all number types and coerces to a number\n * e.g. accepted inputs include:\n * - 10.54\n * - {raw: 10.54, fmt: \"%6f\"}\n */\nexport const YahooNumber = Type.Union([RawNumber, Type.Number()], {\n  title: \"YahooNumber\"\n});\n/**\n * Validates and decodes dates represented as milliseconds since the unix epoch to Date objects\n * e.g. accepted inputs include:\n * - 1612313997000\n */\nexport const YahooDateInMs = Type.Transform(Type.Number({\n  title: \"YahooDateInMs\"\n})).Decode(v => new Date(v)).Encode(v => +v);\n/**\n * Validates and decodes all nullable number types and coerces to a number or null\n * e.g. accepted inputs include:\n * - 10.54\n * - {raw: 10.54, fmt: \"%6f\"}\n * - null\n * - {} (coerces to null)\n */\nexport const NullableYahooNumber = Type.Union([RawNumber, EmptyObjectCoerceToNull, Type.Number(), Type.Null()], {\n  title: \"NullableYahooNumber\"\n});\n/**\n * Validates and decodes 2 number ranges to a consistent object format of { low: <number>, high: <number> }\n * e.g. accepted inputs include:\n * - { low: 103, high: 10043 }\n * - \"-32432 - 453\"\n */\nexport const YahooTwoNumberRange = Type.Union([TwoNumberRange, TwoNumberRangeString], {\n  title: \"YahooTwoNumberRange\"\n});","map":{"version":3,"names":["Type","Value","FormatRegistry","isDate","isDateTime","isYear","Set","EmptyObjectCoerceToNull","Transform","Object","maxProperties","title","Decode","Encode","RawNumber","raw","Number","v","TwoNumberRangeString","RegExp","value","validatedNumbers","match","Error","low","high","map","number","parseFloat","isNaN","TwoNumberRange","EpochTimestamp","Date","RawDateObject","ISOStringDate","Union","String","format","toISOString","YahooFinanceDate","NullableYahooFinanceDate","Null","YahooNumber","YahooDateInMs","NullableYahooNumber","YahooTwoNumberRange"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/lib/yahooFinanceTypes.js"],"sourcesContent":["import { Type } from \"@sinclair/typebox\";\nimport { Value } from \"@sinclair/typebox/value\";\nimport { FormatRegistry } from \"@sinclair/typebox\";\nimport { isDate, isDateTime, isYear } from \"./datetime.js\";\nFormatRegistry.Set(\"date\", isDate);\nFormatRegistry.Set(\"date-time\", isDateTime);\nFormatRegistry.Set(\"year\", isYear);\n// Strictly must be empty\nexport const EmptyObjectCoerceToNull = Type.Transform(Type.Object({}, { maxProperties: 0, title: \"EmptyObjectCoerceToNull\" }))\n    .Decode(() => null)\n    .Encode(() => ({}));\n// Technically this will also contain a string 'fmt' key but we don't care because we don't use it\nexport const RawNumber = Type.Transform(Type.Object({\n    raw: Type.Number(),\n}, {\n    title: \"RawNumber\",\n}))\n    .Decode((v) => v.raw)\n    .Encode((v) => ({ raw: v }));\nexport const TwoNumberRangeString = Type.Transform(Type.RegExp(/^(-?\\d+(?:\\.\\d+)?) - (-?\\d+(?:\\.\\d+)?)$/g, {\n    title: \"TwoNumberRangeString\",\n}))\n    .Decode((value) => {\n    // Split the two numbers allowing for negatives on either side\n    const validatedNumbers = value.match(/-?\\d+(?:\\.\\d+)?/g);\n    if (!validatedNumbers) {\n        throw new Error(`Unable to decode number range from: ${value}`);\n    }\n    const [low, high] = validatedNumbers.map((number) => parseFloat(number));\n    if (isNaN(low) || isNaN(high)) {\n        throw new Error(`Unable to decode number range from: ${value}. Decoded value for low is: ${low}, decoded value for high is: ${high}`);\n    }\n    return { low, high };\n})\n    .Encode(({ low, high }) => `${low} - ${high}`);\nconst TwoNumberRange = Type.Object({\n    low: Type.Number(),\n    high: Type.Number(),\n}, { title: \"TwoNumberRange\" });\nexport const EpochTimestamp = Type.Transform(Type.Number())\n    .Decode((v) => new Date(v * 1000))\n    .Encode((v) => +v / 1000);\nexport const RawDateObject = Type.Transform(Type.Object({\n    raw: EpochTimestamp,\n}, { title: \"RawDateObject\" }))\n    .Decode((v) => v.raw)\n    .Encode((v) => ({\n    raw: Value.Encode(EpochTimestamp, v),\n}));\nexport const ISOStringDate = Type.Transform(Type.Union([\n    Type.String({ format: \"date\" }),\n    Type.String({ format: \"year\" }),\n    Type.String({ format: \"date-time\" }),\n], { title: \"ISOStringDate\" }))\n    .Decode((v) => new Date(v))\n    .Encode((v) => v.toISOString());\nexport const YahooFinanceDate = Type.Union([Type.Date(), EpochTimestamp, RawDateObject, ISOStringDate], { title: \"YahooFinanceDate\" });\n/**\n * Validates and decodes all nullable date representations produced by Yahoo\n * e.g. accepted inputs include:\n * - 1612313997\n * - { raw: 1612313997 }\n * - \"2024-02-29\"\n * - \"2024-05-04T13:24:41.100Z\"\n * - {} (coerces to null)\n */\nexport const NullableYahooFinanceDate = Type.Union([YahooFinanceDate, Type.Null(), EmptyObjectCoerceToNull], {\n    title: \"NullableYahooFinanceDate\",\n});\n/**\n * Validates and decodes all number types and coerces to a number\n * e.g. accepted inputs include:\n * - 10.54\n * - {raw: 10.54, fmt: \"%6f\"}\n */\nexport const YahooNumber = Type.Union([RawNumber, Type.Number()], {\n    title: \"YahooNumber\",\n});\n/**\n * Validates and decodes dates represented as milliseconds since the unix epoch to Date objects\n * e.g. accepted inputs include:\n * - 1612313997000\n */\nexport const YahooDateInMs = Type.Transform(Type.Number({ title: \"YahooDateInMs\" }))\n    .Decode((v) => new Date(v))\n    .Encode((v) => +v);\n/**\n * Validates and decodes all nullable number types and coerces to a number or null\n * e.g. accepted inputs include:\n * - 10.54\n * - {raw: 10.54, fmt: \"%6f\"}\n * - null\n * - {} (coerces to null)\n */\nexport const NullableYahooNumber = Type.Union([RawNumber, EmptyObjectCoerceToNull, Type.Number(), Type.Null()], {\n    title: \"NullableYahooNumber\",\n});\n/**\n * Validates and decodes 2 number ranges to a consistent object format of { low: <number>, high: <number> }\n * e.g. accepted inputs include:\n * - { low: 103, high: 10043 }\n * - \"-32432 - 453\"\n */\nexport const YahooTwoNumberRange = Type.Union([TwoNumberRange, TwoNumberRangeString], {\n    title: \"YahooTwoNumberRange\",\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}