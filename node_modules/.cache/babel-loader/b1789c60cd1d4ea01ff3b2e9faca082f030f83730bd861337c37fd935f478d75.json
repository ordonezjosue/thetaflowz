{"ast":null,"code":"import { Literal } from '../literal/index.mjs';\nimport { Boolean } from '../boolean/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Number } from '../number/index.mjs';\nimport { String } from '../string/index.mjs';\nimport { UnionEvaluated } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\n// ------------------------------------------------------------------\n// SyntaxParsers\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction* FromUnion(syntax) {\n  const trim = syntax.trim().replace(/\"|'/g, '');\n  return trim === 'boolean' ? yield Boolean() : trim === 'number' ? yield Number() : trim === 'bigint' ? yield BigInt() : trim === 'string' ? yield String() : yield (() => {\n    const literals = trim.split('|').map(literal => Literal(literal.trim()));\n    return literals.length === 0 ? Never() : literals.length === 1 ? literals[0] : UnionEvaluated(literals);\n  })();\n}\n// prettier-ignore\nfunction* FromTerminal(syntax) {\n  if (syntax[1] !== '{') {\n    const L = Literal('$');\n    const R = FromSyntax(syntax.slice(1));\n    return yield* [L, ...R];\n  }\n  for (let i = 2; i < syntax.length; i++) {\n    if (syntax[i] === '}') {\n      const L = FromUnion(syntax.slice(2, i));\n      const R = FromSyntax(syntax.slice(i + 1));\n      return yield* [...L, ...R];\n    }\n  }\n  yield Literal(syntax);\n}\n// prettier-ignore\nfunction* FromSyntax(syntax) {\n  for (let i = 0; i < syntax.length; i++) {\n    if (syntax[i] === '$') {\n      const L = Literal(syntax.slice(0, i));\n      const R = FromTerminal(syntax.slice(i));\n      return yield* [L, ...R];\n    }\n  }\n  yield Literal(syntax);\n}\n/** Parses TemplateLiteralSyntax and returns a tuple of TemplateLiteralKinds */\nexport function TemplateLiteralSyntax(syntax) {\n  return [...FromSyntax(syntax)];\n}","map":{"version":3,"names":["Literal","Boolean","BigInt","Number","String","UnionEvaluated","Never","FromUnion","syntax","trim","replace","literals","split","map","literal","length","FromTerminal","L","R","FromSyntax","slice","i","TemplateLiteralSyntax"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/template-literal/syntax.mjs"],"sourcesContent":["import { Literal } from '../literal/index.mjs';\nimport { Boolean } from '../boolean/index.mjs';\nimport { BigInt } from '../bigint/index.mjs';\nimport { Number } from '../number/index.mjs';\nimport { String } from '../string/index.mjs';\nimport { UnionEvaluated } from '../union/index.mjs';\nimport { Never } from '../never/index.mjs';\n// ------------------------------------------------------------------\n// SyntaxParsers\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction* FromUnion(syntax) {\n    const trim = syntax.trim().replace(/\"|'/g, '');\n    return (trim === 'boolean' ? yield Boolean() :\n        trim === 'number' ? yield Number() :\n            trim === 'bigint' ? yield BigInt() :\n                trim === 'string' ? yield String() :\n                    yield (() => {\n                        const literals = trim.split('|').map((literal) => Literal(literal.trim()));\n                        return (literals.length === 0 ? Never() :\n                            literals.length === 1 ? literals[0] :\n                                UnionEvaluated(literals));\n                    })());\n}\n// prettier-ignore\nfunction* FromTerminal(syntax) {\n    if (syntax[1] !== '{') {\n        const L = Literal('$');\n        const R = FromSyntax(syntax.slice(1));\n        return yield* [L, ...R];\n    }\n    for (let i = 2; i < syntax.length; i++) {\n        if (syntax[i] === '}') {\n            const L = FromUnion(syntax.slice(2, i));\n            const R = FromSyntax(syntax.slice(i + 1));\n            return yield* [...L, ...R];\n        }\n    }\n    yield Literal(syntax);\n}\n// prettier-ignore\nfunction* FromSyntax(syntax) {\n    for (let i = 0; i < syntax.length; i++) {\n        if (syntax[i] === '$') {\n            const L = Literal(syntax.slice(0, i));\n            const R = FromTerminal(syntax.slice(i));\n            return yield* [L, ...R];\n        }\n    }\n    yield Literal(syntax);\n}\n/** Parses TemplateLiteralSyntax and returns a tuple of TemplateLiteralKinds */\nexport function TemplateLiteralSyntax(syntax) {\n    return [...FromSyntax(syntax)];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}