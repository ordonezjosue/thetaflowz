{"ast":null,"code":"import Queue from \"./queue.js\";\nimport errors from \"./errors.js\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.assert\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport getCrumb from \"./getCrumb.js\";\nconst userAgent = `${pkg.name}/${pkg.version} (+${pkg.repository})`;\nconst _queue = new Queue();\nfunction assertQueueOptions(queue, opts) {\n  opts; //?\n  if (typeof opts.concurrency === \"number\" && queue.concurrency !== opts.concurrency) queue.concurrency = opts.concurrency;\n  if (typeof opts.timeout === \"number\" && queue.timeout !== opts.timeout) queue.timeout = opts.timeout;\n}\nfunction substituteVariables(urlBase) {\n  return urlBase.replace(/\\$\\{([^}]+)\\}/g, (match, varName) => {\n    if (varName === \"YF_QUERY_HOST\") {\n      // const hosts = [\"query1.finance.yahoo.com\", \"query2.finance.yahoo.com\"];\n      // return hosts[Math.floor(Math.random() * hosts.length)];\n      return this._opts.YF_QUERY_HOST || \"query2.finance.yahoo.com\";\n    } else {\n      // i.e. return unsubstituted original variable expression ${VAR}\n      return match;\n    }\n  });\n}\nasync function yahooFinanceFetch(urlBase, params = {}, moduleOpts = {}, func = \"json\", needsCrumb = false) {\n  var _a;\n  if (!(this && this._env)) throw new errors.NoEnvironmentError(\"yahooFinanceFetch called without this._env set\");\n  // TODO: adds func type to json schema which is not supported\n  //const queue = moduleOpts.queue?._queue || _queue;\n  const queue = _queue;\n  assertQueueOptions(queue, {\n    ...this._opts.queue,\n    ...moduleOpts.queue\n  });\n  const {\n    URLSearchParams,\n    fetch,\n    fetchDevel\n  } = this._env;\n  /* istanbul ignore next */\n  // no need to force coverage on real network request.\n  const fetchFunc = moduleOpts.devel ? await fetchDevel() : fetch;\n  const fetchOptionsBase = {\n    ...moduleOpts.fetchOptions,\n    devel: moduleOpts.devel,\n    headers: {\n      \"User-Agent\": userAgent,\n      ...((_a = moduleOpts.fetchOptions) === null || _a === void 0 ? void 0 : _a.headers)\n    }\n  };\n  if (needsCrumb) {\n    if (!this._opts.cookieJar) throw new Error(\"No cookieJar set\");\n    if (!this._opts.logger) throw new Error(\"Logger was unset.\");\n    const crumb = await getCrumb(this._opts.cookieJar, fetchFunc, fetchOptionsBase, this._opts.logger);\n    if (crumb) params.crumb = crumb;\n  }\n  // @ts-expect-error: TODO copy interface? @types lib?\n  const urlSearchParams = new URLSearchParams(params);\n  const url = substituteVariables.call(this, urlBase) + \"?\" + urlSearchParams.toString();\n  // console.log(url);\n  // console.log(cookieJar.serializeSync());\n  if (!this._opts.cookieJar) throw new Error(\"No cookieJar set\");\n  const fetchOptions = {\n    ...fetchOptionsBase,\n    headers: {\n      ...fetchOptionsBase.headers,\n      cookie: await this._opts.cookieJar.getCookieString(url, {\n        allPaths: true\n      })\n    }\n  };\n  // console.log(\"fetch\", url, fetchOptions);\n  // used in moduleExec.ts\n  if (func === \"csv\") func = \"text\";\n  const response = await queue.add(() => fetchFunc(url, fetchOptions));\n  const setCookieHeaders = response.headers.getSetCookie();\n  if (setCookieHeaders) {\n    if (!this._opts.cookieJar) throw new Error(\"No cookieJar set\");\n    this._opts.cookieJar.setFromSetCookieHeaders(setCookieHeaders, url);\n  }\n  const result = await response[func]();\n  /*\n    {\n      finance: {  // or quoteSummary, or any other single key\n        result: null,\n        error: {\n          code: 'Bad Request',\n          description: 'Missing required query parameter=q'\n        }\n      }\n    }\n   */\n  if (func === \"json\") {\n    const keys = Object.keys(result);\n    if (keys.length === 1) {\n      const errorObj = result[keys[0]].error;\n      if (errorObj) {\n        const errorName = errorObj.code.replace(/ /g, \"\") + \"Error\";\n        const ErrorClass = errors[errorName] || Error;\n        throw new ErrorClass(errorObj.description);\n      }\n    }\n  }\n  // We do this last as it generally contains less information (e.g. no desc).\n  if (!response.ok) {\n    console.error(url);\n    const error = new errors.HTTPError(response.statusText);\n    error.code = response.status;\n    throw error;\n  }\n  return result;\n}\nexport { substituteVariables };\nexport default yahooFinanceFetch;","map":{"version":3,"names":["Queue","errors","pkg","type","getCrumb","userAgent","name","version","repository","_queue","assertQueueOptions","queue","opts","concurrency","timeout","substituteVariables","urlBase","replace","match","varName","_opts","YF_QUERY_HOST","yahooFinanceFetch","params","moduleOpts","func","needsCrumb","_a","_env","NoEnvironmentError","URLSearchParams","fetch","fetchDevel","fetchFunc","devel","fetchOptionsBase","fetchOptions","headers","cookieJar","Error","logger","crumb","urlSearchParams","url","call","toString","cookie","getCookieString","allPaths","response","add","setCookieHeaders","getSetCookie","setFromSetCookieHeaders","result","keys","Object","length","errorObj","error","errorName","code","ErrorClass","description","ok","console","HTTPError","statusText","status"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/lib/yahooFinanceFetch.js"],"sourcesContent":["import Queue from \"./queue.js\";\nimport errors from \"./errors.js\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.assert\nimport pkg from \"../../package.json\" with { type: \"json\" };\nimport getCrumb from \"./getCrumb.js\";\nconst userAgent = `${pkg.name}/${pkg.version} (+${pkg.repository})`;\nconst _queue = new Queue();\nfunction assertQueueOptions(queue, opts) {\n    opts; //?\n    if (typeof opts.concurrency === \"number\" &&\n        queue.concurrency !== opts.concurrency)\n        queue.concurrency = opts.concurrency;\n    if (typeof opts.timeout === \"number\" && queue.timeout !== opts.timeout)\n        queue.timeout = opts.timeout;\n}\nfunction substituteVariables(urlBase) {\n    return urlBase.replace(/\\$\\{([^}]+)\\}/g, (match, varName) => {\n        if (varName === \"YF_QUERY_HOST\") {\n            // const hosts = [\"query1.finance.yahoo.com\", \"query2.finance.yahoo.com\"];\n            // return hosts[Math.floor(Math.random() * hosts.length)];\n            return this._opts.YF_QUERY_HOST || \"query2.finance.yahoo.com\";\n        }\n        else {\n            // i.e. return unsubstituted original variable expression ${VAR}\n            return match;\n        }\n    });\n}\nasync function yahooFinanceFetch(urlBase, params = {}, moduleOpts = {}, func = \"json\", needsCrumb = false) {\n    var _a;\n    if (!(this && this._env))\n        throw new errors.NoEnvironmentError(\"yahooFinanceFetch called without this._env set\");\n    // TODO: adds func type to json schema which is not supported\n    //const queue = moduleOpts.queue?._queue || _queue;\n    const queue = _queue;\n    assertQueueOptions(queue, { ...this._opts.queue, ...moduleOpts.queue });\n    const { URLSearchParams, fetch, fetchDevel } = this._env;\n    /* istanbul ignore next */\n    // no need to force coverage on real network request.\n    const fetchFunc = moduleOpts.devel ? await fetchDevel() : fetch;\n    const fetchOptionsBase = {\n        ...moduleOpts.fetchOptions,\n        devel: moduleOpts.devel,\n        headers: {\n            \"User-Agent\": userAgent,\n            ...(_a = moduleOpts.fetchOptions) === null || _a === void 0 ? void 0 : _a.headers,\n        },\n    };\n    if (needsCrumb) {\n        if (!this._opts.cookieJar)\n            throw new Error(\"No cookieJar set\");\n        if (!this._opts.logger)\n            throw new Error(\"Logger was unset.\");\n        const crumb = await getCrumb(this._opts.cookieJar, fetchFunc, fetchOptionsBase, this._opts.logger);\n        if (crumb)\n            params.crumb = crumb;\n    }\n    // @ts-expect-error: TODO copy interface? @types lib?\n    const urlSearchParams = new URLSearchParams(params);\n    const url = substituteVariables.call(this, urlBase) + \"?\" + urlSearchParams.toString();\n    // console.log(url);\n    // console.log(cookieJar.serializeSync());\n    if (!this._opts.cookieJar)\n        throw new Error(\"No cookieJar set\");\n    const fetchOptions = {\n        ...fetchOptionsBase,\n        headers: {\n            ...fetchOptionsBase.headers,\n            cookie: await this._opts.cookieJar.getCookieString(url, {\n                allPaths: true,\n            }),\n        },\n    };\n    // console.log(\"fetch\", url, fetchOptions);\n    // used in moduleExec.ts\n    if (func === \"csv\")\n        func = \"text\";\n    const response = (await queue.add(() => fetchFunc(url, fetchOptions)));\n    const setCookieHeaders = response.headers.getSetCookie();\n    if (setCookieHeaders) {\n        if (!this._opts.cookieJar)\n            throw new Error(\"No cookieJar set\");\n        this._opts.cookieJar.setFromSetCookieHeaders(setCookieHeaders, url);\n    }\n    const result = await response[func]();\n    /*\n      {\n        finance: {  // or quoteSummary, or any other single key\n          result: null,\n          error: {\n            code: 'Bad Request',\n            description: 'Missing required query parameter=q'\n          }\n        }\n      }\n     */\n    if (func === \"json\") {\n        const keys = Object.keys(result);\n        if (keys.length === 1) {\n            const errorObj = result[keys[0]].error;\n            if (errorObj) {\n                const errorName = errorObj.code.replace(/ /g, \"\") + \"Error\";\n                const ErrorClass = errors[errorName] || Error;\n                throw new ErrorClass(errorObj.description);\n            }\n        }\n    }\n    // We do this last as it generally contains less information (e.g. no desc).\n    if (!response.ok) {\n        console.error(url);\n        const error = new errors.HTTPError(response.statusText);\n        error.code = response.status;\n        throw error;\n    }\n    return result;\n}\nexport { substituteVariables };\nexport default yahooFinanceFetch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}