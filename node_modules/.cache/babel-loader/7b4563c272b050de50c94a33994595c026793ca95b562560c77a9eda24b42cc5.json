{"ast":null,"code":"import { Type } from \"@sinclair/typebox\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport Timeseries_Keys from \"../lib/timeseries.json\" with { type: \"json\" };\nimport { YahooFinanceDate, YahooNumber } from \"../lib/yahooFinanceTypes.js\";\nconst FundamentalsTimeSeries_Types = [\"quarterly\", \"annual\", \"trailing\"];\nconst FundamentalsTimeSeries_Modules = [\"financials\", \"balance-sheet\", \"cash-flow\", \"all\"];\nconst FundamentalsTimeSeriesResultSchema = Type.Object({\n  date: YahooFinanceDate\n}, {\n  additionalProperties: Type.Unknown(),\n  title: \"FundamentalsTimeSeriesResult\"\n});\nconst FundamentalsTimeSeriesOptionsSchema = Type.Object({\n  period1: Type.Union([YahooFinanceDate, YahooNumber, Type.String()]),\n  period2: Type.Optional(Type.Union([YahooFinanceDate, YahooNumber, Type.String()])),\n  type: Type.Optional(Type.String()),\n  merge: Type.Optional(Type.Boolean()),\n  // This returns a completely different format that will break the transformer\n  padTimeSeries: Type.Optional(Type.Boolean()),\n  // Not exactly sure what this does, assume it pads p1 and p2???\n  lang: Type.Optional(Type.String()),\n  region: Type.Optional(Type.String()),\n  module: Type.String()\n}, {\n  title: \"FundamentalsTimeSeriesOptions\"\n});\nconst FundamentalsTimeSeriesResultsSchema = Type.Array(FundamentalsTimeSeriesResultSchema);\nconst queryOptionsDefaults = {\n  merge: false,\n  padTimeSeries: true,\n  lang: \"en-US\",\n  region: \"US\",\n  type: \"quarterly\"\n};\nexport default function fundamentalsTimeSeries(symbol, queryOptionsOverrides, moduleOptions) {\n  return this._moduleExec({\n    moduleName: \"options\",\n    query: {\n      assertSymbol: symbol,\n      url: `https://query1.finance.yahoo.com/ws/fundamentals-timeseries/v1/finance/timeseries/${symbol}`,\n      needsCrumb: false,\n      schema: FundamentalsTimeSeriesOptionsSchema,\n      defaults: queryOptionsDefaults,\n      overrides: queryOptionsOverrides,\n      transformWith: processQuery\n    },\n    result: {\n      schema: FundamentalsTimeSeriesResultsSchema,\n      transformWith(response) {\n        if (!response || !response.timeseries) throw new Error(`Unexpected result: ${JSON.stringify(response)}`);\n        return processResponse(response);\n      }\n    },\n    moduleOptions\n  });\n}\n/**\n * Transform the input options into query parameters.\n * The options module defines which keys that are used in the query.\n * The keys are joined together into the query parameter type and\n * pre-fixed with the options type (e.g. annualTotalRevenue).\n * @param queryOptions Input query options.\n * @returns Query parameters.\n */\nexport const processQuery = function (queryOptions) {\n  // Convert dates\n  if (!queryOptions.period2) queryOptions.period2 = new Date();\n  const dates = [\"period1\", \"period2\"];\n  for (const fieldName of dates) {\n    const value = queryOptions[fieldName];\n    if (value instanceof Date) queryOptions[fieldName] = Math.floor(value.getTime() / 1000);else if (typeof value === \"string\") {\n      const timestamp = new Date(value).getTime();\n      if (isNaN(timestamp)) throw new Error(\"yahooFinance.fundamentalsTimeSeries() option '\" + fieldName + \"' invalid date provided: '\" + value + \"'\");\n      queryOptions[fieldName] = Math.floor(timestamp / 1000);\n    }\n  }\n  // Validate query parameters.\n  if (queryOptions.period1 === queryOptions.period2) {\n    throw new Error(\"yahooFinance.fundamentalsTimeSeries() options `period1` and `period2` \" + \"cannot share the same value.\");\n  } else if (!FundamentalsTimeSeries_Types.includes(queryOptions.type || \"\")) {\n    throw new Error(\"yahooFinance.fundamentalsTimeSeries() option type invalid.\");\n  } else if (!FundamentalsTimeSeries_Modules.includes(queryOptions.module || \"\")) {\n    throw new Error(\"yahooFinance.fundamentalsTimeSeries() option module invalid.\");\n  }\n  // Join the keys for the module into query types.\n  const keys = Object.entries(Timeseries_Keys).reduce((previous, [module, keys]) => {\n    if (queryOptions.module == \"all\") {\n      return previous.concat(keys);\n    } else if (module == queryOptions.module) {\n      return previous.concat(keys);\n    } else return previous;\n  }, []);\n  const queryType = queryOptions.type + keys.join(`,${queryOptions.type}`);\n  return {\n    period1: queryOptions.period1,\n    period2: queryOptions.period2,\n    type: queryType\n  };\n};\n/**\n * Transforms the time-series into an array with reported values per period.\n * Each object represents a period and its properties are the data points.\n * Financial statement content variates and keys are skipped when empty.\n * The query keys include the option type  (e.g. annualTotalRevenue).\n * In the response the type is removed (e.g. totalRevenue) for\n * easier mapping by the client.\n * @param response Query response.\n * @returns Formatted response.\n */\nexport const processResponse = function (response) {\n  const keyedByTimestamp = {};\n  const replace = new RegExp(FundamentalsTimeSeries_Types.join(\"|\"));\n  for (let ct = 0; ct < response.timeseries.result.length; ct++) {\n    const result = response.timeseries.result[ct];\n    if (!result.timestamp || !result.timestamp.length) {\n      continue;\n    }\n    for (let ct = 0; ct < result.timestamp.length; ct++) {\n      const timestamp = result.timestamp[ct];\n      const dataKey = Object.keys(result)[2];\n      if (!keyedByTimestamp[timestamp]) {\n        keyedByTimestamp[timestamp] = {\n          date: timestamp\n        };\n      }\n      if (!result[dataKey][ct] || !result[dataKey][ct].reportedValue || !result[dataKey][ct].reportedValue.raw) {\n        continue;\n      }\n      const short = dataKey.replace(replace, \"\");\n      const key = short == short.toUpperCase() ? short : short[0].toLowerCase() + short.slice(1);\n      keyedByTimestamp[timestamp][key] = result[dataKey][ct].reportedValue.raw;\n    }\n  }\n  return Object.keys(keyedByTimestamp).map(k => keyedByTimestamp[k]);\n};","map":{"version":3,"names":["Type","Timeseries_Keys","type","YahooFinanceDate","YahooNumber","FundamentalsTimeSeries_Types","FundamentalsTimeSeries_Modules","FundamentalsTimeSeriesResultSchema","Object","date","additionalProperties","Unknown","title","FundamentalsTimeSeriesOptionsSchema","period1","Union","String","period2","Optional","merge","Boolean","padTimeSeries","lang","region","module","FundamentalsTimeSeriesResultsSchema","Array","queryOptionsDefaults","fundamentalsTimeSeries","symbol","queryOptionsOverrides","moduleOptions","_moduleExec","moduleName","query","assertSymbol","url","needsCrumb","schema","defaults","overrides","transformWith","processQuery","result","response","timeseries","Error","JSON","stringify","processResponse","queryOptions","Date","dates","fieldName","value","Math","floor","getTime","timestamp","isNaN","includes","keys","entries","reduce","previous","concat","queryType","join","keyedByTimestamp","replace","RegExp","ct","length","dataKey","reportedValue","raw","short","key","toUpperCase","toLowerCase","slice","map","k"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/dist/esm/src/modules/fundamentalsTimeSeries.js"],"sourcesContent":["import { Type } from \"@sinclair/typebox\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: we have to ignore this for csm output.\nimport Timeseries_Keys from \"../lib/timeseries.json\" with { type: \"json\" };\nimport { YahooFinanceDate, YahooNumber } from \"../lib/yahooFinanceTypes.js\";\nconst FundamentalsTimeSeries_Types = [\"quarterly\", \"annual\", \"trailing\"];\nconst FundamentalsTimeSeries_Modules = [\n    \"financials\",\n    \"balance-sheet\",\n    \"cash-flow\",\n    \"all\",\n];\nconst FundamentalsTimeSeriesResultSchema = Type.Object({\n    date: YahooFinanceDate,\n}, {\n    additionalProperties: Type.Unknown(),\n    title: \"FundamentalsTimeSeriesResult\",\n});\nconst FundamentalsTimeSeriesOptionsSchema = Type.Object({\n    period1: Type.Union([YahooFinanceDate, YahooNumber, Type.String()]),\n    period2: Type.Optional(Type.Union([YahooFinanceDate, YahooNumber, Type.String()])),\n    type: Type.Optional(Type.String()),\n    merge: Type.Optional(Type.Boolean()), // This returns a completely different format that will break the transformer\n    padTimeSeries: Type.Optional(Type.Boolean()), // Not exactly sure what this does, assume it pads p1 and p2???\n    lang: Type.Optional(Type.String()),\n    region: Type.Optional(Type.String()),\n    module: Type.String(),\n}, {\n    title: \"FundamentalsTimeSeriesOptions\",\n});\nconst FundamentalsTimeSeriesResultsSchema = Type.Array(FundamentalsTimeSeriesResultSchema);\nconst queryOptionsDefaults = {\n    merge: false,\n    padTimeSeries: true,\n    lang: \"en-US\",\n    region: \"US\",\n    type: \"quarterly\",\n};\nexport default function fundamentalsTimeSeries(symbol, queryOptionsOverrides, moduleOptions) {\n    return this._moduleExec({\n        moduleName: \"options\",\n        query: {\n            assertSymbol: symbol,\n            url: `https://query1.finance.yahoo.com/ws/fundamentals-timeseries/v1/finance/timeseries/${symbol}`,\n            needsCrumb: false,\n            schema: FundamentalsTimeSeriesOptionsSchema,\n            defaults: queryOptionsDefaults,\n            overrides: queryOptionsOverrides,\n            transformWith: processQuery,\n        },\n        result: {\n            schema: FundamentalsTimeSeriesResultsSchema,\n            transformWith(response) {\n                if (!response || !response.timeseries)\n                    throw new Error(`Unexpected result: ${JSON.stringify(response)}`);\n                return processResponse(response);\n            },\n        },\n        moduleOptions,\n    });\n}\n/**\n * Transform the input options into query parameters.\n * The options module defines which keys that are used in the query.\n * The keys are joined together into the query parameter type and\n * pre-fixed with the options type (e.g. annualTotalRevenue).\n * @param queryOptions Input query options.\n * @returns Query parameters.\n */\nexport const processQuery = function (queryOptions) {\n    // Convert dates\n    if (!queryOptions.period2)\n        queryOptions.period2 = new Date();\n    const dates = [\"period1\", \"period2\"];\n    for (const fieldName of dates) {\n        const value = queryOptions[fieldName];\n        if (value instanceof Date)\n            queryOptions[fieldName] = Math.floor(value.getTime() / 1000);\n        else if (typeof value === \"string\") {\n            const timestamp = new Date(value).getTime();\n            if (isNaN(timestamp))\n                throw new Error(\"yahooFinance.fundamentalsTimeSeries() option '\" +\n                    fieldName +\n                    \"' invalid date provided: '\" +\n                    value +\n                    \"'\");\n            queryOptions[fieldName] = Math.floor(timestamp / 1000);\n        }\n    }\n    // Validate query parameters.\n    if (queryOptions.period1 === queryOptions.period2) {\n        throw new Error(\"yahooFinance.fundamentalsTimeSeries() options `period1` and `period2` \" +\n            \"cannot share the same value.\");\n    }\n    else if (!FundamentalsTimeSeries_Types.includes(queryOptions.type || \"\")) {\n        throw new Error(\"yahooFinance.fundamentalsTimeSeries() option type invalid.\");\n    }\n    else if (!FundamentalsTimeSeries_Modules.includes(queryOptions.module || \"\")) {\n        throw new Error(\"yahooFinance.fundamentalsTimeSeries() option module invalid.\");\n    }\n    // Join the keys for the module into query types.\n    const keys = Object.entries(Timeseries_Keys).reduce((previous, [module, keys]) => {\n        if (queryOptions.module == \"all\") {\n            return previous.concat(keys);\n        }\n        else if (module == queryOptions.module) {\n            return previous.concat(keys);\n        }\n        else\n            return previous;\n    }, []);\n    const queryType = queryOptions.type + keys.join(`,${queryOptions.type}`);\n    return {\n        period1: queryOptions.period1,\n        period2: queryOptions.period2,\n        type: queryType,\n    };\n};\n/**\n * Transforms the time-series into an array with reported values per period.\n * Each object represents a period and its properties are the data points.\n * Financial statement content variates and keys are skipped when empty.\n * The query keys include the option type  (e.g. annualTotalRevenue).\n * In the response the type is removed (e.g. totalRevenue) for\n * easier mapping by the client.\n * @param response Query response.\n * @returns Formatted response.\n */\nexport const processResponse = function (response) {\n    const keyedByTimestamp = {};\n    const replace = new RegExp(FundamentalsTimeSeries_Types.join(\"|\"));\n    for (let ct = 0; ct < response.timeseries.result.length; ct++) {\n        const result = response.timeseries.result[ct];\n        if (!result.timestamp || !result.timestamp.length) {\n            continue;\n        }\n        for (let ct = 0; ct < result.timestamp.length; ct++) {\n            const timestamp = result.timestamp[ct];\n            const dataKey = Object.keys(result)[2];\n            if (!keyedByTimestamp[timestamp]) {\n                keyedByTimestamp[timestamp] = { date: timestamp };\n            }\n            if (!result[dataKey][ct] ||\n                !result[dataKey][ct].reportedValue ||\n                !result[dataKey][ct].reportedValue.raw) {\n                continue;\n            }\n            const short = dataKey.replace(replace, \"\");\n            const key = short == short.toUpperCase()\n                ? short\n                : short[0].toLowerCase() + short.slice(1);\n            keyedByTimestamp[timestamp][key] = result[dataKey][ct].reportedValue.raw;\n        }\n    }\n    return Object.keys(keyedByTimestamp).map((k) => keyedByTimestamp[k]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}