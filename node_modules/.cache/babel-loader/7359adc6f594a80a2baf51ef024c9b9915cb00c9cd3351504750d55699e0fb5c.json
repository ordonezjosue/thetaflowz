{"ast":null,"code":"import { Optional } from '../optional/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { PartialFromMappedResult } from './partial-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n  return T.map(L => PartialResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n  const Acc = {};\n  for (const K of globalThis.Object.getOwnPropertyNames(T)) Acc[K] = Optional(T[K]);\n  return Acc;\n}\n// ------------------------------------------------------------------\n// PartialResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction PartialResolve(T) {\n  return IsIntersect(T) ? Intersect(FromRest(T.allOf)) : IsUnion(T) ? Union(FromRest(T.anyOf)) : IsObject(T) ? Object(FromProperties(T.properties)) : Object({});\n}\n/** `[Json]` Constructs a type where all properties are optional */\nexport function Partial(T, options = {}) {\n  if (IsMappedResult(T)) return PartialFromMappedResult(T, options);\n  const D = Discard(T, [TransformKind, '$id', 'required']);\n  const R = CloneType(PartialResolve(T), options);\n  return {\n    ...D,\n    ...R\n  };\n}","map":{"version":3,"names":["Optional","Object","Intersect","Union","Discard","TransformKind","CloneType","PartialFromMappedResult","IsMappedResult","IsIntersect","IsUnion","IsObject","FromRest","T","map","L","PartialResolve","FromProperties","Acc","K","globalThis","getOwnPropertyNames","allOf","anyOf","properties","Partial","options","D","R"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/partial/partial.mjs"],"sourcesContent":["import { Optional } from '../optional/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { PartialFromMappedResult } from './partial-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => PartialResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n    const Acc = {};\n    for (const K of globalThis.Object.getOwnPropertyNames(T))\n        Acc[K] = Optional(T[K]);\n    return Acc;\n}\n// ------------------------------------------------------------------\n// PartialResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction PartialResolve(T) {\n    return (IsIntersect(T) ? Intersect(FromRest(T.allOf)) :\n        IsUnion(T) ? Union(FromRest(T.anyOf)) :\n            IsObject(T) ? Object(FromProperties(T.properties)) :\n                Object({}));\n}\n/** `[Json]` Constructs a type where all properties are optional */\nexport function Partial(T, options = {}) {\n    if (IsMappedResult(T))\n        return PartialFromMappedResult(T, options);\n    const D = Discard(T, [TransformKind, '$id', 'required']);\n    const R = CloneType(PartialResolve(T), options);\n    return { ...D, ...R };\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,uBAAuB,QAAQ,kCAAkC;AAC1E;AACA;AACA;AACA,SAASC,cAAc,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,mBAAmB;AAClF;AACA,SAASC,QAAQA,CAACC,CAAC,EAAE;EACjB,OAAOA,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,cAAc,CAACD,CAAC,CAAC,CAAC;AACxC;AACA;AACA,SAASE,cAAcA,CAACJ,CAAC,EAAE;EACvB,MAAMK,GAAG,GAAG,CAAC,CAAC;EACd,KAAK,MAAMC,CAAC,IAAIC,UAAU,CAACnB,MAAM,CAACoB,mBAAmB,CAACR,CAAC,CAAC,EACpDK,GAAG,CAACC,CAAC,CAAC,GAAGnB,QAAQ,CAACa,CAAC,CAACM,CAAC,CAAC,CAAC;EAC3B,OAAOD,GAAG;AACd;AACA;AACA;AACA;AACA;AACA,SAASF,cAAcA,CAACH,CAAC,EAAE;EACvB,OAAQJ,WAAW,CAACI,CAAC,CAAC,GAAGX,SAAS,CAACU,QAAQ,CAACC,CAAC,CAACS,KAAK,CAAC,CAAC,GACjDZ,OAAO,CAACG,CAAC,CAAC,GAAGV,KAAK,CAACS,QAAQ,CAACC,CAAC,CAACU,KAAK,CAAC,CAAC,GACjCZ,QAAQ,CAACE,CAAC,CAAC,GAAGZ,MAAM,CAACgB,cAAc,CAACJ,CAAC,CAACW,UAAU,CAAC,CAAC,GAC9CvB,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B;AACA;AACA,OAAO,SAASwB,OAAOA,CAACZ,CAAC,EAAEa,OAAO,GAAG,CAAC,CAAC,EAAE;EACrC,IAAIlB,cAAc,CAACK,CAAC,CAAC,EACjB,OAAON,uBAAuB,CAACM,CAAC,EAAEa,OAAO,CAAC;EAC9C,MAAMC,CAAC,GAAGvB,OAAO,CAACS,CAAC,EAAE,CAACR,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;EACxD,MAAMuB,CAAC,GAAGtB,SAAS,CAACU,cAAc,CAACH,CAAC,CAAC,EAAEa,OAAO,CAAC;EAC/C,OAAO;IAAE,GAAGC,CAAC;IAAE,GAAGC;EAAE,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}