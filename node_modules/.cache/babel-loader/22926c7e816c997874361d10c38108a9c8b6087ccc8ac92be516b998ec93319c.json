{"ast":null,"code":"import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { OptionalKind, TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { RequiredFromMappedResult } from './required-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n  return T.map(L => RequiredResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n  const Acc = {};\n  for (const K of globalThis.Object.getOwnPropertyNames(T)) Acc[K] = Discard(T[K], [OptionalKind]);\n  return Acc;\n}\n// ------------------------------------------------------------------\n// RequiredResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RequiredResolve(T) {\n  return IsIntersect(T) ? Intersect(FromRest(T.allOf)) : IsUnion(T) ? Union(FromRest(T.anyOf)) : IsObject(T) ? Object(FromProperties(T.properties)) : Object({});\n}\n/** `[Json]` Constructs a type where all properties are required */\nexport function Required(T, options = {}) {\n  if (IsMappedResult(T)) {\n    return RequiredFromMappedResult(T, options);\n  } else {\n    const D = Discard(T, [TransformKind, '$id', 'required']);\n    const R = CloneType(RequiredResolve(T), options);\n    return {\n      ...D,\n      ...R\n    };\n  }\n}","map":{"version":3,"names":["Intersect","Union","Object","OptionalKind","TransformKind","CloneType","Discard","RequiredFromMappedResult","IsMappedResult","IsIntersect","IsUnion","IsObject","FromRest","T","map","L","RequiredResolve","FromProperties","Acc","K","globalThis","getOwnPropertyNames","allOf","anyOf","properties","Required","options","D","R"],"sources":["C:/Users/ordon/ThetaFlowz_Cursor/node_modules/yahoo-finance2/node_modules/@sinclair/typebox/build/esm/type/required/required.mjs"],"sourcesContent":["import { Intersect } from '../intersect/index.mjs';\nimport { Union } from '../union/index.mjs';\nimport { Object } from '../object/index.mjs';\nimport { OptionalKind, TransformKind } from '../symbols/index.mjs';\nimport { CloneType } from '../clone/type.mjs';\nimport { Discard } from '../discard/index.mjs';\nimport { RequiredFromMappedResult } from './required-from-mapped-result.mjs';\n// ------------------------------------------------------------------\n// TypeGuard\n// ------------------------------------------------------------------\nimport { IsMappedResult, IsIntersect, IsUnion, IsObject } from '../guard/kind.mjs';\n// prettier-ignore\nfunction FromRest(T) {\n    return T.map(L => RequiredResolve(L));\n}\n// prettier-ignore\nfunction FromProperties(T) {\n    const Acc = {};\n    for (const K of globalThis.Object.getOwnPropertyNames(T))\n        Acc[K] = Discard(T[K], [OptionalKind]);\n    return Acc;\n}\n// ------------------------------------------------------------------\n// RequiredResolve\n// ------------------------------------------------------------------\n// prettier-ignore\nfunction RequiredResolve(T) {\n    return (IsIntersect(T) ? Intersect(FromRest(T.allOf)) :\n        IsUnion(T) ? Union(FromRest(T.anyOf)) :\n            IsObject(T) ? Object(FromProperties(T.properties)) :\n                Object({}));\n}\n/** `[Json]` Constructs a type where all properties are required */\nexport function Required(T, options = {}) {\n    if (IsMappedResult(T)) {\n        return RequiredFromMappedResult(T, options);\n    }\n    else {\n        const D = Discard(T, [TransformKind, '$id', 'required']);\n        const R = CloneType(RequiredResolve(T), options);\n        return { ...D, ...R };\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,YAAY,EAAEC,aAAa,QAAQ,sBAAsB;AAClE,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,wBAAwB,QAAQ,mCAAmC;AAC5E;AACA;AACA;AACA,SAASC,cAAc,EAAEC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,mBAAmB;AAClF;AACA,SAASC,QAAQA,CAACC,CAAC,EAAE;EACjB,OAAOA,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,eAAe,CAACD,CAAC,CAAC,CAAC;AACzC;AACA;AACA,SAASE,cAAcA,CAACJ,CAAC,EAAE;EACvB,MAAMK,GAAG,GAAG,CAAC,CAAC;EACd,KAAK,MAAMC,CAAC,IAAIC,UAAU,CAAClB,MAAM,CAACmB,mBAAmB,CAACR,CAAC,CAAC,EACpDK,GAAG,CAACC,CAAC,CAAC,GAAGb,OAAO,CAACO,CAAC,CAACM,CAAC,CAAC,EAAE,CAAChB,YAAY,CAAC,CAAC;EAC1C,OAAOe,GAAG;AACd;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAACH,CAAC,EAAE;EACxB,OAAQJ,WAAW,CAACI,CAAC,CAAC,GAAGb,SAAS,CAACY,QAAQ,CAACC,CAAC,CAACS,KAAK,CAAC,CAAC,GACjDZ,OAAO,CAACG,CAAC,CAAC,GAAGZ,KAAK,CAACW,QAAQ,CAACC,CAAC,CAACU,KAAK,CAAC,CAAC,GACjCZ,QAAQ,CAACE,CAAC,CAAC,GAAGX,MAAM,CAACe,cAAc,CAACJ,CAAC,CAACW,UAAU,CAAC,CAAC,GAC9CtB,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B;AACA;AACA,OAAO,SAASuB,QAAQA,CAACZ,CAAC,EAAEa,OAAO,GAAG,CAAC,CAAC,EAAE;EACtC,IAAIlB,cAAc,CAACK,CAAC,CAAC,EAAE;IACnB,OAAON,wBAAwB,CAACM,CAAC,EAAEa,OAAO,CAAC;EAC/C,CAAC,MACI;IACD,MAAMC,CAAC,GAAGrB,OAAO,CAACO,CAAC,EAAE,CAACT,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACxD,MAAMwB,CAAC,GAAGvB,SAAS,CAACW,eAAe,CAACH,CAAC,CAAC,EAAEa,OAAO,CAAC;IAChD,OAAO;MAAE,GAAGC,CAAC;MAAE,GAAGC;IAAE,CAAC;EACzB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}